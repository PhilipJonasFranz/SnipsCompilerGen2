SOURCE
int add(int [2] [2] m) {
	return m [0] [0] + m [0] [1] +
		   m [1] [0] + m [1] [1];
}

int main() {
	int [2] [2] m = {{3, 6}, 
	                 {2, 4}};
	return add(m);
}
TESTCASES
15
OUTPUT
/* --test_12.txt */
    b main
add:                                         /* Function: add */
    push { fp }
    mov fp, sp
    mov r2, #0                               /* Evaluate Expression */
    mov r0, #0
    mov r1, #8
    mul r0, r0, r1
    add r2, r2, r0
    add r0, fp, #4
    ldr r0, [r0, r2]
    mov r2, #0                               /* Calculate offset of sub structure */
    push { r0 }
    mov r0, #0
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    ldr r2, [r0, r2]
    add r0, r1, r2
    mov r2, #0                               /* Calculate offset of sub structure */
    push { r0 }
    mov r0, #1
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r0, fp, #4
    ldr r2, [r0, r2]
    add r0, r1, r2
    mov r2, #0                               /* Calculate offset of sub structure */
    push { r0 }
    mov r0, #1
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    ldr r2, [r0, r2]
    add r0, r1, r2
    mov sp, fp
    pop { fp }
    add sp, sp, #16
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #2
    push { r1, r0 }
    mov r0, #6
    mov r1, #3
    push { r1, r0 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    push { r0 }
    bl add                                   /* Call add */
    mov sp, fp
    pop { fp, lr }
    bx lr
    
