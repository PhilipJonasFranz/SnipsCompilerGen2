SOURCE
int [2] [2] vec = {{3, 7}, {2, 0}};
	
int foo(int [2] [2] v, int x, int y) {
	v = {{1, 5}, {9, 2}};
	return v [x] [y];
}

int main(int x, int y) { 
	return foo(vec, x, y);
}
TESTCASES
0 0 1
0 1 5
1 0 9
1 1 2
OUTPUT
/* --test_28.txt */
.data
vec: 
        .word 3
        .word 7
        .word 2
        .word 0
    
.text
    b main
foo:                          /* Function: foo */
    push { r3, r4, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #2                /* Evaluate Expression */
    mov r1, #9
    push { r1, r0 }
    mov r0, #5
    mov r1, #1
    push { r1, r0 }
    add r1, fp, #12           /* Start of structure in stack */
    pop { r0 }
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r2, #0                /* Evaluate Expression */
    mov r0, r3
    mov r1, #8
    mul r0, r0, r1
    add r2, r2, r0
    lsl r0, r4, #2
    add r2, r2, r0
    add r0, fp, #12
    add r0, r0, r2
    ldr r0, [r0]
    mov sp, fp
    pop { r3, r4, fp }
    add sp, sp, #16
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    ldr r2, .POOL0_main.L0_vec/* Evaluate Expression */
    add r2, r2, #12
    ldr r0, [r2] #-4
    ldr r1, [r2] #-4
    push { r1, r0 }
    ldr r0, [r2] #-4
    ldr r1, [r2] #-4
    push { r1, r0 }
    mov r0, r4
    push { r0 }
    mov r0, r3
    pop { r1 }
    bl foo                    /* Call foo */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
.POOL0_main.L0_vec: .word vec
    
