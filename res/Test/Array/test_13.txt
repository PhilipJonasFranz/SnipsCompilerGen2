SOURCE
int add(int [9] m) {
	return m [0] + m [1] + m [2] + 
		   m [3] + m [4] + m [5] + 
		   m [6] + m [7] + m [8];
}

int main(int index) {
	int [2] [9] m = {{7, 8, 9, 0, 1, 2, 3, 4, 5}, 
	                 {1, 2, 3, 4, 5, 6, 7, 8, 9}};
	return add(m [index]);
}
TESTCASES
0 39
1 45
OUTPUT
/* --test_13.txt */
    b main
add:                                         /* Function: add */
    ldr r0, [sp, #0]
    ldr r2, [sp, #4]
    add r0, r0, r2
    ldr r2, [sp, #8]
    add r0, r0, r2
    ldr r2, [sp, #12]
    add r0, r0, r2
    ldr r2, [sp, #16]
    add r0, r0, r2
    ldr r2, [sp, #20]
    add r0, r0, r2
    ldr r2, [sp, #24]
    add r0, r0, r2
    ldr r2, [sp, #28]
    add r0, r0, r2
    ldr r2, [sp, #32]
    add r0, r0, r2
    add sp, sp, #36
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #9                               /* Evaluate Expression */
    mov r1, #8
    mov r2, #7
    stmfd sp!, {r0-r2}
    mov r0, #6
    mov r1, #5
    mov r2, #4
    stmfd sp!, {r0-r2}
    mov r0, #3
    mov r1, #2
    mov r2, #1
    stmfd sp!, {r0-r2}
    mov r0, #5
    mov r1, #4
    mov r2, #3
    stmfd sp!, {r0-r2}
    mov r0, #2
    mov r1, #1
    mov r2, #0
    stmfd sp!, {r0-r2}
    mov r0, #9
    mov r1, #8
    mov r2, #7
    stmfd sp!, {r0-r2}
    mov r2, #0                               /* Evaluate Expression */
    mov r1, #36
    mul r0, r3, r1
    add r2, r2, r0
    sub r1, fp, #72                          /* Start of structure in stack */
    add r1, r1, r2                           /* Start of sub structure in stack */
    add r2, r1, #36
main.L0:                                     /* Copy memory section with loop */
    cmp r1, r2
    beq main.L1
    ldr r0, [r1] #4
    push { r0 }
    b main.L0
main.L1: 
    bl add                                   /* Call add */
    mov sp, fp
    ldmfd sp!, {fp, pc}
    
