SOURCE
int bar(int [2] [2] y) {
	return y [1] [1];
}

int foo(int [3] [3] y) {
	return y [2] [2];
}

int main(int b) {
	int [2] [2] x = {{1, 2}, {3, 4}};
	int [3] [3] m = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	return bar(x) + b + foo(m);
}
TESTCASES
0 13
4 17
OUTPUT
/* --test_08.txt */
    b main
bar:                                         /* Function: bar */
    push { fp }
    mov fp, sp
    mov r2, #0                               /* Evaluate Expression */
    mov r0, #1
    mov r1, #8
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    mov sp, fp
    pop { fp }
    add sp, sp, #16
    bx lr
    
foo:                                         /* Function: foo */
    push { fp }
    mov fp, sp
    mov r2, #0                               /* Evaluate Expression */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    mov sp, fp
    pop { fp }
    add sp, sp, #36
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #3
    push { r1, r0 }
    mov r0, #2
    mov r1, #1
    push { r1, r0 }
    mov r0, #9                               /* Evaluate Expression */
    mov r1, #8
    mov r2, #7
    push { r2, r1, r0 }
    mov r0, #6
    mov r1, #5
    mov r2, #4
    push { r2, r1, r0 }
    mov r0, #3
    mov r1, #2
    mov r2, #1
    push { r2, r1, r0 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    push { r0 }
    bl bar                                   /* Call bar */
    add r0, r0, r3
    push { r0 }
    ldr r0, [fp, #-20]                       /* Load parameters */
    ldr r1, [fp, #-24]
    ldr r2, [fp, #-28]
    push { r2, r1, r0 }
    ldr r0, [fp, #-32]
    ldr r1, [fp, #-36]
    ldr r2, [fp, #-40]
    push { r2, r1, r0 }
    ldr r0, [fp, #-44]
    ldr r1, [fp, #-48]
    ldr r2, [fp, #-52]
    push { r2, r1, r0 }
    bl foo                                   /* Call foo */
    pop { r1 }
    add r0, r1, r0
    mov sp, fp
    pop { fp, lr }
    bx lr
    
