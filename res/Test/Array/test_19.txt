SOURCE
int __vec_cross(int [3] v, int [3] w) {
	int sum = 0;
	for (int i = 0; i < 3; i = i + 1) {
		sum = sum + (v [i] * w [i]);
	}
	return sum;
}

int main() {
	int [3] [3] m = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	int [3] [3] n = {{1, 4, 7}, {2, 5, 8}, {3, 6, 9}};

	return __vec_cross(m [0], n [0]);
}
TESTCASES
30
OUTPUT
/* --test_19.txt */
    b main
__vec_cross:                  /* Function: __vec_cross */
    push { r3, r4, fp }
    mov fp, sp
    mov r3, #0
    mov r0, #0                /* Evaluate Expression */
    mov r4, #0
__vec_cross.L1: 
    cmp r4, #3
    bge __vec_cross.L2
    lsl r2, r4, #2
    add r0, fp, #24
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    lsl r2, r4, #2
    add r0, fp, #12
    add r0, r0, r2
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    add r3, r3, r2
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    mov r4, r0
    b __vec_cross.L1
__vec_cross.L2: 
    mov r0, r3                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, fp }
    bx lr
    
main:                         /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #9                /* Evaluate Expression */
    mov r1, #8
    mov r2, #7
    push { r2, r1, r0 }
    mov r0, #6
    mov r1, #5
    mov r2, #4
    push { r2, r1, r0 }
    mov r0, #3
    mov r1, #2
    mov r2, #1
    push { r2, r1, r0 }
    mov r0, #9                /* Evaluate Expression */
    mov r1, #6
    mov r2, #3
    push { r2, r1, r0 }
    mov r0, #8
    mov r1, #5
    mov r2, #2
    push { r2, r1, r0 }
    mov r0, #7
    mov r1, #4
    mov r2, #1
    push { r2, r1, r0 }
    mov r2, #0                /* Evaluate Expression */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    sub r1, fp, #36           /* Start of structure in stack */
    add r1, r1, r2            /* Start of sub structure in stack */
    ldr r0, [r1, #8]
    ldr r2, [r1, #4]
    push { r2, r0 }
    ldr r0, [r1, #0]
    push { r0 }
    mov r2, #0                /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    sub r1, fp, #72           /* Start of structure in stack */
    add r1, r1, r2            /* Start of sub structure in stack */
    ldr r0, [r1, #8]
    ldr r2, [r1, #4]
    push { r2, r0 }
    ldr r0, [r1, #0]
    push { r0 }
    bl __vec_cross            /* Call __vec_cross */
    add sp, sp, #24
    mov sp, fp
    pop { fp, lr }
    bx lr
    
