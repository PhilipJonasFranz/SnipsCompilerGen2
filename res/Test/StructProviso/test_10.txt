SOURCE
struct Nib<T> {
	T data;
}

struct Data<T> {
	Nib<T>[2] nibs;
}

int main(int x) {
	int[3] arr = {1, 2, 3};
	int[3] arr2 = {4, 5, 6};
	
	Data<int*> data = Data<int*>::({Nib<int*>::(&arr), Nib<int*>::(&arr2)});
	
	*(data.nibs [0].data + 1) = 5;
	
	return *(data.nibs [0].data + x) + *(data.nibs [1].data + x);
}
TESTCASES
0 5
1 10
2 9
OUTPUT
/* --test_10.txt */
main:                                        /* Function: main */
    mov fp, sp
    mov r3, r0
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #1
    push { r2, r1, r0 }
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    push { r2, r1, r0 }
    sub r0, fp, #24                          /* Evaluate Expression */
    lsr r0, r0, #2
    push { r0 }
    mov r0, #1
    push { r0 }
    sub r0, fp, #12
    lsr r0, r0, #2
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r0, #2
    push { r0 }
    mov r0, #5                               /* Evaluate Expression */
    sub r1, fp, #40                          /* Load field location */
    mov r2, #0                               /* Calculate offset of sub structure */
    push { r0 }
    mov r0, #0
    push { r1 }
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r1, r1, r2
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, #1
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    sub r1, fp, #40                          /* Evaluate Expression */
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    push { r1 }
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r1, r1, r2
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r3
    lsl r0, r0, #2                           /* Convert to bytes */
    ldr r0, [r0]                             /* Load from address */
    sub r1, fp, #40                          /* Load field location */
    mov r2, #0                               /* Calculate offset of sub structure */
    push { r0 }
    mov r0, #1
    push { r1 }
    mov r1, #8
    mul r0, r0, r1
    pop { r1 }
    add r2, r2, r0
    add r1, r1, r2
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r3
    pop { r1 }
    lsl r0, r0, #2                           /* Convert to bytes */
    ldr r2, [r0]                             /* Load from address */
    add r0, r1, r2
    mov sp, fp
    bx lr
    
