SOURCE
struct TreeNode<T> {
	TreeNode<T>* left;
	TreeNode<T>* right;
	T value;
}

int main() {
	TreeNode<int>* root = (TreeNode<int>*) resv(sizeof(TreeNode<int>));
	*root = TreeNode<int>::((TreeNode<int>*) 0, (TreeNode<int>*) 0, 10);
	
	TreeNode<bool>* root2 = (TreeNode<bool>*) resv(sizeof(TreeNode<bool>));
	*root2 = TreeNode<bool>::((TreeNode<bool>*) 0, (TreeNode<bool>*) 0, true);
	
	TreeNode<int>* root3 = (TreeNode<int>*) resv(sizeof(TreeNode<int>));
	*root3 = TreeNode<int>::((TreeNode<int>*) 0, (TreeNode<int>*) 0, 15);
	
	return root->value + root3->value;
}
TESTCASES
25
OUTPUT
/* --test_02.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    push { r3, r4, r5, r6 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .POOL0_main.L0_HEAP_START        /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    pop { r3, r4, r5, r6 }
    bx lr
.POOL0_main.L0_HEAP_START: .word HEAP_START
    
main:                                        /* Function: main */
    push { lr }
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    mov r0, #10                              /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #1
    lsl r1, r3, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r4, r0
    mov r0, #1                               /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #1
    lsl r1, r4, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r5, r0
    mov r0, #15                              /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #1
    lsl r1, r5, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    lsl r1, r5, #2                           /* Convert to bytes */
    push { r0 }
    ldr r2, [r1, #12]                        /* Load field from struct */
    pop { r1 }
    add r0, r1, r2
    pop { pc }
    
