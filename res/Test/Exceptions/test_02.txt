SOURCE
struct ContextException {
	int code;
}

struct Exception {
	int i0;
	int s0;
}

int get(int* arr, int i, int s) signals Exception, ContextException {
	if (i < 0) {
		signal ContextException::(i);
	}
	else if (i > 2) {
		signal Exception::(i, s);
	}
	else {
		return *(arr + i);
	}
}

int relay(int* arr, int i, int s) signals Exception {
	int r = 0;
	try {
		r = get(arr, i, s);
	} watch (ContextException e) {
		r = e.code;
	}
	
	return r;
}

int main(int i) {
	int [3] arr = {5, 3, 8};
	
	int r = 0;
	try {
		r = relay(&arr, i, 3);
	} watch (Exception e) {
		r = (e.i0 << 1) + e.s0;
	}
	
	return r;
}
TESTCASES
-2 -2
-1 -1
0 5
1 3
2 8
3 9
4 11
OUTPUT
/* --test_02.txt */
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
get:                                         /* Function: get */
    sub sp, sp, #16
    stmea sp, {r3-r5, fp}
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    cmp r1, #0
    bge get.L2
    push { r4 }
    mov r0, #1
    push { r0 }
    mov r12, #1                              /* Signal thrown exception */
    mov r0, #8
    b get.L0                                 /* Exception thrown, branch to escape target */
get.L2: 
    cmp r4, #2
    ble get.L4
    push { r5 }
    push { r4 }
    mov r0, #2
    push { r0 }
    mov r12, #2                              /* Signal thrown exception */
    mov r0, #12
    b get.L0                                 /* Exception thrown, branch to escape target */
get.L4: 
    add r0, r3, r4
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
get.L0: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r3-r5, fp}
    bxeq lr
    add r1, r2, r0
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
relay:                                       /* Function: relay */
    sub sp, sp, #20
    stmea sp, {r4-r6, fp, lr}
    mov fp, sp
    mov r4, r1
    mov r5, r2
    mov r6, #0
    push { sp }
    push { r5 }
    push { r4 }
    ldmfd sp!, {r1, r2}
    bl get                                   /* Call get */
    cmp r12, #0
    bne relay.L1                             /* Exception thrown, branch to escape target */
    mov r6, r0
    ldr sp, [fp, #-4]                        /* Load backed up sp from stack */
    add sp, sp, #4
    b relay.L2
relay.L1: 
    mov r1, sp
    ldr sp, [fp, #-4]                        /* Load backed up sp from stack */
    add sp, sp, #4
    cmp r12, #1
    bne relay.L3
    add r1, r1, #8
    mov r0, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    ldr r6, [fp, #-4]                        /* Load field from struct */
    add sp, sp, #8
    mov r12, #0
    b relay.L2
relay.L3: 
/* Unwatched Exceptions */
    cmp r12, #2
    moveq r0, #12
    mov sp, r1
    b relay.L0                               /* Exception thrown, branch to escape target */
relay.L2: 
    mov r0, r6                               /* Evaluate Expression */
relay.L0: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r4-r6, fp, lr}
    bxeq lr
    add r1, r2, r0
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #8                               /* Evaluate Expression */
    mov r1, #3
    mov r2, #5
    stmfd sp!, {r0-r2}
    mov r4, #0
    mov r0, #3                               /* Evaluate Expression */
    push { sp }
    push { r0 }
    sub r0, fp, #12
    lsr r0, r0, #2
    push { r3 }
    ldmfd sp!, {r1, r2}
    bl relay                                 /* Call relay */
    cmp r12, #0
    bne main.L0                              /* Exception thrown, branch to escape target */
    mov r4, r0
    ldr sp, [fp, #-16]                       /* Load backed up sp from stack */
    add sp, sp, #4
    b main.L2
main.L0: 
    mov r1, sp
    ldr sp, [fp, #-16]                       /* Load backed up sp from stack */
    add sp, sp, #4
    cmp r12, #2
    bne main.L2
    add r1, r1, #12
    mov r0, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    ldr r1, [fp, #-20]                       /* Load field from struct */
    lsl r0, r1, #1
    ldr r2, [fp, #-16]                       /* Load field from struct */
    add r4, r0, r2
    add sp, sp, #12
    mov r12, #0
main.L2: 
    mov r0, r4                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {fp, pc}
     
