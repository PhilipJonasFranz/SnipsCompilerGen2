SOURCE
struct ContextException {
	int code;
}

struct Exception {
	int i0;
	int s0;
}

int get(int* arr, int i, int s) signals Exception, ContextException {
	if (i < 0) {
		signal ContextException::(i);
	}
	else if (i > 2) {
		signal Exception::(i, s);
	}
	else {
		return *(arr + i);
	}
}

int relay(int* arr, int i, int s) signals Exception {
	int r = 0;
	try {
		r = get(arr, i, s);
	} watch (ContextException e) {
		r = e.code;
	}
	
	return r;
}

int main(int i) {
	int [3] arr = {5, 3, 8};
	
	int r = 0;
	try {
		r = relay(&arr, i, 3);
	} watch (Exception e) {
		r = (e.i0 << 1) + e.s0;
	}
	
	return r;
}
TESTCASES
-2 -2
-1 -1
0 5
1 3
2 8
3 9
4 11
OUTPUT
/* --test_02.txt */
.data
HEAP_START: .word 0
    
.text
    b main
get:                          /* Function: get */
    push { r3, r4, r5, r6, r7, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    cmp r4, #0
    bge get.L2
    mov r0, r4
    push { r0 }
    mov r12, #1               /* Signal thrown exception */
    mov r0, #4
    b get.L0                  /* Exception thrown, branch to escape target */
get.L2: 
    mov r6, r0
    cmp r4, #2
    ble get.L4
    mov r0, r5
    push { r0 }
    mov r0, r4
    push { r0 }
    mov r12, #2               /* Signal thrown exception */
    mov r0, #8
    b get.L0                  /* Exception thrown, branch to escape target */
get.L4: 
    mov r7, r0                /* Evaluate Expression */
    add r0, r3, r4
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    b get.L5
get.L0: 
get.L5: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    pop { r3, r4, r5, r6, r7, fp }
    beq get.L6
    add r1, r2, r0
get.L7:                       /* Copy stack return with loop */
    cmp r0, #0
    beq get.L8
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b get.L7
get.L8: 
get.L6: 
    bx lr
    
relay:                        /* Function: relay */
    push { r3, r4, r5, r6, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r6, #0
    push { sp }
    mov r0, r5                /* Evaluate Expression */
    push { r0 }
    mov r0, r4
    push { r0 }
    mov r0, r3
    pop { r1, r2 }
    bl get                    /* Call get */
    cmp r12, #0
    bne relay.L1              /* Exception thrown, branch to escape target */
    mov r6, r0
    b relay.L2
relay.L1: 
    mov r1, sp
    ldr sp, [fp, #-4]         /* Load backed up sp from stack */
    add sp, sp, #4
    cmp r12, #1
    bne relay.L3
    add r1, r1, #4
    mov r0, #4
relay.L4:                     /* Copy stack return with loop */
    cmp r0, #0
    beq relay.L5
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b relay.L4
relay.L5: 
    sub r1, fp, #4            /* Evaluate Expression */
    ldr r0, [r1]              /* Load field from struct */
    mov r6, r0
    add sp, sp, #4
    mov r12, #0
    b relay.L2
relay.L3: 
/* Unwatched Exceptions */
    cmp r12, #2
    moveq r0, #8
    mov sp, r1
    b relay.L0                /* Exception thrown, branch to escape target */
relay.L2: 
    mov r0, r6                /* Evaluate Expression */
    b relay.L6
relay.L0: 
relay.L6: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    pop { r3, r4, r5, r6, fp, lr }
    beq relay.L7
    add r1, r2, r0
relay.L8:                     /* Copy stack return with loop */
    cmp r0, #0
    beq relay.L9
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b relay.L8
relay.L9: 
relay.L7: 
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #8                /* Evaluate Expression */
    mov r1, #3
    mov r2, #5
    push { r2, r1, r0 }
    mov r4, #0
    push { sp }
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, r3
    push { r0 }
    sub r0, fp, #12
    lsr r0, r0, #2
    pop { r1, r2 }
    bl relay                  /* Call relay */
    cmp r12, #0
    bne main.L0               /* Exception thrown, branch to escape target */
    mov r4, r0
    b main.L1
main.L0: 
    mov r1, sp
    ldr sp, [fp, #-16]        /* Load backed up sp from stack */
    add sp, sp, #4
    cmp r12, #2
    bne main.L2
    add r1, r1, #8
    mov r0, #8
main.L3:                      /* Copy stack return with loop */
    cmp r0, #0
    beq main.L4
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b main.L3
main.L4: 
    sub r1, fp, #20           /* Evaluate Expression */
    ldr r0, [r1]              /* Load field from struct */
    mov r1, r0
    lsl r0, r1, #1
    push { r0 }
    sub r1, fp, #20           /* Load field location */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    mov r4, r0
    add sp, sp, #8
    mov r12, #0
    b main.L1
main.L2: 
main.L1: 
    mov r0, r4                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
