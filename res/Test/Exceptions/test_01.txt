SOURCE
struct ContextException {
	int code;
}

struct Exception {
	int i0;
	int s0;
}

int get(int* arr, int i, int s) signals Exception {
	if (i > 2) {
		signal Exception::(i, s);
	}
	else {
		return *(arr + i);
	}
}

int throw() signals ContextException {
	signal ContextException::(99);
}

int main(int i) {
	int [3] arr = {5, 3, 8};
	
	int r = 0;
	try {
		throw();
		r = get(&arr, i, 3);
	} watch (Exception e) {
		r = (e.i0 << 1) + e.s0;
	} watch (ContextException e) {
		r = e.code;
	}
	
	return r;
}
TESTCASES
0 99
1 99
2 99
3 99
4 99
OUTPUT
/* --test_01.txt */
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
get:                          /* Function: get */
    push { r3, r4, r5, r6, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    cmp r4, #2
    ble get.L2
    mov r0, r5
    push { r0 }
    mov r0, r4
    push { r0 }
    mov r12, #2               /* Signal thrown exception */
    mov r0, #8
    b get.L0                  /* Exception thrown, branch to escape target */
get.L2: 
    mov r6, r0                /* Evaluate Expression */
    add r0, r3, r4
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    b get.L3
get.L0: 
get.L3: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    pop { r3, r4, r5, r6, fp }
    beq get.L4
    add r1, r2, r0
    add r10, pc, #8
    b _routine_stack_copy_
get.L4: 
    bx lr
    
throw:                        /* Function: throw */
    push { fp }
    mov fp, sp
    mov r0, #99
    push { r0 }
    mov r12, #1               /* Signal thrown exception */
    mov r0, #4
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    pop { fp }
    beq throw.L2
    add r1, r2, r0
    add r10, pc, #8
    b _routine_stack_copy_
throw.L2: 
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #8                /* Evaluate Expression */
    mov r1, #3
    mov r2, #5
    push { r2, r1, r0 }
    mov r0, #0                /* Evaluate Expression */
    mov r4, #0
    push { sp }
    bl throw                  /* Call throw */
    cmp r12, #0
    bne main.L0               /* Exception thrown, branch to escape target */
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, r3
    push { r0 }
    sub r0, fp, #12
    lsr r0, r0, #2
    pop { r1, r2 }
    bl get                    /* Call get */
    cmp r12, #0
    bne main.L0               /* Exception thrown, branch to escape target */
    mov r4, r0
    b main.L1
main.L0: 
    mov r1, sp
    ldr sp, [fp, #-16]        /* Load backed up sp from stack */
    add sp, sp, #4
    cmp r12, #2
    bne main.L2
    add r1, r1, #8
    mov r0, #8
    add r10, pc, #8
    b _routine_stack_copy_
    sub r1, fp, #20           /* Evaluate Expression */
    ldr r0, [r1]              /* Load field from struct */
    mov r1, r0
    lsl r0, r1, #1
    push { r0 }
    sub r1, fp, #20           /* Load field location */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    mov r4, r0
    add sp, sp, #8
    mov r12, #0
    b main.L1
main.L2: 
    cmp r12, #1
    bne main.L3
    add r1, r1, #4
    mov r0, #4
    add r10, pc, #8
    b _routine_stack_copy_
    sub r1, fp, #16           /* Evaluate Expression */
    ldr r0, [r1]              /* Load field from struct */
    mov r4, r0
    add sp, sp, #4
    mov r12, #0
    b main.L1
main.L3: 
main.L1: 
    mov r0, r4                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
