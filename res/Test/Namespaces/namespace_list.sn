namespace LL {
	struct ListNode<T> {
		ListNode<T>* next;
		T value;
	}
	
	struct List<T> {
		ListNode<T>* head;
		ListNode<T>* tail;
	}
	
	List<T>* create<T>() {
		List<T>* lp = (List<T>*) resv(sizeof(List<T>));
	
		*lp = List<T>::((ListNode<T>*) 0, (ListNode<T>*) 0);
	
		return lp;
	}
	
	void add<T>(List<T>* lp, T x) {
		ListNode<T>* n = (ListNode<T>*) resv(sizeof(ListNode<T>));
	
		*n = ListNode<T>::((ListNode<T>*) 0, x);
	
		if ((int) lp->head == 0) {
			lp->head = n;
			lp->tail = n;
		}
		else {
			lp->tail->next = n;
			lp->tail = n;
		}	
	}
	
	T get<T>(List<T>* lp, int i) {
		ListNode<T>* n = lp->head;
		while (i != 0) {
			if ((int) n->next == 0) return (T) 0;
			
			n = n->next;
			i--;
		}
		
		return n->value;	
	}
}