DESCRIPTION
Combine the elements parameters in stack, local data in stack.
SOURCE
int bar(int x, int y, int z, int u) {
	return (x * y) + (z * u);
}

int fooRec(int x, int y) {
	if (y == 0) return x;
	else return fooRec(x, y - 1) + 1;
}

int foo(int x0, int x1) {
	return fooRec(x0, x1);
}

int main(int a, int b, int c, int d) {
	int b0 = foo(a, 0);
	int b1 = foo(a, 1);
	int b2 = foo(b, 2);
	int b3 = foo(b, 3);
	int t = bar(a, b, c, d);
	int b4 = foo(c, 4);
	int b5 = foo(c, 5);
	int b6 = foo(d, 6);
	int b7 = foo(d, 7);
	return b0 + b1 + b2 + b3 + b4 + b5 + b6 + b7 + t;
}
TESTCASES
0 0 0 0 28
1 2 3 4 62
OUTPUT
/* --test_11.txt */
    b main
bar:                                         /* Function: bar */
    push { r3, r4, r5, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mul r0, r3, r4
    push { r0 }
    mov r1, r5
    ldr r2, [fp, #16]
    mul r2, r1, r2
    pop { r1 }
    add r0, r1, r2
    mov sp, fp
    pop { r3, r4, r5, fp }
    add sp, sp, #4
    bx lr
    
fooRec:                                      /* Function: fooRec */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    cmp r4, #0
    bne fooRec.L1
    mov r0, r3                               /* Evaluate Expression */
    b fooRec.L2
fooRec.L1: 
    sub r1, r4, #1
    mov r0, r3
    bl fooRec                                /* Call fooRec */
    add r0, r0, #1
fooRec.L2: 
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
foo:                                         /* Function: foo */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, r3
    bl fooRec                                /* Call fooRec */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
main:                                        /* Function: main */
    push { r3, r4, r5, r6, r7, r8, r9, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r1, #0
    mov r0, r3
    bl foo                                   /* Call foo */
    mov r6, r0
    mov r1, #1
    mov r0, r3
    bl foo                                   /* Call foo */
    mov r7, r0
    mov r1, #2
    mov r0, r4
    bl foo                                   /* Call foo */
    mov r8, r0
    mov r1, #3
    mov r0, r4
    bl foo                                   /* Call foo */
    mov r9, r0
    ldr r0, [fp, #36]                        /* Evaluate Expression */
    push { r0 }
    push { r5 }
    push { r4 }
    mov r0, r3
    pop { r1, r2 }
    bl bar                                   /* Call bar */
    push { r0 }
    mov r1, #4
    mov r0, r5
    bl foo                                   /* Call foo */
    push { r0 }
    mov r1, #5
    mov r0, r5
    bl foo                                   /* Call foo */
    push { r0 }
    mov r1, #6
    ldr r0, [fp, #36]
    bl foo                                   /* Call foo */
    push { r0 }
    mov r1, #7
    ldr r0, [fp, #36]
    bl foo                                   /* Call foo */
    push { r0 }
    add r1, r6, r7
    add r1, r1, r8
    add r1, r1, r9
    ldr r2, [fp, #-8]
    add r1, r1, r2
    ldr r2, [fp, #-12]
    add r1, r1, r2
    ldr r2, [fp, #-16]
    add r1, r1, r2
    ldr r2, [fp, #-20]
    add r1, r1, r2
    ldr r2, [fp, #-4]
    add r0, r1, r2
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, r9, fp, lr }
    add sp, sp, #4
    bx lr
    
