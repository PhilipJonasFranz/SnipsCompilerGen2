DESCRIPTION
Combine the elements parameters in stack, local data in stack.
SOURCE
int bar(int x, int y, int z, int u) {
	return (x * y) + (z * u);
}

int foo(int x0, int x1) {
	return x0 + x1;
}

int main(int a, int b, int c, int d) {
	int b0 = foo(a, 0);
	int b1 = foo(a, 1);
	int b2 = foo(b, 2);
	int b3 = foo(b, 3);
	int t = bar(a, b, c, d);
	int b4 = foo(c, 4);
	int b5 = foo(c, 5);
	int b6 = foo(d, 6);
	int b7 = foo(d, 7);
	return b0 + b1 + b2 + b3 + b4 + b5 + b6 + b7 + t;
}
TESTCASES
0 0 0 0 28
1 2 3 4 62
OUTPUT
/* --test_09.txt */
    b main
bar:                          /* Function: bar */
    push { r3, r4, r5, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r1, r3                /* Evaluate Expression */
    mov r2, r4
    mul r0, r1, r2
    push { r0 }
    mov r1, r5
    ldr r2, [fp, #16]
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    mov sp, fp
    pop { r3, r4, r5, fp }
    add sp, sp, #4
    bx lr
    
foo:                          /* Function: foo */
    push { r3, r4 }
    mov r3, r0
    mov r4, r1
    add r0, r3, r4
    pop { r3, r4 }
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, r5, r6, r7, r8, r9, r10, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    mov r0, r3
    pop { r1 }
    bl foo                    /* Call foo */
    mov r6, r0
    mov r0, #1                /* Evaluate Expression */
    push { r0 }
    mov r0, r3
    pop { r1 }
    bl foo                    /* Call foo */
    mov r7, r0
    mov r0, #2                /* Evaluate Expression */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl foo                    /* Call foo */
    mov r8, r0
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl foo                    /* Call foo */
    mov r9, r0
    ldr r0, [fp, #40]         /* Evaluate Expression */
    push { r0 }
    mov r0, r5
    push { r0 }
    mov r0, r4
    push { r0 }
    mov r0, r3
    pop { r1, r2 }
    bl bar                    /* Call bar */
    mov r10, r0
    mov r0, #4                /* Evaluate Expression */
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl foo                    /* Call foo */
    push { r0 }
    mov r0, #5                /* Evaluate Expression */
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl foo                    /* Call foo */
    push { r0 }
    mov r0, #6                /* Evaluate Expression */
    push { r0 }
    ldr r0, [fp, #40]
    pop { r1 }
    bl foo                    /* Call foo */
    push { r0 }
    mov r0, #7                /* Evaluate Expression */
    push { r0 }
    ldr r0, [fp, #40]
    pop { r1 }
    bl foo                    /* Call foo */
    push { r0 }
    add r1, r6, r7
    add r1, r1, r8
    add r1, r1, r9
    ldr r2, [fp, #-4]
    add r1, r1, r2
    ldr r2, [fp, #-8]
    add r1, r1, r2
    ldr r2, [fp, #-12]
    add r1, r1, r2
    ldr r2, [fp, #-16]
    add r1, r1, r2
    add r0, r1, r10
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, r9, r10, fp, lr }
    add sp, sp, #4
    bx lr
    
