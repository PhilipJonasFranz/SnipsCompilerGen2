DESCRIPTION
This test verifies global array/struct initialization.
SOURCE
struct S {
	int x;
	int y;
}

S [2] s0 = {S::(10, 5), S::(6, 8)};

int main(int a) {
	return a * (s0 [0].x + s0 [1].y);
}
TESTCASES
0 0
1 18
-2 -36
OUTPUT
/* --test_06.txt */
.data
s0: .skip 24
    
.text
/* Initialize the global variables */
    push { r0, r1, r2 }
    mov r0, #8
    mov r1, #6
    push { r1, r0 }
    mov r0, #1
    push { r0 }
    mov r0, #5
    mov r1, #10
    push { r1, r0 }
    mov r0, #1
    ldr r1, .POOL0_main.L0_s0                /* Load from .data section */
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    pop { r0, r1, r2 }
main:                                        /* Function: main */
    push { r3 }
    mov r3, r0
    ldr r1, .POOL0_main.L0_s0                /* Evaluate Expression */
    push { r1 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    pop { r1 }
    add r1, r1, r2
    add r1, r1, #4
    ldr r0, [r1]                             /* Load field from struct */
    push { r0 }
    ldr r1, .POOL0_main.L0_s0                /* Load field location */
    push { r1 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    pop { r1 }
    add r1, r1, r2
    add r1, r1, #8
    ldr r2, [r1]                             /* Load field from struct */
    pop { r1 }
    add r2, r1, r2
    mul r0, r3, r2
    pop { r3 }
    bx lr
.POOL0_main.L0_s0: .word s0
    
