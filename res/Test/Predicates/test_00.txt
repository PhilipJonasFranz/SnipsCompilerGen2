SOURCE
int add5(int a) {
	return a + 5;
}

int add10(int a) {
	return a + 10;
}

int foo(int v, func int -> int pr0) {
	return pr0(v);
}

int main(int x, bool add10Or5) {
	func pred = (add10Or5)? add10 : add5;
	return foo(x, pred);
}
TESTCASES
0 0 5
1 0 6
0 1 10
1 1 11
OUTPUT
/* --test_00.txt */
    b main
lambda_add5:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr
    
lambda_add10:                                /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
add10:                                       /* Function: add10 */
    add r0, r0, #10
    bx lr
    
foo:                                         /* Function: foo */
    push { r4, lr }
    mov r4, r1
    add lr, pc, #8
    mov pc, r4
    pop { r4, pc }
    
main:                                        /* Function: main */
    mov r3, r0
    cmp r1, #0
    beq main.L0
    add r10, pc, #8
    b lambda_add10
    mov r10, #0
    b main.L1
main.L0: 
    add r10, pc, #8
    b lambda_add5
    mov r10, #0
main.L1: 
    mov r1, r0
    mov r0, r3
    b foo                                    /* Call foo */
    
