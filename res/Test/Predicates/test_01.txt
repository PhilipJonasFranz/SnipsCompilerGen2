SOURCE
bool sortPred(int a, int b) {
	return a < b;
}

void sort(int* arr, int size, func (int a, int b) -> bool pred) {
	if (size > 1) {
		while (true) {
			bool sorted = true;
			for (int i = 1; i < size; i++) {
				int a0 = *(arr + i - 1);
				int a1 = *(arr + i);
				if (pred(a1, a0)) {
					sorted = false;
					*(arr + i - 1) = a1;
					*(arr + i) = a0;
				}
			}
		
			if (sorted) break;
		}
	}
	return;
}

int main(int x) {
	int [5] arr = {6, 3, 8, 4, 2};
	
	sort(&arr, 5, sortPred);

	return arr [x];
}
TESTCASES
0 2
1 3
2 4
3 6
4 8
OUTPUT
/* --test_01.txt */
    b main
lambda_sortPred:                             /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
sortPred:                                    /* Function: sortPred */
    push { r3, r4 }
    mov r3, r0
    mov r4, r1
    cmp r3, r4
    movlt r0, #1
    movge r0, #0
    pop { r3, r4 }
    bx lr
    
sort:                                        /* Function: sort */
    push { r3, r4, r5, r6, r7, r8, r9, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    cmp r4, #1
    ble sort.L0
sort.L3:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne sort.L4
    mov r6, #1
    mov r0, #1                               /* Evaluate Expression */
    mov r7, #1
sort.L6: 
    cmp r7, r4
    bge sort.L7
    add r1, r3, r7
    sub r0, r1, #1
    lsl r0, r0, #2                           /* Convert to bytes */
    ldr r0, [r0]                             /* Load from address */
    mov r8, r0
    add r0, r3, r7
    lsl r0, r0, #2                           /* Convert to bytes */
    ldr r0, [r0]                             /* Load from address */
    mov r9, r0
    mov r0, r8                               /* Load parameters */
    push { r0 }
    mov r0, r9
    pop { r1 }
    add lr, pc, #8
    mov pc, r5
    cmp r0, #0
    beq sort.L9
    mov r6, #0
    mov r0, r9                               /* Evaluate Expression */
    push { r0 }
    add r1, r3, r7
    sub r0, r1, #1
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r0, r8                               /* Evaluate Expression */
    push { r0 }
    add r0, r3, r7
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
sort.L9: 
    mov r0, r7
    add r7, r0, #1
    b sort.L6
sort.L7: 
    cmp r6, #0
    beq sort.L11
    b sort.L4
sort.L11: 
    b sort.L3
sort.L4: 
sort.L0: 
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, r9, fp, lr }
    bx lr
    
main:                                        /* Function: main */
    push { r3, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #2                               /* Evaluate Expression */
    mov r1, #4
    mov r2, #8
    push { r2, r1, r0 }
    mov r0, #3
    mov r1, #6
    push { r1, r0 }
    add r10, pc, #8                          /* Load parameters */
    b lambda_sortPred
    push { r0 }
    mov r0, #5
    push { r0 }
    sub r0, fp, #20
    lsr r0, r0, #2
    pop { r1, r2 }
    bl sort                                  /* Call sort */
    lsl r2, r3, #2
    sub r0, fp, #20
    add r0, r0, r2
    ldr r0, [r0]
    mov sp, fp
    pop { r3, fp, lr }
    bx lr
    
