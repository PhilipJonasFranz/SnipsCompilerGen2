SOURCE
int [2] get() {
	return {5, 3};
}

int main() {
	func [1] pred = {get};
	func pred0 = pred [0];
	
	/* Call the predicate */
	pred0();
	
	int [2] arr = {5, 6};
	
	return arr [0] + arr [1];
}
TESTCASES
11
OUTPUT
/* --test_02.txt, Snips Version: v.3.3.1, Date: 06/25/2020 22:19:52 */
/*  SID-Headers: Enabled, Optimizer: Enabled, Modifiers: Enabled */
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    push { r2 }
    sub r0, r0, #4
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
lambda_get:                                  /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
get:                                         /* Function: get */
    push { fp }
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #5
    push { r1, r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    bx lr
    
main:                                        /* Function: main */
    push { r3, fp, lr }
    mov fp, sp
    add r10, pc, #8                          /* Evaluate Expression */
    b lambda_get
    push { r0 }
    sub r0, fp, #4
    ldr r3, [r0]
/* Call the predicate */
    add lr, pc, #8
    mov pc, r3
    sub sp, fp, #4                           /* Reset the stack after anonymous call */
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    push { r1, r0 }
    sub r0, fp, #12
    ldr r1, [r0]
    sub r0, fp, #12
    add r0, r0, #4
    ldr r2, [r0]
    add r0, r1, r2
    mov sp, fp
    pop { r3, fp, lr }
    bx lr
    
