SOURCE
int mult(int [2] [2] m, int [2] [2] n, int x, int y) {
	int [2] [2] r = {{0, 0}, {0, 0}};
	for (int i = 0; i < 2; i = i + 1) {
		for (int j = 0; j < 2; j = j + 1) {
			int sum = 0;
			for (int k = 0; k < 2; k = k + 1) {
				sum = sum + (m [i] [k] * n [k] [j]);
			}
			r [i] [j] = sum;
		}
	}

	return r [x] [y];
}

int main(int x, int y) {
	int [2] [2] m = {{1, 2}, {3, 4}};
	int [2] [2] n = {{1, 3}, {2, 4}};

	return mult(m, n, x, y);
}
TESTCASES
0 0 5
0 1 11
1 0 11
1 1 25
OUTPUT
/* --test_06.txt */
    b main
mult:                                        /* Function: mult */
    push { r3, r4, r5, r6, r7, r8, fp }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #0                               /* Evaluate Expression */
    mov r1, #0
    push { r1, r0 }
    mov r0, #0
    mov r1, #0
    push { r1, r0 }
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
mult.L1: 
    cmp r5, #2
    bge mult.L2
    mov r0, #0                               /* Evaluate Expression */
    mov r6, #0
mult.L4: 
    cmp r6, #2
    bge mult.L5
    mov r7, #0
    mov r0, #0                               /* Evaluate Expression */
    mov r8, #0
mult.L7: 
    cmp r8, #2
    bge mult.L8
    mov r2, #0                               /* Evaluate Expression */
    lsl r0, r5, #3
    add r2, r2, r0
    lsl r0, r8, #2
    add r2, r2, r0
    add r0, fp, #44
    ldr r0, [r0, r2]
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r1, r0
    lsl r0, r8, #3
    add r2, r2, r0
    lsl r0, r6, #2
    add r2, r2, r0
    add r0, fp, #28
    ldr r2, [r0, r2]
    mul r2, r1, r2
    add r7, r7, r2
    add r8, r8, #1
    b mult.L7
mult.L8: 
    mov r1, r7
    mov r2, #0                               /* Calculate offset of sub structure */
    lsl r0, r5, #3
    add r2, r2, r0
    lsl r0, r6, #2
    add r2, r2, r0
    sub r0, fp, #16
    str r1, [r0, r2]
    add r6, r6, #1
    b mult.L4
mult.L5: 
    add r5, r5, #1
    b mult.L1
mult.L2: 
    mov r2, #0                               /* Evaluate Expression */
    lsl r0, r3, #3
    add r2, r2, r0
    lsl r0, r4, #2
    add r2, r2, r0
    sub r0, fp, #16
    ldr r0, [r0, r2]
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, fp }
    add sp, sp, #32
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #3
    push { r1, r0 }
    mov r0, #2
    mov r1, #1
    push { r1, r0 }
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #2
    push { r1, r0 }
    mov r0, #3
    mov r1, #1
    push { r1, r0 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    push { r0 }
    ldr r0, [fp, #-20]
    ldr r1, [fp, #-24]
    ldr r2, [fp, #-28]
    push { r2, r1, r0 }
    ldr r0, [fp, #-32]
    push { r0 }
    mov r1, r4
    mov r0, r3
    bl mult                                  /* Call mult */
    mov sp, fp
    pop { fp, pc }
    
