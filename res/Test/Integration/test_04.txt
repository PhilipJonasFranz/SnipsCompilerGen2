SOURCE
int sarrus(int [9] m) {
	return (m [0] * m [4] * m [8]) + (m [1] * m [5] * m [6]) + (m [2] * m [3] * m [7]) -
		   (m [6] * m [4] * m [2]) + (m [7] * m [5] * m [0]) + (m [8] * m [3] * m [1]);
}

int main() {
	int [9] m = {3, 6, 2, 
	             0, 3, 8, 
	             1, 0, 4};
	                 
	return sarrus(m);
}
TESTCASES
78
OUTPUT
/* --test_04.txt */
.data
HEAP_START: .word 0
    
.text
    b main
sarrus:                       /* Function: sarrus */
    push { fp, lr }
    mov fp, sp
    add r0, fp, #8
    add r0, r0, #0
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #16
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #32
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #4
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #20
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #24
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #8
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #12
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #28
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #24
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #16
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #8
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    sub r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #28
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #20
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #0
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #32
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #8
    add r0, r0, #12
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    add r0, fp, #8
    add r0, r0, #4
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    mov sp, fp
    pop { fp, lr }
    bx lr
    
main:                         /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                /* Evaluate Expression */
    mov r1, #0
    mov r2, #1
    push { r2, r1, r0 }
    mov r0, #8
    mov r1, #3
    mov r2, #0
    push { r2, r1, r0 }
    mov r0, #2
    mov r1, #6
    mov r2, #3
    push { r2, r1, r0 }
    ldr r0, [fp, #-4]         /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    ldr r1, [fp, #-20]
    ldr r2, [fp, #-24]
    push { r2, r1, r0 }
    ldr r0, [fp, #-28]
    ldr r1, [fp, #-32]
    ldr r2, [fp, #-36]
    push { r2, r1, r0 }
    bl sarrus                 /* Call sarrus */
    add sp, sp, #36
    mov sp, fp
    pop { fp, lr }
    bx lr
    
.L0_HEAP_START: .word HEAP_START
