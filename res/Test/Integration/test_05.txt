SOURCE
int det(int [3] [3] m) {
	return (m [0] [0] * m [1] [1] * m [2] [2]) + 
		   (m [0] [1] * m [1] [2] * m [2] [0]) + 
		   (m [0] [2] * m [1] [0] * m [2] [1]) -
		   (m [2] [0] * m [1] [1] * m [0] [2]) - 
		   (m [2] [1] * m [1] [2] * m [0] [0]) - 
		   (m [2] [2] * m [1] [0] * m [0] [1]);
}

int main() {
	int [3] [3] m = {{3, 6, 2}, 
	                 {0, 3, 8}, 
	                 {1, 0, 4}};
	                 
	return det(m);
}
TESTCASES
78
OUTPUT
/* --test_05.txt */
    b main
det:                                         /* Function: det */
    push { fp }
    mov fp, sp
    mov r2, #0                               /* Evaluate Expression */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    sub r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    sub r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #2
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #8
    add r0, fp, #4
    add r0, r0, r2
    ldr r0, [r0]
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #1
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #0
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    push { r0 }
    mov r2, #0                               /* Calculate offset of sub structure */
    mov r0, #0
    mov r1, #12
    mul r0, r0, r1
    add r2, r2, r0
    add r2, r2, #4
    add r0, fp, #4
    add r0, r0, r2
    ldr r2, [r0]
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    sub r0, r1, r2
    mov sp, fp
    pop { fp }
    add sp, sp, #36
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #0
    mov r2, #1
    push { r2, r1, r0 }
    mov r0, #8
    mov r1, #3
    mov r2, #0
    push { r2, r1, r0 }
    mov r0, #2
    mov r1, #6
    mov r2, #3
    push { r2, r1, r0 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    ldr r1, [fp, #-20]
    ldr r2, [fp, #-24]
    push { r2, r1, r0 }
    ldr r0, [fp, #-28]
    ldr r1, [fp, #-32]
    ldr r2, [fp, #-36]
    push { r2, r1, r0 }
    bl det                                   /* Call det */
    mov sp, fp
    pop { fp, lr }
    bx lr
    
