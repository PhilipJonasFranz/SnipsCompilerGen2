SOURCE
/*
 * Multiplicate the given matricies. Both matricies have to have the given
 * dimension. Returns a pointer to the resulting matrix.
 */
int* __mat_mult(int* m, int* n, int dimX, int dimY) {
	int* r = (int*) resv(dimX * dimY);
	for (int i = 0; i < dimX; i++) {
		for (int j = 0; j < dimY; j++) {
			int sum = 0;
			for (int k = 0; k < dimY; k++) {
				sum += *(m + (i * dimY) + k) * *(n + (k * dimY) + j);
			}
			*(r + (i * dimY) + j) = sum;
		}
	}

	return r;
}

int* allocMatrix(int w, int h) {
	int* p = (int*) resv(w * h);
	for (int i = 0; i < h; i++) {
		for (int a = 0; a < w; a++) {
			*(p + (i * h) + a) = (i * h) + a;
		}
	}
	return p;
}

int main(int x) {
	int* p = allocMatrix(3, 3);
	int* q = allocMatrix(3, 3);
	int* mul = __mat_mult(p, q, 3, 3);
	return *(mul + x);
}
TESTCASES
0 15
1 18
2 21
3 42
4 54
5 66
6 69
7 90
8 111
OUTPUT
/* --test_07.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                         /* Function: resv */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .L0_HEAP_START    /* Evaluate Expression */
    lsr r0, r0, #2
    mov r4, r0
.L2:                          /* Evaluate condition */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    beq .L3
/* Memory Section is allocated or free */
/* Load block size from memory */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r5, r0
    mov r6, r0
    cmp r5, #0
    bge .L5
/* Defragment Heap */
.L7:                          /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne .L8
    sub r0, r4, r5
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r7, r0
    cmp r7, #0
    ble .L10
    b .L8
.L10: 
    cmp r7, #0
    bne .L12
    mov r0, #0                /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b .L8
.L12: 
    add r5, r5, r7
/* Add to current size */
    b .L7
.L8: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
/* Write defragmented size to heap */
    mov r7, r0
    cmp r5, #0
    bne .L13
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
.L13: 
/* Memory location is free, check size */
    rsb r0, r5, #0
    mov r5, r0
    cmp r0, r3
    bne .L16
/* Fits */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r8, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
    b .L19
.L16: 
    cmp r5, r3
    ble .L18
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r9, r0                /* Evaluate Expression */
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    b .L19
.L18: 
    sub r4, r4, r5
    b .L4
.L5: 
/* Memory section is allocated, skip */
    add r4, r4, r5
.L4: 
    b .L2
.L3: 
/* End reached, create new block */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r5, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
.L19: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
/* Multiplicate the given matricies. Both matricies have to have the given */
/* dimension. Returns a pointer to the resulting matrix. */
__mat_mult:                   /* Function: __mat_mult */
    push { r3, r4, r5, r6, r7, r8, r9, r10, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r1, r5                /* Evaluate Expression */
    ldr r2, [fp, #40]
    mul r0, r1, r2
    bl resv                   /* Call resv */
    mov r6, r0
    mov r0, #0                /* Evaluate Expression */
    mov r7, #0
.L21: 
    cmp r7, r5
    bge .L22
    mov r0, #0                /* Evaluate Expression */
    mov r8, #0
.L24: 
    mov r0, r8
    ldr r1, [fp, #40]
    cmp r0, r1
    bge .L25
    mov r9, #0
    mov r0, #0                /* Evaluate Expression */
    mov r10, #0
.L27: 
    mov r0, r10
    ldr r1, [fp, #40]
    cmp r0, r1
    bge .L28
    mov r1, r7                /* Evaluate Expression */
    ldr r2, [fp, #40]
    mul r0, r1, r2
    mov r2, r0
    add r1, r3, r2
    add r0, r1, r10
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    push { r0 }
    mov r1, r10
    ldr r2, [fp, #40]
    mul r0, r1, r2
    mov r2, r0
    add r1, r4, r2
    add r0, r1, r8
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    add r9, r9, r0
    mov r0, r10
    add r10, r0, #1
    b .L27
.L28: 
    mov r0, r9                /* Evaluate Expression */
    push { r0 }
    mov r1, r7
    ldr r2, [fp, #40]
    mul r0, r1, r2
    mov r2, r0
    add r1, r6, r2
    add r0, r1, r8
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r0, r8
    add r8, r0, #1
    b .L24
.L25: 
    mov r0, r7
    add r7, r0, #1
    b .L21
.L22: 
    mov r0, r6                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, r9, r10, fp, lr }
    bx lr
    
allocMatrix:                  /* Function: allocMatrix */
    push { r3, r4, r5, r6, r7, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r1, r3                /* Evaluate Expression */
    mov r2, r4
    mul r0, r1, r2
    bl resv                   /* Call resv */
    mov r5, r0
    mov r0, #0                /* Evaluate Expression */
    mov r6, #0
.L31: 
    cmp r6, r4
    bge .L32
    mov r0, #0                /* Evaluate Expression */
    mov r7, #0
.L34: 
    cmp r7, r3
    bge .L35
    mov r1, r6                /* Evaluate Expression */
    mov r2, r4
    mul r0, r1, r2
    mov r1, r0
    add r0, r1, r7
    push { r0 }
    mov r1, r6
    mov r2, r4
    mul r0, r1, r2
    mov r2, r0
    add r1, r5, r2
    add r0, r1, r7
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r0, r7
    add r7, r0, #1
    b .L34
.L35: 
    mov r0, r6
    add r6, r0, #1
    b .L31
.L32: 
    mov r0, r5                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, r5, r6, r7, fp, lr }
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, r5, r6, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, #3
    pop { r1 }
    bl allocMatrix            /* Call allocMatrix */
    mov r4, r0
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, #3
    pop { r1 }
    bl allocMatrix            /* Call allocMatrix */
    mov r5, r0
    mov r0, #3                /* Evaluate Expression */
    push { r0 }
    mov r0, #3
    push { r0 }
    mov r0, r5
    push { r0 }
    mov r0, r4
    pop { r1, r2 }
    bl __mat_mult             /* Call __mat_mult */
    add sp, sp, #4
    mov r6, r0
    add r0, r6, r3
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov sp, fp
    pop { r3, r4, r5, r6, fp, lr }
    bx lr
    
.L0_HEAP_START: .word HEAP_START
