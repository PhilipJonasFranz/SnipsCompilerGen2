SOURCE
int vecProd(int [3] m, int [3] n) {
	return (m [0] * n [0]) + 
		   (m [1] * n [1]) + 
		   (m [2] * n [2]);
}

int main() {
	int [3] m = {1, 2, 3};
	int [3] n = {4, 5, 6};
	return vecProd(m, n);
}
TESTCASES
32
OUTPUT
/* --test_03.txt */
    b main
vecProd:                                     /* Function: vecProd */
    push { fp }
    mov fp, sp
    add r0, sp, #16
    add r0, r0, #0
    ldr r0, [r0]
    mov r1, r0
    add r0, fp, #4
    add r0, r0, #0
    ldr r0, [r0]
    mul r0, r1, r0
    push { r0 }
    add r0, fp, #16
    add r0, r0, #4
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #4
    add r0, r0, #4
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    push { r0 }
    add r0, fp, #16
    add r0, r0, #8
    ldr r0, [r0]
    push { r0 }
    add r0, fp, #4
    add r0, r0, #8
    ldr r0, [r0]
    mov r2, r0
    pop { r1 }
    mul r0, r1, r2
    mov r2, r0
    pop { r1 }
    add r0, r1, r2
    mov sp, fp
    pop { fp }
    add sp, sp, #24
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #1
    push { r2, r1, r0 }
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    push { r2, r1, r0 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    ldr r2, [fp, #-12]
    push { r2, r1, r0 }
    ldr r0, [fp, #-16]
    ldr r1, [fp, #-20]
    ldr r2, [fp, #-24]
    push { r2, r1, r0 }
    bl vecProd                               /* Call vecProd */
    mov sp, fp
    pop { fp, lr }
    bx lr
    
