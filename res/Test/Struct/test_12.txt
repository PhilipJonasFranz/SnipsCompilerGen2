SOURCE
struct ListNode<T> {
	ListNode<T>* next;
	T value;
}

struct List<T> {
	ListNode<T>* head;
	ListNode<T>* tail;
}

List<T>* create<T>() {
	List<T>* lp = (List*) resv(sizeof(List<T>));

	*lp = List<T>::((ListNode*) 0, (ListNode*) 0);

	return lp;
}

void destroy(List<T>* l) {
	ListNode<T>* n = l->head;
	while ((int) n != 0) {
		free(n);
		n = n->next;
	}
	free(l);
}

void add<T>(List<T>* lp, T x) {
	ListNode<T>* n = (ListNode*) resv(sizeof(ListNode<T>));

	*n = ListNode<T>::((ListNode*) 0, x);

	if ((int) lp->head == 0) {
		lp->head = n;
		lp->tail = n;
	}
	else {
		lp->tail->next = n;
		lp->tail = n;
	}	
}

T get<T>(List<T>* lp, int i) {
	ListNode<T>* n = lp->head;
	while (i != 0) {
		if ((int) n->next == 0) return 0;
		
		/* Jump to next */
		n = n->next;
		i--;
	}
	
	return n->value;	
}

int main(int x) {
	List<int>* l = create<int>();
	add<int>(l, 10);
	add<int>(l, 5);
	add<int>(l, 12);
	
	int r = get<int>(l, x);
	
	destroy(l);
	
	return r;
}
TESTCASES
0 10
1 5
2 12
OUTPUT
/* --test_12.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                         /* Function: resv */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .L3_HEAP_START    /* Evaluate Expression */
    lsr r0, r0, #2
    mov r4, r0
.L5:                          /* Evaluate condition */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    beq .L6
/* Memory Section is allocated or free */
/* Load block size from memory */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r5, r0
    mov r6, r0
    cmp r5, #0
    bge .L8
/* Defragment Heap */
.L10:                         /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne .L11
    sub r0, r4, r5
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r7, r0
    cmp r7, #0
    ble .L13
    b .L11
.L13: 
    cmp r7, #0
    bne .L15
    mov r0, #0                /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b .L11
.L15: 
    add r5, r5, r7
/* Add to current size */
    b .L10
.L11: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
/* Write defragmented size to heap */
    mov r7, r0
    cmp r5, #0
    bne .L16
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
.L16: 
/* Memory location is free, check size */
    rsb r0, r5, #0
    mov r5, r0
    cmp r0, r3
    bne .L19
/* Fits */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r8, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
    b .L22
.L19: 
    cmp r5, r3
    ble .L21
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r9, r0                /* Evaluate Expression */
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    b .L22
.L21: 
    sub r4, r4, r5
    b .L7
.L8: 
/* Memory section is allocated, skip */
    add r4, r4, r5
.L7: 
    b .L5
.L6: 
/* End reached, create new block */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r5, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
.L22: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
/* Frees the memory block the given pointer points to. The pointer object will keep */
/* the memory address, but the memory block will not be registered to be used anymore and */
/* thus can be overwritten. */
free:                         /* Function: free */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Jump to block head */
    sub r3, r3, #1
/* Load Block Size */
    lsl r0, r3, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r4, r0
/* Store negated block size */
    mov r5, r0                /* Evaluate Expression */
    rsb r0, r4, #0
    lsl r1, r3, #2
    str r0, [r1]
    mov r6, r0                /* Evaluate Expression */
    add r7, r3, r4
.L24:                         /* Evaluate condition */
    lsl r0, r7, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    bge .L25
    lsl r0, r7, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r8, r0
/* Add size to freed block */
    mov r9, r0                /* Evaluate Expression */
    lsl r0, r3, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r1, r0
    add r0, r1, r8
    lsl r1, r3, #2
    str r0, [r1]
/* Shift pointer to next block */
    sub r7, r7, r8
    b .L24
.L25: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
create_P0:                    /* Function: create, Provisos: INT */
    push { r3, fp, lr }
    mov fp, sp
    mov r0, #2                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r3, r0
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    lsl r1, r3, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    mov r0, r3                /* Evaluate Expression */
    mov sp, fp
    pop { r3, fp, lr }
    bx lr
    
destroy:                      /* Function: destroy */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r4, r0
.L29:                         /* Evaluate condition */
    cmp r4, #0
    beq .L30
    mov r0, r4                /* Load parameters */
    bl free                   /* Call free */
    lsl r1, r4, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r4, r0
    b .L29
.L30: 
    mov r0, r3                /* Load parameters */
    bl free                   /* Call free */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
add_P1:                       /* Function: add, Provisos: INT */
    push { r3, r4, r5, r6, r7, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #2                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r5, r0
    mov r0, r4                /* Evaluate Expression */
    push { r0 }
    mov r6, r0
    mov r0, #0
    lsl r1, r5, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    mov r7, r0
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L33
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    str r0, [r1]              /* Store value to struct field */
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    str r0, [r1]              /* Store value to struct field */
    b .L32
.L33: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r1, [r1]
    lsl r1, r1, #2
    str r0, [r1]              /* Store value to struct field */
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    str r0, [r1]              /* Store value to struct field */
.L32: 
    mov sp, fp
    pop { r3, r4, r5, r6, r7, fp, lr }
    bx lr
    
get_P2:                       /* Function: get, Provisos: INT */
    push { r3, r4, r5 }
    mov r3, r0
    mov r4, r1
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
.L36:                         /* Evaluate condition */
    cmp r4, #0
    beq .L37
    lsl r1, r5, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L38
    mov r0, #0                /* Evaluate Expression */
    b .L40
.L38: 
/* Jump to next */
    lsl r1, r5, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
    mov r0, r4
    sub r4, r0, #1
    b .L36
.L37: 
    lsl r1, r5, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
.L40: 
    pop { r3, r4, r5 }
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, r5, fp, lr }
    mov fp, sp
    mov r3, r0
    bl create_P0              /* Evaluate Expression */
    mov r4, r0
    mov r0, #10               /* Load parameters */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl add_P1                 /* Call add */
    mov r0, #5                /* Load parameters */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl add_P1                 /* Call add */
    mov r0, #12               /* Load parameters */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl add_P1                 /* Call add */
    mov r0, r3                /* Evaluate Expression */
    push { r0 }
    mov r0, r4
    pop { r1 }
    bl get_P2                 /* Call get */
    mov r5, r0
    mov r0, r4                /* Load parameters */
    bl destroy                /* Call destroy */
    mov r0, r5                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, r5, fp, lr }
    bx lr
    
.L3_HEAP_START: .word HEAP_START
