SOURCE
#include<binary_tree.sn>

int main(int r, int d0, int d1) {
	TreeNode<int>* root = create<int>(10);
	insert<int>(root, 5);
	insert<int>(root, 12);
	insert<int>(root, 11);
	insert<int>(root, 15);
	insert<int>(root, 7);
	insert<int>(root, 2);

	if (r == 1) return root->value;
	else {
		TreeNode<int>* n = root;
		if (d0 == 1) n = n->right;
		else n = n->left;
		
		if (d1 == 2) return n->value;
		
		if (d1 == 1) n = n->right;
		else n = n->left;
		
		return n->value;
	}
}
TESTCASES
1 0 0 10
0 0 2 5
0 0 0 2
0 0 1 7
0 1 2 12
0 1 0 11
0 1 1 15
OUTPUT
/* --test_13.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                         /* Function: resv */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .L2_HEAP_START    /* Evaluate Expression */
    lsr r0, r0, #2
    mov r4, r0
.L4:                          /* Evaluate condition */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    beq .L5
/* Memory Section is allocated or free */
/* Load block size from memory */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r5, r0
    mov r6, r0
    cmp r5, #0
    bge .L7
/* Defragment Heap */
.L9:                          /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne .L10
    sub r0, r4, r5
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r7, r0
    cmp r7, #0
    ble .L12
    b .L10
.L12: 
    cmp r7, #0
    bne .L14
    mov r0, #0                /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b .L10
.L14: 
    add r5, r5, r7
/* Add to current size */
    b .L9
.L10: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
/* Write defragmented size to heap */
    mov r7, r0
    cmp r5, #0
    bne .L15
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
.L15: 
/* Memory location is free, check size */
    rsb r0, r5, #0
    mov r5, r0
    cmp r0, r3
    bne .L18
/* Fits */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r8, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
    b .L21
.L18: 
    cmp r5, r3
    ble .L20
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r9, r0                /* Evaluate Expression */
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    b .L21
.L20: 
    sub r4, r4, r5
    b .L6
.L7: 
/* Memory section is allocated, skip */
    add r4, r4, r5
.L6: 
    b .L4
.L5: 
/* End reached, create new block */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r5, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
.L21: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
/* A tree node that has a left and right child and holds a value. */
/* Create a new Tree, initialize both childs to 0, set root value */
/* to given value. Return a pointer to the root. */
Tree.create_P0:               /* Function: Tree.create, Provisos: INT */
    push { r3, r4, r5, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #3                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r4, r0
    mov r0, r3                /* Evaluate Expression */
    push { r0 }
    mov r5, r0
    mov r0, #0
    push { r0 }
    mov r0, #0
    lsl r1, r4, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r4                /* Evaluate Expression */
    mov sp, fp
    pop { r3, r4, r5, fp, lr }
    bx lr
    
Tree.insert_P1:               /* Function: Tree.insert, Provisos: INT */
    push { r3, r4, r5, r6, r7, r8, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #3                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r5, r0
    mov r0, r4                /* Evaluate Expression */
    push { r0 }
    mov r6, r0
    mov r0, #0
    push { r0 }
    mov r0, #0
    lsl r1, r5, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                /* Evaluate Expression */
    mov r7, r0
.L24:                         /* Evaluate condition */
    mov r8, r0
    cmp r7, #0
    beq .L25
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #8
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, r4
    ble .L27
/* Left leaf is 0, insert here */
    lsl r1, r7, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L29
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r7, #2            /* Convert to bytes */
    str r0, [r1]              /* Store value to struct field */
    mov r0, r5                /* Evaluate Expression */
    b .L32
.L29: 
    lsl r1, r7, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
    b .L26
.L27: 
/* Right leaf is 0, insert here */
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L31
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #4
    str r0, [r1]              /* Store value to struct field */
    mov r0, r5                /* Evaluate Expression */
    b .L32
.L31: 
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
.L26: 
    b .L24
.L25: 
    mvn r0, #0
.L32: 
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, fp, lr }
    bx lr
    
main:                         /* Function: main */
    push { r3, r4, r5, r6, r7, r8, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r0, #10               /* Evaluate Expression */
    bl Tree.create_P0         /* Call Tree.create */
    mov r6, r0
    mov r0, #5                /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    mov r0, #12               /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    mov r0, #11               /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    mov r0, #15               /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    mov r0, #7                /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    mov r0, #2                /* Load parameters */
    push { r0 }
    mov r0, r6
    pop { r1 }
    bl Tree.insert_P1         /* Call Tree.insert */
    cmp r3, #1
    bne .L34
    lsl r1, r6, #2            /* Convert to bytes */
    add r1, r1, #8
    ldr r0, [r1]              /* Load field from struct */
    b .L41
.L34: 
    mov r0, r6                /* Evaluate Expression */
    mov r7, r0
    mov r8, r0
    cmp r4, #1
    bne .L36
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
    b .L35
.L36: 
    lsl r1, r7, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
.L35: 
    cmp r5, #2
    bne .L37
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #8
    ldr r0, [r1]              /* Load field from struct */
    b .L41
.L37: 
    cmp r5, #1
    bne .L40
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
    b .L39
.L40: 
    lsl r1, r7, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r7, r0
.L39: 
    lsl r1, r7, #2            /* Convert to bytes */
    add r1, r1, #8
    ldr r0, [r1]              /* Load field from struct */
.L41: 
    mov sp, fp
    pop { r3, r4, r5, r6, r7, r8, fp, lr }
    bx lr
    
.L2_HEAP_START: .word HEAP_START
