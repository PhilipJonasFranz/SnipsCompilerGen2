SOURCE
#include<binary_tree.sn>

int main(int r, int d0, int d1) {
	TreeNode<int>* root = create<int>(10);
	insert<int>(root, 5);
	insert<int>(root, 12);
	insert<int>(root, 11);
	insert<int>(root, 15);
	insert<int>(root, 7);
	insert<int>(root, 2);

	if (r == 1) return root->value;
	else {
		TreeNode<int>* n = root;
		if (d0 == 1) n = n->right;
		else n = n->left;
		
		if (d1 == 2) return n->value;
		
		if (d1 == 1) n = n->right;
		else n = n->left;
		
		return n->value;
	}
}
TESTCASES
1 0 0 10
0 0 2 5
0 0 0 2
0 0 1 7
0 1 2 12
0 1 0 11
0 1 1 15
OUTPUT
/* --test_13.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_main.L3_HEAP_START        /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_main.L3_HEAP_START: .word HEAP_START
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the utility to create a binary */
/* search tree. */
/* A tree node that has a left and right child and holds a value. */
/* Create a new Tree, initialize both childs to 0, set root value */
/* to given value. Return a pointer to the root. */
Tree.create_P0:                              /* Function: Tree.create, Provisos: INT */
    sub sp, sp, #12
    stmea sp, {r3, r4, lr}
    mov r3, r0
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r4, r0
/* Initialize the root with null pointers and the given value */
    push { r3 }
    ldr r0, .POOL1_main.L2_NULL              /* Load null address */
    ldr r1, .POOL1_main.L2_NULL              /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #1
    lsl r1, r4, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, r4                               /* Evaluate Expression */
    ldmfd sp!, {r3, r4, pc}
.POOL1_main.L2_NULL: .word NULL
    
Tree.insert_P1:                              /* Function: Tree.insert, Provisos: INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r5, r0
/* Initialize new node with null pointers and given value */
    push { r4 }
    ldr r0, .POOL2_main.L2_NULL              /* Load null address */
    ldr r1, .POOL2_main.L2_NULL              /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #1
    lsl r1, r5, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, r3                               /* Evaluate Expression */
    mov r6, r3
Tree.insert.L1:                              /* Evaluate condition */
    ldr r1, .POOL2_main.L2_NULL              /* Load null address */
    cmp r6, r1
    beq Tree.insert.L2
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    cmp r0, r4
    ble Tree.insert.L4
/* Left leaf is 0, insert here */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_main.L2_NULL              /* Load null address */
    cmp r0, r1
    bne Tree.insert.L6
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
Tree.insert.L6: 
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    b Tree.insert.L3
Tree.insert.L4: 
/* Right leaf is 0, insert here */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldr r1, .POOL2_main.L2_NULL              /* Load null address */
    cmp r0, r1
    bne Tree.insert.L8
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
Tree.insert.L8: 
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #8]                         /* Load field from struct */
Tree.insert.L3: 
    b Tree.insert.L1
Tree.insert.L2: 
    ldr r0, .POOL2_main.L2_NULL              /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
.POOL2_main.L2_NULL: .word NULL
    
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r0, #10                              /* Evaluate Expression */
    bl Tree.create_P0                        /* Call Tree.create */
    mov r6, r0
    mov r1, #5
    bl Tree.insert_P1                        /* Call Tree.insert */
    mov r1, #12
    mov r0, r6
    bl Tree.insert_P1                        /* Call Tree.insert */
    mov r1, #11
    mov r0, r6
    bl Tree.insert_P1                        /* Call Tree.insert */
    mov r1, #15
    mov r0, r6
    bl Tree.insert_P1                        /* Call Tree.insert */
    mov r1, #7
    mov r0, r6
    bl Tree.insert_P1                        /* Call Tree.insert */
    mov r1, #2
    mov r0, r6
    bl Tree.insert_P1                        /* Call Tree.insert */
    cmp r3, #1
    bne main.L1
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
main.L1: 
    mov r0, r6                               /* Evaluate Expression */
    mov r7, r6
    cmp r4, #1
    bne main.L3
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
    b main.L2
main.L3: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
main.L2: 
    cmp r5, #2
    bne main.L4
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
main.L4: 
    cmp r5, #1
    bne main.L7
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
    b main.L6
main.L7: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
main.L6: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
    
