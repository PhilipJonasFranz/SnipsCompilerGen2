SOURCE
#include<linked_list.sn>

int main(int x, int y) {
	int[2] v0 = {10, 20};
	int[2] v1 = {5, 8};
	int[2] v2 = {3, 9};

	List<int*>* l = create<int*>();
	add<int*>(l, &v0);
	add<int*>(l, &v1);
	add<int*>(l, &v2);
	
	if (contains<int*>(l, &v0) && contains<int*>(l, &v1) && contains<int*>(l, &v2)) {
		int* r = get<int*>(l, x);
		destroy(l);
		return *(r + y);
	}
	else return 0;
}
TESTCASES
0 0 10
0 1 20
1 0 5
1 1 8
2 0 3
2 1 9
OUTPUT
/* --test_09.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                         /* Function: resv */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .L4_HEAP_START    /* Evaluate Expression */
    lsr r0, r0, #2
    mov r4, r0
.L6:                          /* Evaluate condition */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    beq .L7
/* Memory Section is allocated or free */
/* Load block size from memory */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r5, r0
    mov r6, r0
    cmp r5, #0
    bge .L9
/* Defragment Heap */
.L11:                         /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne .L12
    sub r0, r4, r5
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r7, r0
    cmp r7, #0
    ble .L14
    b .L12
.L14: 
    cmp r7, #0
    bne .L16
    mov r0, #0                /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b .L12
.L16: 
    add r5, r5, r7
/* Add to current size */
    b .L11
.L12: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
/* Write defragmented size to heap */
    mov r7, r0
    cmp r5, #0
    bne .L17
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
.L17: 
/* Memory location is free, check size */
    rsb r0, r5, #0
    mov r5, r0
    cmp r0, r3
    bne .L20
/* Fits */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r8, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
    b .L23
.L20: 
    cmp r5, r3
    ble .L22
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r9, r0                /* Evaluate Expression */
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    b .L23
.L22: 
    sub r4, r4, r5
    b .L8
.L9: 
/* Memory section is allocated, skip */
    add r4, r4, r5
.L8: 
    b .L6
.L7: 
/* End reached, create new block */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r5, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
.L23: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
/* Frees the memory block the given pointer points to. The pointer object will keep */
/* the memory address, but the memory block will not be registered to be used anymore and */
/* thus can be overwritten. */
free:                         /* Function: free */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Jump to block head */
    sub r3, r3, #1
/* Load Block Size */
    lsl r0, r3, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r4, r0
/* Store negated block size */
    mov r5, r0                /* Evaluate Expression */
    rsb r0, r4, #0
    lsl r1, r3, #2
    str r0, [r1]
    mov r6, r0                /* Evaluate Expression */
    add r7, r3, r4
.L25:                         /* Evaluate condition */
    lsl r0, r7, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    bge .L26
    lsl r0, r7, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r8, r0
/* Add size to freed block */
    mov r9, r0                /* Evaluate Expression */
    lsl r0, r3, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r1, r0
    add r0, r1, r8
    lsl r1, r3, #2
    str r0, [r1]
/* Shift pointer to next block */
    sub r7, r7, r8
    b .L25
.L26: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
    
/* A single list entry, contains a pointer to the next node */
/* and a value. */
/* Wraps the list head and tail. */
/* Creates a new List Object and initializes the head an tail to 0. */
create_P0:                    /* Function: create, Provisos: INT* */
    push { r3, fp, lr }
    mov fp, sp
    mov r0, #2                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r3, r0
/* Initialize list, set pointers to 0 */
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    lsl r1, r3, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    mov r0, r3                /* Evaluate Expression */
    mov sp, fp
    pop { r3, fp, lr }
    bx lr
    
/* Free the list by freeing all contained list nodes, and the list itself. */
destroy:                      /* Function: destroy */
    push { r3, r4, fp, lr }
    mov fp, sp
    mov r3, r0
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r4, r0
.L30:                         /* Evaluate condition */
    cmp r4, #0
    beq .L31
    mov r0, r4                /* Load parameters */
    bl free                   /* Call free */
    lsl r1, r4, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r4, r0
    b .L30
.L31: 
    mov r0, r3                /* Load parameters */
    bl free                   /* Call free */
    mov sp, fp
    pop { r3, r4, fp, lr }
    bx lr
    
/* Creates a new list node for given value x and adds the node at the */
/* end of the list. */
add_P1:                       /* Function: add, Provisos: INT* */
    push { r3, r4, r5, r6, r7, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #2                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r5, r0
/* Initialize the new List Node, set the next pointer to null */
    mov r0, r4                /* Evaluate Expression */
    push { r0 }
    mov r6, r0
    mov r0, #0
    lsl r1, r5, #2
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    mov r7, r0
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L34
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    str r0, [r1]              /* Store value to struct field */
/* Dereference through pointer */
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    str r0, [r1]              /* Store value to struct field */
    b .L33
.L34: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r1, [r1]
    lsl r1, r1, #2
    str r0, [r1]              /* Store value to struct field */
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r3, #2            /* Convert to bytes */
    add r1, r1, #4
    str r0, [r1]              /* Store value to struct field */
.L33: 
    mov sp, fp
    pop { r3, r4, r5, r6, r7, fp, lr }
    bx lr
    
/* Creates a new list node for given value x and adds the node at the */
/* end of the list. */
get_P3:                       /* Function: get, Provisos: INT* */
    push { r3, r4, r5 }
    mov r3, r0
    mov r4, r1
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
.L37:                         /* Evaluate condition */
    cmp r4, #0
    beq .L38
    lsl r1, r5, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, #0
    bne .L39
    mov r0, #0                /* Evaluate Expression */
    b .L41
.L39: 
/* Jump to next */
    lsl r1, r5, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
    mov r0, r4
    sub r4, r0, #1
    b .L37
.L38: 
    lsl r1, r5, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
.L41: 
    pop { r3, r4, r5 }
    bx lr
    
/* Check if given list contains given value. */
contains_P2:                  /* Function: contains, Provisos: INT* */
    push { r3, r4, r5 }
    mov r3, r0
    mov r4, r1
    lsl r1, r3, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
.L43:                         /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne .L44
    cmp r5, #0
    bne .L45
    mov r0, #0                /* Evaluate Expression */
    b .L49
.L45: 
    lsl r1, r5, #2            /* Convert to bytes */
    add r1, r1, #4
    ldr r0, [r1]              /* Load field from struct */
    cmp r0, r4
    bne .L47
/* Value found */
    mov r0, #1                /* Evaluate Expression */
    b .L49
.L47: 
/* Jump to next */
    lsl r1, r5, #2            /* Convert to bytes */
    ldr r0, [r1]              /* Load field from struct */
    mov r5, r0
    b .L43
.L44: 
.L49: 
    pop { r3, r4, r5 }
    bx lr
    
/* Finds the first node in the list that has given value. */
/* Returns a pointer to this list node. */
    
main:                         /* Function: main */
    push { r3, r4, r5, r6, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #20               /* Evaluate Expression */
    mov r1, #10
    push { r1, r0 }
    mov r0, #8                /* Evaluate Expression */
    mov r1, #5
    push { r1, r0 }
    mov r0, #9                /* Evaluate Expression */
    mov r1, #3
    push { r1, r0 }
    bl create_P0              /* Evaluate Expression */
    mov r5, r0
    sub r0, fp, #8            /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl add_P1                 /* Call add */
    sub r0, fp, #16           /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl add_P1                 /* Call add */
    sub r0, fp, #24           /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl add_P1                 /* Call add */
    sub r0, fp, #8            /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl contains_P2            /* Call contains */
    push { r0 }
    sub r0, fp, #16           /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl contains_P2            /* Call contains */
    mov r1, r0
    pop { r0 }
    adds r1, r1, #0
    movne r1, #1
    cmp r0, #0
    movne r0, r1
    moveq r0, #0
    push { r0 }
    sub r0, fp, #24           /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl contains_P2            /* Call contains */
    mov r1, r0
    pop { r0 }
    adds r1, r1, #0
    movne r1, #1
    cmp r0, #0
    movne r0, r1
    moveq r0, #0
    cmp r0, #0
    beq .L50
    mov r0, r3                /* Evaluate Expression */
    push { r0 }
    mov r0, r5
    pop { r1 }
    bl get_P3                 /* Call get */
    mov r6, r0
    mov r0, r5                /* Load parameters */
    bl destroy                /* Call destroy */
    add r0, r6, r4
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    b .L52
.L50: 
    mov r0, #0                /* Evaluate Expression */
.L52: 
    mov sp, fp
    pop { r3, r4, r5, r6, fp, lr }
    bx lr
    
.L4_HEAP_START: .word HEAP_START
