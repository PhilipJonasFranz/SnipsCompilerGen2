SOURCE
/*
 * A single list entry, contains a pointer to the next node
 * and a value.
 */
struct ListNode {
	ListNode* next;
	int value;
}

/*
 * Wraps the list head and tail.
 */
struct List {
	ListNode* head;
	ListNode* tail;
}

/*
 * Creates a new List Object and initializes the head an tail to 0.
 */
List* create() {
	List* lp = (List*) resv(sizeof(List));

	/* Initialize list, set pointers to 0 */
	*lp = List::((ListNode*) 0, (ListNode*) 0);

	return lp;
}

/*
 * Creates a new list node for given value x and adds the node at the
 * end of the list.
 */
void add(List* lp, int x) {
	ListNode* n = (ListNode*) resv(sizeof(ListNode));

	/* Initialize the new List Node, set the next pointer to null */
	*n = ListNode::((ListNode*) 0, x);

	if ((int) lp->head == 0) {
		lp->head = n; // Dereference through pointer
		lp->tail = n;
	}
	else {
		lp->tail->next = n;
		lp->tail = n;
	}	
}

/*
 * Creates a new list node for given value x and adds the node at the
 * end of the list.
 */
int get(List* lp, int i) {
	ListNode* n = lp->head;
	while (i != 0) {
		if ((int) n->next == 0) return 0;
		
		/* Jump to next */
		n = n->next;
		i--;
	}
	
	return n->value;	
}

int main(int x) {
	List* l = create();
	add(l, 10);
	add(l, 5);
	add(l, 12);
	
	return get(l, x);
}
TESTCASES
0 10
1 5
2 12