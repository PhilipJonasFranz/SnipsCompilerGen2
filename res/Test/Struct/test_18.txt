SOURCE
struct Data {
	int [3] arr;
}

int main(int x, int y) {
	Data[2]* data = (Data[2]*) resv(sizeof(Data[2]));
	*data = {Data::({1, 2, 3}), Data::({4, 5, 6})};
	
	data [0]->arr [1] = 5;
	return data [y]->arr [x];
}
TESTCASES
0 0 1
1 0 5
2 0 3
0 1 4
1 1 5
2 1 6
OUTPUT
/* --test_18.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                         /* Function: resv */
    push { r3, r4, r5, r6, r7, r8, r9 }
    mov r3, r0
/* Add block header to size */
    add r3, r3, #1
/* Get reference to heap start */
    ldr r0, .POOL0_main.L0_HEAP_START/* Evaluate Expression */
    lsr r0, r0, #2
    mov r4, r0
resv.L1:                      /* Evaluate condition */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    lsl r0, r4, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r5, r0
    mov r6, r0
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                      /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    lsl r0, r0, #2            /* Convert to bytes */
    ldr r0, [r0]              /* Load from address */
    mov r7, r0
    cmp r7, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r7, #0
    bne resv.L11
    mov r0, #0                /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r7
/* Add to current size */
    b resv.L6
resv.L7: 
    mov r0, r5                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
/* Write defragmented size to heap */
    mov r7, r0
    cmp r5, #0
    bne resv.L12
    mov r0, #0                /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r0, r5, #0
    mov r5, r0
    cmp r0, r3
    bne resv.L15
/* Fits */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r8, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r9, r0                /* Evaluate Expression */
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    mov r1, r4                /* Evaluate Expression */
    mov r2, #1
    add r0, r1, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    mov r0, r3                /* Evaluate Expression */
    lsl r1, r4, #2
    str r0, [r1]
    mov r5, r0                /* Evaluate Expression */
    mov r1, r4
    mov r2, #1
    add r0, r1, #1
resv.L18: 
    pop { r3, r4, r5, r6, r7, r8, r9 }
    bx lr
.POOL0_main.L0_HEAP_START: .word HEAP_START
    
main:                         /* Function: main */
    push { r3, r4, r5, r6, fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #6                /* Evaluate Expression */
    bl resv                   /* Call resv */
    mov r5, r0
    mov r0, #6                /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    push { r2, r1, r0 }
    mov r0, #3
    mov r1, #2
    mov r2, #1
    push { r2, r1, r0 }
    lsl r1, r5, #2
    pop { r0 }
    str r0, [r1, #0]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    mov r6, r0                /* Evaluate Expression */
    mov r0, #5
    push { r0 }               /* Load field location */
    lsl r1, r5, #2            /* Convert to bytes */
    mov r2, #0
    mov r0, #3
    mul r2, r2, r0
    add r1, r1, r2
    mov r1, r1
    add r1, r1, #4
    pop { r0 }
    str r0, [r1]              /* Store value to struct field */
    lsl r1, r5, #2            /* Convert to bytes */
    lsl r2, r4, #2
    mov r0, #3
    mul r2, r2, r0
    add r1, r1, r2
    lsl r2, r3, #2
    add r1, r1, r2
    ldr r0, [r1]              /* Load field from struct */
    mov sp, fp
    pop { r3, r4, r5, r6, fp, lr }
    bx lr
    
