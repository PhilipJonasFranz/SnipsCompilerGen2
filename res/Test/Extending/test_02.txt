SOURCE
struct Root {
	int x;
}

struct A : Root {
	int var;
}

struct C : A {
	bool var2;
}

int main() {
	A a = A::(10, 12);
	
	if (a instanceof C) {
		return 10;
	}
	
	Root* r = &a;
	
	Root r0 = *r;
	
	/* 
	 * Since polymorphism is only available through pointers,
	 * r0 is not an instance of A anymore
	 */
	if (r0 instanceof A) return 0;
	
	int s = 0;
	
	if (r instanceof Root) s += 1 + r0.x;
	
	if (r instanceof A) {
		A* a0 = (A*) r;
		s += a0->var;
	}
	
	if (r instanceof C) s = 0;
	
	return s;
}
TESTCASES
23
OUTPUT
/* --test_02.txt */
main:                                        /* Function: main */
    mov fp, sp
    mov r0, #12                              /* Evaluate Expression */
    mov r1, #10
    stmfd sp!, {r0, r1}
    mov r0, #2
    push { r0 }
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [sp]
    cmp r0, #3
    movne r0, #0
    add sp, sp, #12
    cmp r0, #0
    beq main.L1
    mov r0, #10                              /* Evaluate Expression */
    b main.L10
main.L1: 
    sub r0, fp, #12                          /* Evaluate Expression */
    lsr r3, r0, #2
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]
    push { r0 }
    mov r0, #1                               /* Override SID header */
/* Since polymorphism is only available through pointers, */
/* r0 is not an instance of A anymore */
    push { r0 }
    ldr r0, [fp, #-16]
    ldr r1, [fp, #-20]
    stmfd sp!, {r0, r1}
    ldr r0, [sp]
    cmp r0, #2
    movlt r0, #0
    add sp, sp, #8
    cmp r0, #0
    beq main.L3
    mov r0, #0                               /* Evaluate Expression */
    b main.L10
main.L3: 
    mov r4, #0
    ldr r0, [r10, r3, lsl #2]
    cmp r0, #1
    movlt r0, #0
    cmp r0, #0
    beq main.L5
    ldr r2, [fp, #-16]                       /* Load field from struct */
    add r0, r2, #1
    add r4, r4, r0
main.L5: 
    ldr r0, [r10, r3, lsl #2]
    cmp r0, #2
    movlt r0, #0
    cmp r0, #0
    beq main.L7
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    add r4, r4, r0
main.L7: 
    ldr r0, [r10, r3, lsl #2]
    cmp r0, #3
    movne r0, #0
    cmp r0, #0
    beq main.L9
    mov r4, #0
main.L9: 
    mov r0, r4                               /* Evaluate Expression */
main.L10: 
    mov sp, fp
    bx lr
    
