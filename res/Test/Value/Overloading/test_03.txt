SOURCE
interface Getter {
	int get();
	
	int get(bool b);
}

struct X : Getter {
	int val;
	
	int get() {
		return self->val;
	}
	
	int get(bool mult) {
		return (mult)? self->val * 2 : 2;
	}
}

int main(bool b) {
	X x = X::(10);
	Getter g = &x;
	
	return g.get() + g.get(b);
}
TESTCASES
0 12
1 30
OUTPUT
/* --test_03.txt */
    b main
Getter.L0:                                   /* Interface : Getter */
    add r10, r12, #4
    mov r12, #0
    add pc, pc, r10
    b X.get@2
    b X.get@3
    
X.get@2:                                     /* Function: X.get */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bx lr
    
X.get@3:                                     /* Function: X.get */
    mov r10, #0
    push { r3 }
    mov r3, r0
    cmp r1, #0
    beq X.get@3.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    lsl r0, r1, #1
    b X.get@3.L1
X.get@3.L0: 
    mov r0, #2
X.get@3.L1: 
    pop { r3 }
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #10                              /* Evaluate Expression */
    push { r0 }
    mov r0, #1
    push { r0 }
    sub r0, fp, #8                           /* Evaluate Expression */
    lsr r4, r0, #2
    mov r0, r4                               /* Evaluate Expression */
    bl Getter.L0                             /* Branch to relay table of Getter */
    mov r5, r0
    mov r0, r4
    mov r1, r3
    mov r12, #4
    bl Getter.L0                             /* Branch to relay table of Getter */
    add r0, r5, r0
    mov sp, fp
    ldmfd sp!, {fp, pc}
    
