SOURCE
struct K {
	int v;
}

struct P {
	int x;
	int y;
	K k;
}

int main() {
	P* p = init<>(P::(13, 10, K::(4)));
	void* s  = &p->k.v;
	*s = *s + 15;
	return p->x + p->y + p->k.v;
}
TESTCASES
42
OUTPUT
.data
HEAP_START: .word 0
K: .word 0
P: .word 0

.text
    b main
    
.global init_P_5
init_P_5:                                    /* Function: init, Provisos: P */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #5                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #20
    bx lr

.global resv
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
    add r3, r0, #1
    ldr r0, .POOL1_L0_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
resv.L6:                                     /* Evaluate condition */
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
    b resv.L7
resv.L10: 
    add r5, r5, r6
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL1_L0_HEAP_START: .word HEAP_START

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    ldr r1, .POOL0_K
    stmfd sp!, {r0, r1}
    mov r0, #10
    mov r1, #13
    stmfd sp!, {r0, r1}
    ldr r0, .POOL0_P
    push { r0 }
    bl init_P_5                              /* Call init */
    mov r3, r0
    push { r3 }                              /* Push declaration on stack, referenced by addressof. */
    ldr r1, [fp, #-4]
    lsl r1, r1, #2                           /* Convert to bytes */
    add r0, r1, #16
    lsr r3, r0, #2
    ldr r1, [r10, r3, lsl #2]                /* Load from address */
    add r0, r1, #15
    str r0, [r10, r3, lsl #2]
    ldr r1, [fp, #-4]
    lsl r1, r1, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, [fp, #-4]
    lsl r1, r1, #2                           /* Convert to bytes */
    ldr r2, [r1, #8]                         /* Load field from struct */
    add r0, r0, r2
    ldr r1, [fp, #-4]
    lsl r1, r1, #2                           /* Convert to bytes */
    ldr r2, [r1, #16]                        /* Load field from struct */
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
.POOL0_P: .word P
.POOL0_K: .word K
