SOURCE
int get(int* p) {
	return *p;
}

int shift(int* p, int off) {
	p = p + off;
	return get(p);
}

int main(int off) {
	int [2] [2] v = {{5, 3}, {9, 1}};
	return shift(&v, off);
}
TESTCASES
0 5
1 3
2 9
3 1
OUTPUT
.version 2620400012

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global get
get:                                         /* Function: get */
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    bx lr

.global shift
shift:                                       /* Function: shift */
    push { r3, lr }
    mov r3, r0
    add r3, r0, r1
    mov r0, r3                               /* Evaluate Expression */
    bl get                                   /* Call get */
    ldmfd sp!, {r3, pc}

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #1                               /* Evaluate Expression */
    mov r1, #9
    stmfd sp!, {r0, r1}
    mov r0, #3
    mov r1, #5
    stmfd sp!, {r0, r1}
    sub r0, fp, #16
    lsr r0, r0, #2
    mov r1, r3
    bl shift                                 /* Call shift */
    mov sp, fp
    ldmfd sp!, {fp, pc}
