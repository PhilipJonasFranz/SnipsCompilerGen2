SOURCE
#include<linked_list.sn>
#include<binary_tree.sn>

int relation(int x, int y) {
	return (x == y)? 0 : ((x < y)? -1 : 1);
}

int main() {
	LinkedList<int>* list = LinkedList::create<int>(0);
	
	list->add<int>(10);
	
	TreeNode<int>* root = TreeNode::create<int>(10);
	
	root->insert<int>(relation, 5);
	root->insert<int>(relation, 12);
	
	root->delete<int>(relation, 12);
	
	return list->get<int>(0);
}

TESTCASES
10
OUTPUT
.data
Tree.TreeNode: .word 0
List.LinkedList: .word 0
List.ListNode: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global Tree.TreeNode.insert_P_1
Tree.TreeNode.insert_P_1:                    /* Function: Tree.TreeNode.insert, Provisos: INT */
    sub sp, sp, #28
    stmea sp, {r3-r8, lr}
    mov r3, r0
    mov r4, r1
    mov r5, r2
    push { r5 }
    ldr r0, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    stmfd sp!, {r0, r1}
    ldr r0, .POOL@-1914853343_0_Tree.TreeNode
    push { r0 }
    bl init_P_4                              /* Call init */
    mov r6, r0
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r3, r1
    bne Tree.TreeNode.insert.L1
    mov r0, r6                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L1: 
    mov r0, r3                               /* Evaluate Expression */
    mov r7, r3
Tree.TreeNode.insert.L4:                     /* Evaluate condition */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r7, r1
    ldmfdeq sp!, {r3-r8, pc}
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    mov r1, r5
    add lr, pc, #8
    mov pc, r4
    mov r8, r0
    cmp r8, #0
    bne Tree.TreeNode.insert.L7
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L7: 
    cmp r8, #1
    bne Tree.TreeNode.insert.L8
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.insert.L10
    lsl r1, r7, #2                           /* Convert to bytes */
    str r6, [r1, #4]                         /* Store value to struct field */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L10: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
    b Tree.TreeNode.insert.L6
Tree.TreeNode.insert.L8: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.insert.L14
    lsl r1, r7, #2                           /* Convert to bytes */
    str r6, [r1, #8]                         /* Store value to struct field */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L14: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
Tree.TreeNode.insert.L6: 
    b Tree.TreeNode.insert.L4
    ldmfd sp!, {r3-r8, pc}
    
.global Tree.TreeNode.delete_P_1
Tree.TreeNode.delete_P_1:                    /* Function: Tree.TreeNode.delete, Provisos: INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    mov r5, r2
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L0
    ldr r0, .POOL@-1914853343_0_L1_NULL      /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]                        /* Load field from struct */
    mov r0, r5
    add lr, pc, #8
    mov pc, r4
    mov r6, r0
    mvn r1, #0
    cmp r6, r1
    bne Tree.TreeNode.delete.L3
    push { r5 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P_1              /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    b Tree.TreeNode.delete.L2
Tree.TreeNode.delete.L3: 
    cmp r6, #1
    bne Tree.TreeNode.delete.L4
    push { r5 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P_1              /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    b Tree.TreeNode.delete.L2
Tree.TreeNode.delete.L4: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L7
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L7: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L8
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L8: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #8]                         /* Load field from struct */
Tree.TreeNode.delete.L11:                    /* Evaluate condition */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    cmp r0, r1
    beq Tree.TreeNode.delete.L12
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    b Tree.TreeNode.delete.L11
Tree.TreeNode.delete.L12: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #12]                        /* Store value to struct field */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P_1              /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
Tree.TreeNode.delete.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
    
.global Tree.TreeNode.create_P_1
Tree.TreeNode.create_P_1:                    /* Function: Tree.TreeNode.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    ldr r0, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    ldr r1, .POOL@-1914853343_0_L1_NULL      /* Load null address */
    stmfd sp!, {r0, r1}
    ldr r0, .POOL@-1914853343_0_Tree.TreeNode
    push { r0 }
    bl init_P_4                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL@-1914853343_0_Tree.TreeNode: .word Tree.TreeNode
.POOL@-1914853343_0_L1_NULL: .word NULL

.global List.LinkedList.add_P_1
    
List.LinkedList.add_P_1:                     /* Function: List.LinkedList.add, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    push { r4 }
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Load null address */
    push { r0 }
    ldr r0, .POOL@1321795593_0_List.ListNode
    push { r0 }
    bl init_P_3                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    ldmfd sp!, {r3-r5, pc}
    
.global List.LinkedList.get_P_1
List.LinkedList.get_P_1:                     /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
    
.global List.LinkedList.create_P_1
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    mov r0, #0
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    ldr r2, .POOL@1321795593_0_L1_NULL       /* Load null address */
    stmfd sp!, {r0-r2}
    ldr r0, .POOL@1321795593_0_List.LinkedList
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL@1321795593_0_List.LinkedList: .word List.LinkedList
.POOL@1321795593_0_List.ListNode: .word List.ListNode
.POOL@1321795593_0_L1_NULL: .word NULL

lambda_relation:                             /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global relation
relation:                                    /* Function: relation */
    push { r3, r4 }
    mov r3, r0
    mov r4, r1
    cmp r0, r1
    bne relation.L0
    mov r0, #0
    b relation.L3
relation.L0: 
    cmp r3, r4
    bge relation.L2
    mvn r0, #0
    b relation.L3
relation.L2: 
    mov r0, #1
relation.L3: 
    ldmfd sp!, {r3, r4}
    bx lr
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r3, r0
    mov r1, #10
    mov r0, r3
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r0, #10                              /* Evaluate Expression */
    bl Tree.TreeNode.create_P_1              /* Call Tree.TreeNode.create */
    mov r4, r0
    mov r0, #5                               /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P_1              /* Call Tree.TreeNode.delete */
    mov r1, #0
    mov r0, r3
    bl List.LinkedList.get_P_1               /* Call List.LinkedList.get */
    pop { pc }
