SOURCE
#include<linked_list.sn>
#include<binary_tree.sn>

int relation(int x, int y) {
	return (x == y)? 0 : ((x < y)? -1 : 1);
}

int main() {
	LinkedList<int>* list = List::create<int>(0);
	
	list->add<int>(10);
	
	TreeNode<int>* root = Tree::create<int>(10);
	
	root->insert<int>(relation, 5);
	root->insert<int>(relation, 12);
	
	root->delete<int>(relation, 12);
	
	return list->get<int>(0);
}

TESTCASES
10
OUTPUT
/* --test_09.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L11_HEAP_START            /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L11_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P2:                                     /* Function: init, Provisos: List.LinkedList<INT> | Tree.TreeNode<INT> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #24
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #12]
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #16
    bx lr
    
init_P4:                                     /* Provisos: List.ListNode<INT> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #12
    bx lr
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the interface definition for an iterable struct. */
/* The interface creates data access and exchange points, so data can be */
/* read and written. */
/* [BASE-PACKAGE] */
/*  */
/* Using the serializable interface, structs can be converted */
/* into string format. */
    ldr r10, [r10, r0, lsl #2]
    cmp r10, #2
    add r10, r12, #4
    mov r12, #0
    add pc, pc, r10
    add r10, r10, r10                        /* Function was not called, use as placeholder */
    b List.LinkedList.deserialize
    
/* This package contains the utility to create a linked-list, */
/* insert and remove values from it, as well as some functions */
/* that give information about the state of the list. */
/* A single list entry, contains a pointer to the next node */
/* and a value. */
/* Wraps the list head and tail. */
List.LinkedList.add_P3:                      /* Function: List.LinkedList.add, Provisos: INT */
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
/* Initialize the new List Node, set the next pointer to null */
    push { r4 }
    ldr r0, .POOL1_L10_NULL                  /* Load null address */
    push { r0 }
    mov r0, #1
    push { r0 }
    bl init_P4                               /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL1_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL1_L10_NULL: .word NULL
    
List.LinkedList.get_P9:                      /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
/* Jump to next */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
.POOL2_L10_NULL: .word NULL
    
List.LinkedList.deserialize:                 /* Function: List.LinkedList.deserialize */
    mov r10, #0
    ldr r0, .POOL3_L10_NULL                  /* Evaluate Expression */
    bx lr
.POOL3_L10_NULL: .word NULL
    
/* Creates a new List Object and initializes the head an tail to null. */
List.create_P1:                              /* Function: List.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
/* Initialize list, set pointers to null */
    push { r3 }
    ldr r0, .POOL4_L10_NULL                  /* Load null address */
    ldr r1, .POOL4_L10_NULL                  /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #2
    push { r0 }
    bl init_P2                               /* Call init */
    ldmfd sp!, {r3, pc}
.POOL4_L10_NULL: .word NULL
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the utility to create a binary */
/* search tree. */
/* A tree node that has a left and right child and holds a value. */
Tree.TreeNode.insert_P7:                     /* Function: Tree.TreeNode.insert, Provisos: INT */
    sub sp, sp, #28
    stmea sp, {r3-r8, lr}
    mov r3, r0
    mov r4, r1
    mov r5, r2
/* Initialize new node with null pointers and given value */
    push { r5 }
    ldr r0, .POOL5_L10_NULL                  /* Load null address */
    ldr r1, .POOL5_L10_NULL                  /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #3
    push { r0 }
    bl init_P2                               /* Call init */
    mov r6, r0
    ldr r1, .POOL5_L10_NULL                  /* Load null address */
    cmp r3, r1
    bne Tree.TreeNode.insert.L1
/* Tree is empty */
    mov r0, r6                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L1: 
    mov r0, r3                               /* Evaluate Expression */
    mov r7, r3
Tree.TreeNode.insert.L3:                     /* Evaluate condition */
    ldr r1, .POOL5_L10_NULL                  /* Load null address */
    cmp r7, r1
    ldmfdeq sp!, {r3-r8, pc}
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    mov r1, r5
    add lr, pc, #8
    mov pc, r4
    mov r8, r0
    cmp r8, #0
    bne Tree.TreeNode.insert.L6
/* Value already in tree. */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L6: 
    cmp r8, #1
    bne Tree.TreeNode.insert.L8
/* Left leaf is null, insert here */
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL5_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.insert.L10
    lsl r1, r7, #2                           /* Convert to bytes */
    str r6, [r1, #4]                         /* Store value to struct field */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L10: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
    b Tree.TreeNode.insert.L7
Tree.TreeNode.insert.L8: 
/* Right leaf is null, insert here */
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldr r1, .POOL5_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.insert.L12
    lsl r1, r7, #2                           /* Convert to bytes */
    str r6, [r1, #8]                         /* Store value to struct field */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r8, pc}
Tree.TreeNode.insert.L12: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
Tree.TreeNode.insert.L7: 
    b Tree.TreeNode.insert.L3
    ldmfd sp!, {r3-r8, pc}
.POOL5_L10_NULL: .word NULL
    
Tree.TreeNode.delete_P8:                     /* Function: Tree.TreeNode.delete, Provisos: INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    mov r5, r2
/* Found leaf */
    ldr r1, .POOL6_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L0
    ldr r0, .POOL6_L10_NULL                  /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]                        /* Load field from struct */
    mov r0, r5
    add lr, pc, #8
    mov pc, r4
    mov r6, r0
    mvn r1, #0
    cmp r6, r1
    bne Tree.TreeNode.delete.L3
    push { r5 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P8               /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    b Tree.TreeNode.delete.L4
Tree.TreeNode.delete.L3: 
    cmp r6, #1
    bne Tree.TreeNode.delete.L5
    push { r5 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P8               /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    b Tree.TreeNode.delete.L4
Tree.TreeNode.delete.L5: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL6_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L7
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L7: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldr r1, .POOL6_L10_NULL                  /* Load null address */
    cmp r0, r1
    bne Tree.TreeNode.delete.L9
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r3-r6, pc}
Tree.TreeNode.delete.L9: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #8]                         /* Load field from struct */
Tree.TreeNode.delete.L11:                    /* Evaluate condition */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL6_L10_NULL                  /* Load null address */
    cmp r0, r1
    beq Tree.TreeNode.delete.L12
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    b Tree.TreeNode.delete.L11
Tree.TreeNode.delete.L12: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #12]                        /* Store value to struct field */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    push { r4 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P8               /* Call Tree.TreeNode.delete */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
Tree.TreeNode.delete.L4: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
.POOL6_L10_NULL: .word NULL
    
/* Create a new Tree, initialize both childs to 0, set root value */
/* to given value. Return a pointer to the root. */
Tree.create_P5:                              /* Function: Tree.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
/* Initialize the root with null pointers and the given value */
    push { r3 }
    ldr r0, .POOL7_L10_NULL                  /* Load null address */
    ldr r1, .POOL7_L10_NULL                  /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #3
    push { r0 }
    bl init_P2                               /* Call init */
    ldmfd sp!, {r3, pc}
.POOL7_L10_NULL: .word NULL
    
lambda_relation:                             /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
relation:                                    /* Function: relation */
    push { r3, r4 }
    mov r3, r0
    mov r4, r1
    cmp r0, r1
    bne relation.L0
    mov r0, #0
    b relation.L3
relation.L0: 
    cmp r3, r4
    bge relation.L2
    mvn r0, #0
    b relation.L3
relation.L2: 
    mov r0, #1
relation.L3: 
    ldmfd sp!, {r3, r4}
    bx lr
    
main:                                        /* Function: main */
    push { lr }
    mov r0, #0                               /* Evaluate Expression */
    bl List.create_P1                        /* Call List.create */
    mov r3, r0
    mov r1, #10
    mov r0, r3
    bl List.LinkedList.add_P3                /* Call List.LinkedList.add */
    mov r0, #10                              /* Evaluate Expression */
    bl Tree.create_P5                        /* Call Tree.create */
    mov r4, r0
    mov r0, #5                               /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P7               /* Call Tree.TreeNode.insert */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P7               /* Call Tree.TreeNode.insert */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.delete_P8               /* Call Tree.TreeNode.delete */
    mov r1, #0
    mov r0, r3
    bl List.LinkedList.get_P9                /* Call List.LinkedList.get */
    pop { pc }
    
