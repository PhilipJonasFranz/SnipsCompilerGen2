SOURCE
#include <linked_list.sn>

#operator <<
LinkedList<T>* op_add<T>(LinkedList<T>* list, T value) {
	list->add(value);
	return list;
}

#operator >>
LinkedList<T>* op_remove<T>(int index, LinkedList<T>* list) {
	list->remove(index);
	return list;
}

#operator >>
T op_get<T>(LinkedList<T>* list, int index) {
	return list->get(index);
}

int main(int a) {
	LinkedList<int>* list = LinkedList::create(0);
	
	list << 12;
	list << 15;
	list << 10;
	list << 25;
	
	a >> a >> list;
	
	return list >> a;
}
TESTCASES
0 10
1 25
OUTPUT
.version 0

.include maybe resv.s
.include maybe init.s
.include maybe free.s
.include linked_list.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global op_add_P_1
op_add_P_1:                                  /* Function: op_add, Provisos: INT | List.LinkedList<INT>* */
    push { r3, lr }
    mov r3, r0
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3, pc}

.global op_remove_P_1
op_remove_P_1:                               /* Function: op_remove, Provisos: INT */
    push { r4, lr }
    mov r4, r1
    mov r1, r0
    mov r0, r4
    bl List.LinkedList.remove_P_1            /* Call List.LinkedList.remove */
    mov r0, r4                               /* Evaluate Expression */
    ldmfd sp!, {r4, pc}

.global op_get_P_1
op_get_P_1:                                  /* Function: op_get, Provisos: INT */
    b List.LinkedList.get_P_1                /* Call List.LinkedList.get */

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #12
    mov r0, r4
    bl op_add_P_1                            /* Call op_add */
    mov r1, #15
    mov r0, r4
    bl op_add_P_1                            /* Call op_add */
    mov r1, #10
    mov r0, r4
    bl op_add_P_1                            /* Call op_add */
    mov r1, #25
    mov r0, r4
    bl op_add_P_1                            /* Call op_add */
    mov r1, r4
    mov r0, r3
    bl op_remove_P_1                         /* Call op_remove */
    mov r1, r0
    mov r0, r3
    bl op_remove_P_1                         /* Call op_remove */
    mov r1, r3
    mov r0, r4
    bl op_get_P_1                            /* Call op_get */
    pop { pc }
