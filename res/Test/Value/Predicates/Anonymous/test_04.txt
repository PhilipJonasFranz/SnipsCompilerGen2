SOURCE
int f(int x) {
	return x * x;
}

int map(int x, func int -> int pred) {
	return pred(x);
}

int main() {
	int p = (int) f;
	func pred0 = (func) p;

	int y = map(10, pred0);

	return y;
}
TESTCASES
100
OUTPUT
.version 6492866427

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
lambda_map: .word map
lambda_f: .word f
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global f
f:                                           /* Function: f */
    mul r0, r0, r0
    bx lr

.global map
map:                                         /* Function: map */
    push { r4, lr }
    mov r4, r1
    add lr, pc, #8
    mov pc, r4
    ldmfd sp!, {r4, pc}

.global main
main:                                        /* Function: main */
    ldr r0, .P496049965_lambda_f             /* Evaluate Expression */
    ldr r3, [r0]
    mov r0, #10
    mov r1, r3
    b map                                    /* Call map */
.P496049965_lambda_f: .word lambda_f
