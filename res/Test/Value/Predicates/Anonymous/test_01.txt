SOURCE
int [2] id(int[2] arr) {
	return arr;
}

int main(int x) {
	func [1] pred = {id};
	func pred0 = pred [0];
	int [2] arr = (int[2]) pred0({5, 3});
	return arr [x];
}
TESTCASES
0 5
1 3
OUTPUT
.data
.text
    b main
    
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
lambda_id:                                   /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global id
id:                                          /* Function: id */
    push { fp }
    mov fp, sp
    ldr r0, [fp, #8]                         /* Evaluate Expression */
    ldr r1, [fp, #4]
    stmfd sp!, {r0, r1}
    mov r2, sp
    mov sp, fp
    pop { fp }
    add sp, sp, #8
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    add r10, pc, #8                          /* Evaluate Expression */
    b lambda_id
    mov r10, #0
    push { r0 }
    ldr r4, [fp, #-4]
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #5
    stmfd sp!, {r0, r1}
    add lr, pc, #8
    mov pc, r4
    lsl r2, r3, #2
    sub r0, fp, #12
    ldr r0, [r0, r2]
    mov sp, fp
    ldmfd sp!, {fp, pc}
