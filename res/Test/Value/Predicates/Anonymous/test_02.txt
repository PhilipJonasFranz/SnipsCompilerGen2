SOURCE
int [2] get() {
	return {5, 3};
}

int main() {
	func [1] pred = {get};
	func pred0 = pred [0];
	
	/* Call the predicate */
	pred0();
	
	int [2] arr = {5, 6};
	
	return arr [0] + arr [1];
}
TESTCASES
11
OUTPUT
.version 8025593189

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0

HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

lambda_get:                                  /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global get
get:                                         /* Function: get */
    push { fp }
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #5
    stmfd sp!, {r0, r1}
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    add r10, pc, #8                          /* Evaluate Expression */
    b lambda_get
    mov r10, #0
    push { r0 }
    ldr r3, [fp, #-4]
/* Call the predicate */
    add lr, pc, #8
    mov pc, r3
    sub sp, fp, #4                           /* Reset the stack after anonymous call */
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    stmfd sp!, {r0, r1}
    ldr r0, [fp, #-12]
    ldr r2, [fp, #-8]
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
