SOURCE
bool sortPred(int a, int b) {
	return a < b;
}

void sort(int* arr, int size, func (int, int) -> bool pred) {
	if (size > 1) {
		while (true) {
			bool sorted = true;
			for (int i = 1; i < size; i++) {
				int a0 = *(arr + i - 1);
				int a1 = *(arr + i);
				if (pred(a1, a0)) {
					sorted = false;
					*(arr + i - 1) = a1;
					*(arr + i) = a0;
				}
			}
		
			if (sorted) break;
		}
	}
	return;
}

int main(int x) {
	int [5] arr = {6, 3, 8, 4, 2};
	
	sort(&arr, 5, sortPred);

	return arr [x];
}
TESTCASES
0 2
1 3
2 4
3 6
4 8
OUTPUT
.version 9543170697

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global sortPred
sortPred:                                    /* Function: sortPred */
    cmp r0, r1
    movlt r0, #1
    movge r0, #0
    bx lr

.global sort
sort:                                        /* Function: sort */
    sub sp, sp, #32
    stmea sp, {r3-r9, lr}
    mov r3, r0
    mov r4, r1
    mov r5, r2
    cmp r1, #1
    ldmfdle sp!, {r3-r9, pc}
sort.L3:                                     /* Evaluate condition */
    mov r6, #1
    mov r7, #1
sort.L6: 
    cmp r7, r4
    bge sort.L7
    add r1, r3, r7
    sub r0, r1, #1
    ldr r8, [r10, r0, lsl #2]                /* Load from address */
    add r0, r3, r7
    ldr r9, [r10, r0, lsl #2]                /* Load from address */
    mov r0, r9
    mov r1, r8
    add lr, pc, #8
    mov pc, r5
    cmp r0, #0
    beq sort.L8
    mov r6, #0
    add r1, r3, r7
    sub r0, r1, #1
    str r9, [r10, r0, lsl #2]
    add r0, r3, r7
    str r8, [r10, r0, lsl #2]
sort.L8: 
    add r7, r7, #1
    b sort.L6
sort.L7: 
    cmp r6, #0
    beq sort.L10
    ldmfd sp!, {r3-r9, pc}
sort.L10: 
    b sort.L3
    ldmfd sp!, {r3-r9, pc}

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #2                               /* Evaluate Expression */
    mov r1, #4
    mov r2, #8
    stmfd sp!, {r0-r2}
    mov r0, #3
    mov r1, #6
    stmfd sp!, {r0, r1}
    ldr r0, .P78746759_sortPred              /* Load parameters */
    push { r0 }
    mov r0, #5
    push { r0 }
    sub r0, fp, #20
    lsr r0, r0, #2
    ldmfd sp!, {r1, r2}
    bl sort                                  /* Call sort */
    lsl r2, r3, #2
    sub r0, fp, #20
    ldr r0, [r0, r2]
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P78746759_sortPred: .word sortPred
