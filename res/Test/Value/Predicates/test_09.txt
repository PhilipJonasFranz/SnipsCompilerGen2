SOURCE
bool sortPred(int x, int y) {
	return x < y;
}

struct K {
	func sPred;
}

func (int, int) -> bool cast(func pred) {
	return (func (int, int) -> bool) pred;
}

int main() {
	K k0 = K::(sortPred);
	func sp = cast(k0.sPred);
	
	if (sp(11, 10)) 
		return 12;
	
	return 25;
}
TESTCASES
25
OUTPUT
.version 0

.data
K: .word 0
K_vrelay: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global sortPred
sortPred:                                    /* Function: sortPred */
    cmp r0, r1
    movlt r0, #1
    movge r0, #0
    bx lr

.global cast
cast:                                        /* Function: cast */
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    ldr r0, .P307779967_sortPred             /* Evaluate Expression */
    push { r0 }
    ldr r0, .P307779967_K
    push { r0 }
    ldr r0, [fp, #-4]                        /* Load field from struct */
    bl cast                                  /* Call cast */
    mov r3, r0
    mov r1, #10
    mov r0, #11
    add lr, pc, #8
    mov pc, r3
    cmp r0, #0
    beq main.L0
    mov r0, #12                              /* Evaluate Expression */
    b main.L2
main.L0: 
    mov r0, #25                              /* Evaluate Expression */
main.L2: 
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P307779967_K: .word K
.P307779967_sortPred: .word sortPred
