SOURCE
int add5(int a) {
	return a + 5;
}

int add10(int a) {
	return a + 10;
}

int foo(int v, func int -> int pr0) {
	return pr0(v);
}

int main(int x, bool add10Or5) {
	func pred = (add10Or5)? add10 : add5;
	return foo(x, pred);
}
TESTCASES
0 0 5
1 0 6
0 1 10
1 1 11
OUTPUT
.version 0

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global add5
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr

.global add10
add10:                                       /* Function: add10 */
    add r0, r0, #10
    bx lr

.global foo
foo:                                         /* Function: foo */
    push { r4, lr }
    mov r4, r1
    add lr, pc, #8
    mov pc, r4
    ldmfd sp!, {r4, pc}

.global main
main:                                        /* Function: main */
    mov r3, r0
    cmp r1, #0
    beq main.L0
    ldr r0, .P50117608_add10
    b main.L1
main.L0: 
    ldr r0, .P50117608_add5
main.L1: 
    mov r1, r0
    mov r0, r3
    b foo                                    /* Call foo */
.P50117608_add5: .word add5
.P50117608_add10: .word add10
