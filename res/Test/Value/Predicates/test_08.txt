SOURCE
bool sortPred(int x, int y) {
	return x < y;
}

struct K {
	func sPred;
}

int main() {
	K k0 = K::(sortPred);
	func sp = (func (int, int) -> bool) k0.sPred;
	
	if (sp(11, 10)) 
		return 12;
	
	return 25;
}
TESTCASES
25
OUTPUT
/* --test_08.txt */
    b main
lambda_sortPred:                             /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
sortPred:                                    /* Function: sortPred */
    cmp r0, r1
    movlt r0, #1
    movge r0, #0
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    add r10, pc, #8                          /* Evaluate Expression */
    b lambda_sortPred
    mov r10, #0
    push { r0 }
    mov r0, #1
    push { r0 }
    ldr r3, [fp, #-4]                        /* Load field from struct */
    mov r1, #10
    mov r0, #11
    add lr, pc, #8
    mov pc, r3
    cmp r0, #0
    beq main.L1
    mov r0, #12                              /* Evaluate Expression */
    b main.L2
main.L1: 
    mov r0, #25                              /* Evaluate Expression */
main.L2: 
    mov sp, fp
    ldmfd sp!, {fp, pc}
    
