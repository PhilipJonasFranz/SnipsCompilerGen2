SOURCE
#include <res\Test\Value\Directives\exclude_mult_x.sn> <dimX = 3, dimY = 3>
#include <res\Test\Value\Directives\exclude_mult_x.sn> <dimX = 4, dimY = 4>

#include<res\Test\Value\Directives\exclude_typed.sn> <T = int>

int* allocMatrix() {
	int* p = (int*) resv(3 * 3);
	for (int i = 0; i < 3; i++) 
		for (int a = 0; a < 3; a++) 
			*(p + (i * 3) + a) = (i * 3) + a;
			
	return p;
}

int main(int x) {
	int* p = allocMatrix();
	int* q = allocMatrix();
	int* mul = __mat_mult_3_3(p, q);
	return get(*(mul + x));
}
TESTCASES
0 30
1 36
2 42
3 84
4 108
5 132
6 138
7 180
8 222
OUTPUT
.version 0

.include maybe resv.s
.include res\Test\Value\Directives\exclude_typed.s
.include res\Test\Value\Directives\exclude_mult_x.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global allocMatrix
allocMatrix:                                 /* Function: allocMatrix */
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r0, #9
    bl resv                                  /* Call resv */
    mov r4, #0
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
allocMatrix.L1: 
    cmp r4, #3
    bge allocMatrix.L2
    mov r5, #0
    mov r0, #0                               /* Evaluate Expression */
allocMatrix.L4: 
    cmp r5, #3
    bge allocMatrix.L5
    mov r2, #3
    mla r0, r4, r2, r5
    mul r2, r4, r2
    add r1, r3, r2
    push { r0 }
    add r0, r1, r5
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r5, r5, #1
    b allocMatrix.L4
allocMatrix.L5: 
    add r4, r4, #1
    b allocMatrix.L1
allocMatrix.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r5, pc}

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    bl allocMatrix                           /* Evaluate Expression */
    mov r4, r0
    bl allocMatrix                           /* Evaluate Expression */
    mov r1, r0
    mov r0, r4
    bl __mat_mult_3_3                        /* Call __mat_mult_3_3 */
    add r0, r0, r3
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    bl get                                   /* Call get */
    pop { pc }
