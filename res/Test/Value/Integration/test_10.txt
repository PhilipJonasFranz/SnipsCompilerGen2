SOURCE
#include <hash.sn>
#include <hash_map.sn>

int main(bool add) {
	HashMap<int, int>* map = HashMap::create<int, int>(10, -1);
	
	/* Hash function will hash the same value here */
	map->put<int, int>(1, 12);
	map->put<int, int>(11, 20);
	
	/* Different hash value */
	map->put<int, int>(2, 30);
	
	map->replace<int, int>(11, 25);
	
	/* Remove key 1 from map, results in -1 value */
	map->remove<int, int>(1);
	
	if (add) 
		return map->get<int, int>(1) + map->get<int, int>(11) + map->get<int, int>(2);
	else
		return map->get<int, int>(1) + map->get<int, int>(11);
}
TESTCASES
1 54
0 24
OUTPUT
/* --test_10.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
    
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L1_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L10: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L1_HEAP_START: .word HEAP_START
    
init_P_4:                                    /* Function: init, Provisos: Map.HashMap<INT,INT> | Map.MapEntry<INT,INT> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #24
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #12]
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #16
    bx lr
    
init_P_5:                                    /* Provisos: List.LinkedList<Map.MapEntry<INT,INT>*> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #5                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #20
    bx lr
    
init_P_6:                                    /* Provisos: List.ListNode<Map.MapEntry<INT,INT>> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #6                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #32
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #24
    bx lr
    
free:                                        /* Function: free */
    sub sp, sp, #12
    stmea sp, {r3, r4, r6}
    mov r3, r0
/* Jump to block head */
    sub r3, r0, #1
/* Load Block Size */
    ldr r4, [r10, r3, lsl #2]                /* Load from address */
/* Store negated block size */
    rsb r0, r4, #0
    str r0, [r10, r3, lsl #2]
    add r6, r3, r4
free.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r6, lsl #2]                /* Load from address */
    cmp r0, #0
    bge free.L2
    ldr r4, [r10, r6, lsl #2]                /* Load from address */
/* Add size to freed block */
    ldr r1, [r10, r3, lsl #2]                /* Load from address */
    add r0, r1, r4
    str r0, [r10, r3, lsl #2]
/* Shift pointer to next block */
    sub r6, r6, r4
    b free.L1
free.L2: 
    ldmfd sp!, {r3, r4, r6}
    bx lr
    
__op_mod:                                    /* Function: __op_mod */
    sub sp, sp, #20
    stmea sp, {r3-r7}
    mov r3, r0
    mov r4, r1
    cmp r0, #0
    bne __op_mod.L0
    mov r0, #0                               /* Evaluate Expression */
    b __op_mod.L14
__op_mod.L0: 
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
    cmp r3, #0
    bge __op_mod.L2
    mov r5, #1
    rsb r3, r3, #0
__op_mod.L2: 
    mov r0, r4                               /* Evaluate Expression */
    mov r6, r4
__op_mod.L5:                                 /* Evaluate condition */
    cmp r6, r3
    bgt __op_mod.L6
    lsl r6, r6, #1
    b __op_mod.L5
__op_mod.L6: 
    mov r0, r3                               /* Evaluate Expression */
    mov r7, r3
__op_mod.L8:                                 /* Evaluate condition */
    cmp r7, r4
    blt __op_mod.L9
    lsr r6, r6, #1
    cmp r6, r7
    bgt __op_mod.L10
    sub r7, r7, r6
__op_mod.L10: 
    b __op_mod.L8
__op_mod.L9: 
    cmp r7, #0
    movne r0, #1
    moveq r0, #0
    adds r1, r5, #0
    movne r1, #1
    cmp r0, #0
    movne r0, r1
    moveq r0, #0
    cmp r0, #0
    beq __op_mod.L12
    sub r7, r4, r7
__op_mod.L12: 
    mov r0, r7                               /* Evaluate Expression */
__op_mod.L14: 
    ldmfd sp!, {r3-r7}
    bx lr
    
Hash.hash:                                   /* Function: Hash.hash */
    sub sp, sp, #20
    stmea sp, {r3-r7}
    mov r3, r0
    mov r4, r1
    ldr r5, .POOL1_LIT_5381                  /* Evaluate Expression */
    mov r6, #0
Hash.hash.L1: 
    cmp r6, r4
    bge Hash.hash.L2
/* Load i-th dataword */
    add r0, r3, r6
    ldr r7, [r10, r0, lsl #2]                /* Load from address */
    lsl r2, r5, #6
    add r0, r7, r2
    lsl r2, r5, #16
    add r1, r0, r2
    sub r5, r1, r5
    add r6, r6, #1
    b Hash.hash.L1
Hash.hash.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r7}
    bx lr
.POOL1_LIT_5381: .word 5381
    
List.LinkedList.add_P_4:                     /* Function: List.LinkedList.add, Provisos: Map.MapEntry<INT,INT> */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3, r4, fp, lr}
    mov fp, sp
    mov r3, r0
/* Initialize the new List Node, set the next pointer to null */
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    push { r0 }
    ldr r0, .POOL2_L0_NULL                   /* Load null address */
    push { r0 }
    mov r0, #1
    push { r0 }
    bl init_P_6                              /* Call init */
    mov r4, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_L0_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #4]                         /* Store value to struct field */
    mov r0, r4                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r4, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    mov sp, fp
    ldmfd sp!, {r3, r4, fp, lr}
    add sp, sp, #16
    bx lr
.POOL2_L0_NULL: .word NULL
    
List.LinkedList.remove_P_1:                  /* Function: List.LinkedList.remove, Provisos: Map.MapEntry<INT,INT>* */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
/* Out of bounds */
    cmp r1, #0
    bge List.LinkedList.remove.L0
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L0: 
    cmp r4, #0
    bne List.LinkedList.remove.L3
/* Remove first element */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L0_NULL                   /* Load null address */
    cmp r0, r1
    ldmfdeq sp!, {r3-r5, pc}
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
/* Only one element in list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    cmp r0, r5
    bne List.LinkedList.remove.L6
    ldr r0, .POOL3_L0_NULL                   /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
List.LinkedList.remove.L6: 
    mov r0, r5                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L3: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
/* Jump to element before element to remove */
List.LinkedList.remove.L10:                  /* Evaluate condition */
    cmp r4, #0
    ble List.LinkedList.remove.L11
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L0_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L13
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L13: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.remove.L10
List.LinkedList.remove.L11: 
/* Out of bounds */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L0_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L16
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L16: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L0_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L19
/* Element to remove is last element in list */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    ldr r0, .POOL3_L0_NULL                   /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L19: 
/* Cut out element and set next pointers */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r3, [r1, #4]                         /* Load field from struct */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    mov r0, r3                               /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r3, [r1, #4]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL3_L0_NULL: .word NULL
    
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: Map.MapEntry<INT,INT>* */
    push { r3, lr }
    mov r3, r0
/* Initialize list, set pointers to null */
    push { r3 }
    mov r0, #0
    ldr r1, .POOL4_L0_NULL                   /* Load null address */
    ldr r2, .POOL4_L0_NULL                   /* Load null address */
    stmfd sp!, {r0-r2}
    mov r0, #2
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL4_L0_NULL: .word NULL
    
Map.tupleKeyMatcher_P_1_1:                   /* Function: Map.tupleKeyMatcher, Provisos: INT, INT */
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    mov r5, #0
Map.tupleKeyMatcher.L1: 
    mov r0, #1
    mov r1, #2
    cmp r5, #2
    bge Map.tupleKeyMatcher.L2
    add r0, r3, r5
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    push { r0 }
    add r0, r4, r5
    ldr r1, [r10, r0, lsl #2]                /* Load from address */
    pop { r0 }
    cmp r0, r1
    beq Map.tupleKeyMatcher.L3
    mov r0, #0                               /* Evaluate Expression */
    b Map.tupleKeyMatcher.L5
Map.tupleKeyMatcher.L3: 
    add r5, r5, #1
    b Map.tupleKeyMatcher.L1
Map.tupleKeyMatcher.L2: 
    mov r0, #1                               /* Evaluate Expression */
Map.tupleKeyMatcher.L5: 
    ldmfd sp!, {r3-r5}
    bx lr
    
Map.HashMap.put_P_1_1:                       /* Function: Map.HashMap.put, Provisos: INT, INT */
    sub sp, sp, #24
    stmea sp, {r3-r6, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    mov r4, r2
/* Compute the hash of the key and limit it to the map size */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r5, r0
/* Load the corresponding linked list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
/* Initialize new list at index */
    ldr r1, .POOL5_L0_NULL                   /* Load null address */
    cmp r6, r1
    bne Map.HashMap.put.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r6, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
Map.HashMap.put.L0: 
/* Initialize the new key/value tuple */
    push { r4 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    mov r0, #3
    push { r0 }
    bl init_P_4                              /* Call init */
    mov r3, r0
/* Store in the list */
    mov r0, r6
    push { r3 }
    bl List.LinkedList.add_P_4               /* Call List.LinkedList.add */
    mov sp, fp
    ldmfd sp!, {r3-r6, fp, pc}
.POOL5_L0_NULL: .word NULL
    
Map.HashMap.replace_P_1_1:                   /* Function: Map.HashMap.replace, Provisos: INT, INT */
    sub sp, sp, #24
    stmea sp, {r3-r6, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    mov r4, r2
/* Compute the hash of the key and limit it to the map size */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r5, r0
/* Load the corresponding linked list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL6_L0_NULL                   /* Load null address */
    cmp r6, r1
    beq Map.HashMap.replace.L0
/* Init tuple for searching */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    mov r0, #3
    push { r0 }
/* Get iterator to go through list */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
/* Iterate through list, check for match */
Map.HashMap.replace.L3:                      /* Evaluate condition */
    ldr r1, .POOL6_L0_NULL                   /* Load null address */
    cmp r3, r1
    beq Map.HashMap.replace.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.replace.L6
/* Reassign value with new tuple */
    push { r4 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    mov r0, #3
    push { r0 }
    bl init_P_4                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    b Map.HashMap.replace.L4
Map.HashMap.replace.L6: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.replace.L3
Map.HashMap.replace.L4: 
    add sp, sp, #16
Map.HashMap.replace.L0: 
    mov sp, fp
    ldmfd sp!, {r3-r6, fp, pc}
.POOL6_L0_NULL: .word NULL
    
Map.HashMap.get_P_1_1:                       /* Function: Map.HashMap.get, Provisos: INT, INT */
    sub sp, sp, #20
    stmea sp, {r3-r5, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
/* Compute the hash of the key and limit it to the map size */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r4, r0
/* Load the corresponding linked list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r4
    ldr r5, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL7_L0_NULL                   /* Load null address */
    cmp r5, r1
    beq Map.HashMap.get.L0
/* Init tuple for searching */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    mov r0, #3
    push { r0 }
/* Get iterator to go through list */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
/* Iterate through list, check for match, and remove */
Map.HashMap.get.L3:                          /* Evaluate condition */
    ldr r1, .POOL7_L0_NULL                   /* Load null address */
    cmp r4, r1
    beq Map.HashMap.get.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.get.L6
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    b Map.HashMap.get.L8
Map.HashMap.get.L6: 
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.get.L3
Map.HashMap.get.L4: 
    add sp, sp, #16
Map.HashMap.get.L0: 
/* No value for key, return default value */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
Map.HashMap.get.L8: 
    mov sp, fp
    ldmfd sp!, {r3-r5, fp, pc}
.POOL7_L0_NULL: .word NULL
    
Map.HashMap.remove_P_1_1:                    /* Function: Map.HashMap.remove, Provisos: INT, INT */
    sub sp, sp, #20
    stmea sp, {r3-r5, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
/* Compute the hash of the key and limit it to the map size */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r4, r0
/* Load the corresponding linked list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r4
    ldr r5, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL8_L0_NULL                   /* Load null address */
    cmp r5, r1
    beq Map.HashMap.remove.L0
/* Init tuple for searching */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    mov r0, #3
    push { r0 }
/* Get iterator to go through list */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    mov r0, #0                               /* Evaluate Expression */
    mov r4, #0
/* Iterate through list, check for match, and remove */
Map.HashMap.remove.L3:                       /* Evaluate condition */
    ldr r1, .POOL8_L0_NULL                   /* Load null address */
    cmp r3, r1
    beq Map.HashMap.remove.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.remove.L6
    mov r0, r5
    mov r1, r4
    bl List.LinkedList.remove_P_1            /* Call List.LinkedList.remove */
    b Map.HashMap.remove.L4
Map.HashMap.remove.L6: 
    mov r0, r4
    add r4, r4, #1
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.remove.L3
Map.HashMap.remove.L4: 
    add sp, sp, #16
Map.HashMap.remove.L0: 
    mov sp, fp
    ldmfd sp!, {r3-r5, fp, pc}
.POOL8_L0_NULL: .word NULL
    
Map.HashMap.create_P_1_1:                    /* Function: Map.HashMap.create, Provisos: INT, INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    bl resv                                  /* Call resv */
    mov r5, r0
/* Initialize storage to null */
    mov r6, #0
Map.HashMap.create.L1: 
    cmp r6, r3
    bge Map.HashMap.create.L2
    ldr r0, .POOL9_L0_NULL                   /* Evaluate Expression */
    push { r0 }
    add r0, r5, r6
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r6, r6, #1
    b Map.HashMap.create.L1
Map.HashMap.create.L2: 
/* Initialize default tuple */
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r6, r0
/* Place default value, skip key and padding */
    add r0, r6, #3
    str r4, [r10, r0, lsl #2]
/* Create the hash map and initialize it */
    push { r6 }
    push { r3 }
    push { r5 }
    mov r0, #4
    push { r0 }
    bl init_P_4                              /* Call init */
    ldmfd sp!, {r3-r6, pc}
.POOL9_L0_NULL: .word NULL
    
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mvn r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r4, r0
/* Hash function will hash the same value here */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #20                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
/* Different hash value */
    mov r0, #30                              /* Load parameters */
    push { r0 }
    mov r0, #2
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
/* Remove key 1 from map, results in -1 value */
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    cmp r3, #0
    beq main.L1
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r5, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r5, r5, r0
    mov r1, #2
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r5, r0
    pop { pc }
main.L1: 
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r5, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r5, r0
    pop { pc }
    
