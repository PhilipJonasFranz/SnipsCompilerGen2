SOURCE
#include <hash.sn>
#include <hash_map.sn>

int main(bool add) {
	HashMap<int, int>* map = HashMap::create<int, int>(10, -1);
	
	/* Hash function will hash the same value here */
	map->put<int, int>(1, 12);
	map->put<int, int>(11, 20);
	
	/* Different hash value */
	map->put<int, int>(2, 30);
	
	map->replace<int, int>(11, 25);
	
	/* Remove key 1 from map, results in -1 value */
	map->remove<int, int>(1);
	
	if (add) 
		return map->get<int, int>(1) + map->get<int, int>(11) + map->get<int, int>(2);
	else
		return map->get<int, int>(1) + map->get<int, int>(11);
}
TESTCASES
1 54
0 24
OUTPUT
.version 38528085301

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s
.include hash_map.s
.include hash.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mvn r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r4, r0
/* Hash function will hash the same value here */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #20                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
/* Different hash value */
    mov r0, #30                              /* Load parameters */
    push { r0 }
    mov r0, #2
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
/* Remove key 1 from map, results in -1 value */
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    cmp r3, #0
    beq main.L1
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r5, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r5, r5, r0
    mov r1, #2
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r5, r0
    pop { pc }
main.L1: 
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r5, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r5, r0
    pop { pc }
