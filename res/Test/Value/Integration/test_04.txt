SOURCE
int sarrus(int [9] m) {
	return (m [0] * m [4] * m [8]) + (m [1] * m [5] * m [6]) + (m [2] * m [3] * m [7]) -
		   (m [6] * m [4] * m [2]) + (m [7] * m [5] * m [0]) + (m [8] * m [3] * m [1]);
}

int main() {
	int [9] m = {3, 6, 2, 
	             0, 3, 8, 
	             1, 0, 4};
	                 
	return sarrus(m);
}
TESTCASES
78
OUTPUT
.version -758459905

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global sarrus
sarrus:                                      /* Function: sarrus */
    ldr r0, [sp]
    ldr r2, [sp, #16]
    mul r0, r0, r2
    ldr r2, [sp, #32]
    mul r1, r0, r2
    ldr r0, [sp, #4]
    ldr r2, [sp, #20]
    mul r0, r0, r2
    ldr r2, [sp, #24]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #8]
    ldr r2, [sp, #12]
    mul r0, r0, r2
    ldr r2, [sp, #28]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #24]
    ldr r2, [sp, #16]
    mul r0, r0, r2
    ldr r2, [sp, #8]
    mul r2, r0, r2
    sub r1, r1, r2
    ldr r0, [sp, #28]
    ldr r2, [sp, #20]
    mul r0, r0, r2
    ldr r2, [sp]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #32]
    ldr r2, [sp, #12]
    mul r0, r0, r2
    ldr r2, [sp, #4]
    mul r2, r0, r2
    add r0, r1, r2
    add sp, sp, #36
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #0
    mov r2, #1
    stmfd sp!, {r0-r2}
    mov r0, #8
    mov r1, #3
    mov r2, #0
    stmfd sp!, {r0-r2}
    mov r0, #2
    mov r1, #6
    mov r2, #3
    stmfd sp!, {r0-r2}
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    bl sarrus                                /* Call sarrus */
    mov sp, fp
    ldmfd sp!, {fp, pc}
