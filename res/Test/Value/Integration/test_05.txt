SOURCE
int det(int [3] [3] m) {
	return (m [0] [0] * m [1] [1] * m [2] [2]) + 
		   (m [0] [1] * m [1] [2] * m [2] [0]) + 
		   (m [0] [2] * m [1] [0] * m [2] [1]) -
		   (m [2] [0] * m [1] [1] * m [0] [2]) - 
		   (m [2] [1] * m [1] [2] * m [0] [0]) - 
		   (m [2] [2] * m [1] [0] * m [0] [1]);
}

int main() {
	int [3] [3] m = {{3, 6, 2}, 
	                 {0, 3, 8}, 
	                 {1, 0, 4}};
	                 
	return det(m);
}
TESTCASES
78
OUTPUT
.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global det
det:                                         /* Function: det */
    ldr r0, [sp]
    ldr r2, [sp, #16]
    mul r0, r0, r2
    ldr r2, [sp, #32]
    mul r1, r0, r2
    ldr r0, [sp, #4]
    ldr r2, [sp, #20]
    mul r0, r0, r2
    ldr r2, [sp, #24]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #8]
    ldr r2, [sp, #12]
    mul r0, r0, r2
    ldr r2, [sp, #28]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #24]
    ldr r2, [sp, #16]
    mul r0, r0, r2
    ldr r2, [sp, #8]
    mul r2, r0, r2
    sub r1, r1, r2
    ldr r0, [sp, #28]
    ldr r2, [sp, #20]
    mul r0, r0, r2
    ldr r2, [sp]
    mul r2, r0, r2
    sub r1, r1, r2
    ldr r0, [sp, #32]
    ldr r2, [sp, #12]
    mul r0, r0, r2
    ldr r2, [sp, #4]
    mul r2, r0, r2
    sub r0, r1, r2
    add sp, sp, #36
    bx lr
    
.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #0
    mov r2, #1
    stmfd sp!, {r0-r2}
    mov r0, #8
    mov r1, #3
    mov r2, #0
    stmfd sp!, {r0-r2}
    mov r0, #2
    mov r1, #6
    mov r2, #3
    stmfd sp!, {r0-r2}
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    bl det                                   /* Call det */
    mov sp, fp
    ldmfd sp!, {fp, pc}
