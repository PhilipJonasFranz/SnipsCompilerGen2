SOURCE
#include<linked_list.sn>

namespace GameObject {
	namespace Items {
		struct Inventory {
			int* start;
		}
		
		void set(Inventory* inv, int i, int val) {
			int* start = inv->start;
			*(start + i) = val;
		}
		
		int get(Inventory* inv, int i) {
			int* start = inv->start;
			return *(start + i);
		}
	}
	
	struct Player {
		int posX;
		int posY;
		Inventory* inv;
	}
}

namespace Util {
	/* A tuple containing two different value types */
	struct Tuple2<K, V> {
		K k;
		V v;
	}

	/* A contianer containing a value */
	struct Container<T> {
		T value;
	}
}

/* Inital Player data */
int [2] arr = {5, 8};

int main() {
	/* Initialize Inventory with size 10 */
	Inventory* inv = (Inventory*) resv(sizeof(Inventory));
	*inv = Inventory::((int*) resv(10));
	
	/* Initialize Player Object */
	Player* player = (Player*) resv(sizeof(Player));
	*player = Player::(arr [0], arr [1], inv);	

	Tuple2<int, int> point = Tuple2<int, int>::(player->posX, player->posY);

	Tuple2<Tuple2<int, int>, bool> tup = Tuple2<Tuple2<int, int>, bool>::(Tuple2<int, int>::(1, 3), true);
	
	Container<int> con = Container<int>::(tup.k.k + tup.k.v + (int) tup.v);
	Tuple2<Player*, Container<int>> sc = Tuple2<Player*, Container<int>>::(player, con);

	/* Set item at index 1 to 5 */
	GameObject::Items::set(player->inv, 1, con.value);

	LinkedList<int>* list = create<>(0);
	
	list->add<>(point.k);
	list->add<>(point.v);

	list->remove(0);
	
	return GameObject::Items::get(sc.k->inv, 1) + list->get<>(0) + sc.v.value;
}
TESTCASES
18
OUTPUT
.version 61389883627

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s
.include linked_list.s

.data
Util.Container_P_1: .word 0
Util.Tuple2_P_1_1: .word 0
Util.Tuple2_P_3_1: .word 0
Util.Tuple2_P_1_2: .word 0
GameObject.Player: .word 0
GameObject.Items.Inventory: .word 0
NULL: .word 0
HEAP_START: .word 0
arr: .skip 8

.text
    b main_init

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global GameObject.Items.set
GameObject.Items.set:                        /* Function: GameObject.Items.set */
    push { r4, r6 }
    mov r4, r1
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    add r0, r6, r4
    str r2, [r10, r0, lsl #2]
    ldmfd sp!, {r4, r6}
    bx lr

.global GameObject.Items.get
GameObject.Items.get:                        /* Function: GameObject.Items.get */
    push { r4, r5 }
    mov r4, r1
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    add r0, r5, r4
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    ldmfd sp!, {r4, r5}
    bx lr

/* A tuple containing two different value types */

/* A contianer containing a value */

/* Inital Player data */

.global main

/* Initialize the global variables */
main_init: 
    sub sp, sp, #12
    stmea sp, {r0-r2}
    mov r0, #8
    mov r1, #5
    stmfd sp!, {r0, r1}
    pop { r0 }
    ldr r1, .P1008736838_arr                 /* Load from .data section */
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    ldmfd sp!, {r0-r2}
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
/* Initialize Inventory with size 10 */
    mov r0, #2                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    mov r0, #10                              /* Evaluate Expression */
    bl resv                                  /* Call resv */
    push { r0 }
    ldr r0, .P1008736838_GameObject.Items.Inventory
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
/* Initialize Player Object */
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r4, r0
    push { r3 }
    ldr r0, .P1008736838_arr                 /* Load data section address */
    ldr r0, [r0, #4]
    push { r0 }
    ldr r0, .P1008736838_arr                 /* Load data section address */
    ldr r0, [r0]
    push { r0 }
    ldr r0, .P1008736838_GameObject.Player
    lsl r1, r4, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    push { r0 }
    ldr r0, .P1008736838_Util.Tuple2_P_1_1
    push { r0 }
    mov r0, #1                               /* Evaluate Expression */
    push { r0 }
    mov r0, #3
    mov r1, #1
    ldr r2, .P1008736838_Util.Tuple2_P_1_1
    stmfd sp!, {r0-r2}
    ldr r0, .P1008736838_Util.Tuple2_P_3_1
    push { r0 }
    ldr r0, [fp, #-24]                       /* Load field from struct */
    ldr r2, [fp, #-20]                       /* Load field from struct */
    add r0, r0, r2
    ldr r2, [fp, #-16]                       /* Load field from struct */
    add r0, r0, r2
    push { r0 }
    ldr r0, .P1008736838_Util.Container_P_1
    push { r0 }
    ldr r0, [fp, #-36]                       /* Evaluate Expression */
    ldr r1, [fp, #-40]
    stmfd sp!, {r0, r1}
    push { r4 }
    ldr r0, .P1008736838_Util.Tuple2_P_1_2
    push { r0 }
/* Set item at index 1 to 5 */
    ldr r0, [fp, #-36]                       /* Load field from struct */
    push { r0 }
    mov r0, #1
    push { r0 }
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    ldmfd sp!, {r1, r2}
    bl GameObject.Items.set                  /* Call GameObject.Items.set */
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r3, r0
    ldr r1, [fp, #-8]                        /* Load field from struct */
    mov r0, r3
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    ldr r1, [fp, #-4]                        /* Load field from struct */
    mov r0, r3
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #0
    mov r0, r3
    bl List.LinkedList.remove_P_1            /* Call List.LinkedList.remove */
    mov r0, #1                               /* Evaluate Expression */
    push { r0 }
    ldr r1, [fp, #-52]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { r1 }
    bl GameObject.Items.get                  /* Call GameObject.Items.get */
    mov r4, r0
    mov r1, #0
    mov r0, r3
    bl List.LinkedList.get_P_1               /* Call List.LinkedList.get */
    add r0, r4, r0
    ldr r2, [fp, #-44]                       /* Load field from struct */
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P1008736838_Util.Tuple2_P_1_2: .word Util.Tuple2_P_1_2
.P1008736838_Util.Container_P_1: .word Util.Container_P_1
.P1008736838_Util.Tuple2_P_3_1: .word Util.Tuple2_P_3_1
.P1008736838_Util.Tuple2_P_1_1: .word Util.Tuple2_P_1_1
.P1008736838_GameObject.Player: .word GameObject.Player
.P1008736838_GameObject.Items.Inventory: .word GameObject.Items.Inventory
.P1008736838_arr: .word arr
