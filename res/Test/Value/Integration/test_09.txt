SOURCE
#include<queue.sn>

int main() {
	CyclicQueue<int[2]>* q = CyclicQueue::create<int[2]>(3, {0, 0});
	
	q->enqueue<int [2]>({3, 4});
	q->enqueue<int [2]>({9, 3});
		
	q->dequeue<int [2]>();
	
	int [2] r = q->dequeue<int [2]>();
	
	q->destroy();
	
	return r [0] + r [1];
}
TESTCASES
12
OUTPUT
/* --test_09.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
/* Frees the memory block the given pointer points to. The pointer object will keep */
/* the memory address, but the memory block will not be registered to be used anymore and */
/* thus can be overwritten. */
free:                                        /* Function: free */
    sub sp, sp, #12
    stmea sp, {r3, r4, r6}
    mov r3, r0
/* Jump to block head */
    sub r3, r0, #1
/* Load Block Size */
    ldr r4, [r10, r3, lsl #2]                /* Load from address */
/* Store negated block size */
    rsb r0, r4, #0
    str r0, [r10, r3, lsl #2]
    add r6, r3, r4
free.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r6, lsl #2]                /* Load from address */
    cmp r0, #0
    bge free.L2
    ldr r4, [r10, r6, lsl #2]                /* Load from address */
/* Add size to freed block */
    ldr r1, [r10, r3, lsl #2]                /* Load from address */
    add r0, r1, r4
    str r0, [r10, r3, lsl #2]
/* Shift pointer to next block */
    sub r6, r6, r4
    b free.L1
free.L2: 
    ldmfd sp!, {r3, r4, r6}
    bx lr
    
__op_mod:                                    /* Function: __op_mod */
    sub sp, sp, #20
    stmea sp, {r3-r7}
    mov r3, r0
    mov r4, r1
    cmp r0, #0
    bne __op_mod.L0
    mov r0, #0                               /* Evaluate Expression */
    b __op_mod.L14
__op_mod.L0: 
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
    cmp r3, #0
    bge __op_mod.L2
    mov r5, #1
    rsb r3, r3, #0
__op_mod.L2: 
    mov r0, r4                               /* Evaluate Expression */
    mov r6, r4
__op_mod.L5:                                 /* Evaluate condition */
    cmp r6, r3
    bgt __op_mod.L6
    lsl r6, r6, #1
    b __op_mod.L5
__op_mod.L6: 
    mov r0, r3                               /* Evaluate Expression */
    mov r7, r3
__op_mod.L8:                                 /* Evaluate condition */
    cmp r7, r4
    blt __op_mod.L9
    lsr r6, r6, #1
    cmp r6, r7
    bgt __op_mod.L10
    sub r7, r7, r6
__op_mod.L10: 
    b __op_mod.L8
__op_mod.L9: 
    cmp r7, #0
    movne r0, #1
    moveq r0, #0
    adds r1, r5, #0
    movne r1, #1
    cmp r0, #0
    movne r0, r1
    moveq r0, #0
    cmp r0, #0
    beq __op_mod.L13
    sub r7, r4, r7
__op_mod.L13: 
    mov r0, r7                               /* Evaluate Expression */
__op_mod.L14: 
    ldmfd sp!, {r3-r7}
    bx lr
    
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L5_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L5_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P1:                                     /* Function: init, Provisos: Queue.CyclicQueue<INT[2]> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #8                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #40
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    pop { r0 }
    str r0, [r1, #24]
    pop { r0 }
    str r0, [r1, #28]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #32
    bx lr
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the utility to create and use */
/* a circular queue. */
/* The cyclic queue capsules a pointer to a storage location for */
/* the contained values, indexes for the head and tail, as well as the */
/* maximum size of the queue. Finally the queue has a isEmpty flag, */
/* that is used to determine wether the queue is full or empty when */
/* the head index is the same as the tail index. */
Queue.CyclicQueue.destroy_P4:                /* Function: Queue.CyclicQueue.destroy, Provisos: INT[2] */
    push { r3, lr }
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    mov r0, r3                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3, pc}
    
Queue.CyclicQueue.enqueue_P2:                /* Function: Queue.CyclicQueue.enqueue, Provisos: INT[2] */
    sub sp, sp, #16
    stmea sp, {r3, r4, fp, lr}
    mov fp, sp
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #20]                        /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #24]                        /* Load field from struct */
    cmp r0, r1
    moveq r0, #1
    movne r0, #0
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r0, [r1, #28]                        /* Load field from struct */
    cmp r0, #0
    moveq r0, #1
    movne r0, #0
    mov r1, r0
    pop { r0 }
    adds r1, r1, #0
    movne r1, #1
    cmp r0, #0
    movne r0, r1
    moveq r0, #0
    cmp r0, #0
    beq Queue.CyclicQueue.enqueue.L0
/* Queue is full */
    b Queue.CyclicQueue.enqueue.L2
Queue.CyclicQueue.enqueue.L0: 
/* Calculate word offset to the storage location based on the */
/* Size of the proviso type and the head index */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #20]                        /* Load field from struct */
    lsl r4, r0, #1
/* Write value */
    ldr r0, [fp, #20]                        /* Evaluate Expression */
    ldr r1, [fp, #16]
    stmfd sp!, {r0, r1}
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r4
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
/* Increment head index */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #20]                        /* Load field from struct */
    add r0, r1, #1
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #20]                        /* Store value to struct field */
/* Set is empty flag and return */
    mov r0, #0                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #28]                        /* Store value to struct field */
Queue.CyclicQueue.enqueue.L2: 
    mov sp, fp
    ldmfd sp!, {r3, r4, fp, lr}
    add sp, sp, #8
    bx lr
    
Queue.CyclicQueue.dequeue_P3:                /* Function: Queue.CyclicQueue.dequeue, Provisos: INT[2] */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #28]                        /* Load field from struct */
    cmp r0, #0
    beq Queue.CyclicQueue.dequeue.L0
/* Queue is empty, return a default value. */
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #8
    ldr r0, [r1, #4]
    ldr r2, [r1]
    stmfd sp!, {r0, r2}
    b Queue.CyclicQueue.dequeue.L4
Queue.CyclicQueue.dequeue.L0: 
/* Read value from tail */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r0, [r1, #24]                        /* Load field from struct */
    pop { r1 }
    lsl r2, r0, #1
    add r0, r1, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]
    push { r0 }
    ldr r0, [r1]
/* Increment tail */
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r0, [r1, #16]                        /* Load field from struct */
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #24]                        /* Load field from struct */
    add r0, r1, #1
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #24]                        /* Store value to struct field */
/* If tail now is equal to head the queue must be empty */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #24]                        /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #20]                        /* Load field from struct */
    cmp r0, r1
    bne Queue.CyclicQueue.dequeue.L2
    mov r0, #1                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #28]                        /* Store value to struct field */
Queue.CyclicQueue.dequeue.L2: 
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    stmfd sp!, {r0, r1}
Queue.CyclicQueue.dequeue.L4: 
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
Queue.CyclicQueue.create_P0:                 /* Function: Queue.CyclicQueue.create, Provisos: INT[2] */
    sub sp, sp, #16
    stmea sp, {r3, r4, fp, lr}
    mov fp, sp
    mov r3, r0
/* Allocate memory for storage of given size */
    mov r0, #2                               /* Evaluate Expression */
    mul r0, r0, r3
    bl resv                                  /* Call resv */
    mov r4, r0
/* Initialize, set start values */
    mov r0, #1                               /* Evaluate Expression */
    mov r1, #0
    mov r2, #0
    stmfd sp!, {r0-r2}
    push { r3 }
    ldr r0, [fp, #20]
    ldr r1, [fp, #16]
    stmfd sp!, {r0, r1}
    push { r4 }
    mov r0, #1
    push { r0 }
    bl init_P1                               /* Call init */
    mov sp, fp
    ldmfd sp!, {r3, r4, fp, lr}
    add sp, sp, #8
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #0                               /* Evaluate Expression */
    mov r1, #0
    stmfd sp!, {r0, r1}
    mov r0, #3
    bl Queue.CyclicQueue.create_P0           /* Call Queue.CyclicQueue.create */
    mov r3, r0
    mov r0, #4                               /* Load parameters */
    mov r1, #3
    stmfd sp!, {r0, r1}
    mov r0, r3
    bl Queue.CyclicQueue.enqueue_P2          /* Call Queue.CyclicQueue.enqueue */
    mov r0, #3                               /* Load parameters */
    mov r1, #9
    stmfd sp!, {r0, r1}
    mov r0, r3
    bl Queue.CyclicQueue.enqueue_P2          /* Call Queue.CyclicQueue.enqueue */
    mov r0, r3                               /* Load parameters */
    bl Queue.CyclicQueue.dequeue_P3          /* Call Queue.CyclicQueue.dequeue */
    add sp, sp, #8
    mov r0, r3                               /* Evaluate Expression */
    bl Queue.CyclicQueue.dequeue_P3          /* Call Queue.CyclicQueue.dequeue */
    mov r0, r3                               /* Load parameters */
    bl Queue.CyclicQueue.destroy_P4          /* Call Queue.CyclicQueue.destroy */
    ldr r0, [fp, #-8]
    ldr r2, [fp, #-4]
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
    
