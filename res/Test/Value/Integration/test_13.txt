SOURCE
#include <collection.sn>
#include <linked_list.hn>
#include <object.hn>

int globalVar = 25;

struct X {
	int x0;
}

int foo() {
	return globalVar << 1;
}

struct Y : X {
	int y0;
}

namespace ZBase {
	restricted struct Z : Object {
		
		int member;
		
		int getMember() {
			return self->member;
		}
		
		shared bool equals(Object* object) {
			if (!isar(object, idof(Z))) return false;
			else {
				Z* z0 = (Z*) object;
				return z0->getMember() == self->getMember();
			}
		}
		
		static Z* create(int member) {
			return init<>(Z::(super(), member));
		}
		
	}
}

int main() {
	LinkedList<int>* list = LinkedList::create<int>(0);
	
	Collection<int> col = list;
	
	col.add(12);
	col.add(15);
	
	list->reverse();
	col.remove(0);
	
	LinkedList<int [2]>* list0 = LinkedList::create<int [2]>({0, 0});
	
	Collection<int [2]> col0 = list0;
	
	col0.add({5, 8});
	
	Y y0 = Y::(12, 15);
	
	int size = col.size();
	
	Z* z0 = Z::create(16);
	Z* z1 = Z::create(16);
	
	Object* obj = init<>(Object::create());
	
	int comp = 0; // 7
	
	if (z0->equals(z1)) comp += 7;
	if (z0->equals(obj)) comp += 5;
	
	z1->member = 25;
	
	if (z0->equals(z1)) comp += 10;
	
	return (int) isar(&y0, idof(X)) + foo() + col.get(0) + size + comp;
}

TESTCASES
71
OUTPUT
.version 0

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe free.s
.include object.s
.include linked_list.s
.include collection.s

.data
ZBase.Z: .word ObjectBase.Object
ZBase.Z_vrelay: .word ZBase.Z_vtable
Y: .word X
Y_vrelay: .word 0
X: .word 0
X_vrelay: .word 0
globalVar: .word 25
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global foo
foo:                                         /* Function: foo */
    mov r0, #50                              /* Evaluate Expression */
    bx lr

ZBase.Z_vtable:                              /* VTable for ZBase.Z */
    mov r12, #0
    add pc, pc, r10
    add r10, r10, r10                        /* Function 'ZBase.Z.toString' not called */
    b ZBase.Z.getMember
    b ZBase.Z.equals
    b ZBase.Z.create

.global ZBase.Z.toString
ZBase.Z.toString: 
    b ObjectBase.Object.toString             /* Relay to inherited ObjectBase.Object.toString */

.global ZBase.Z.getMember
ZBase.Z.getMember:                           /* Function: ZBase.Z.getMember */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bx lr

.global ZBase.Z.equals
ZBase.Z.equals:                              /* Function: ZBase.Z.equals */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3, r4, r6, lr}
    mov r4, r1
    mov r3, r0
    ldr r1, .P264378912_ZBase.Z              /* Load parameters */
    mov r0, r4
    bl isar                                  /* Call isar */
    cmp r0, #0
    moveq r0, #1
    movne r0, #0
    cmp r0, #0
    beq ZBase.Z.equals.L1
    mov r0, #0                               /* Evaluate Expression */
    ldmfd sp!, {r3, r4, r6, pc}
ZBase.Z.equals.L1: 
    mov r0, r4                               /* Evaluate Expression */
    bl ZBase.Z.getMember                     /* Call ZBase.Z.getMember */
    mov r6, r0
    mov r0, r3                               /* Load parameters */
    bl ZBase.Z.getMember                     /* Call ZBase.Z.getMember */
    cmp r6, r0
    moveq r0, #1
    movne r0, #0
    ldmfd sp!, {r3, r4, r6, pc}
.P264378912_ZBase.Z: .word ZBase.Z

.global ZBase.Z.create
ZBase.Z.create:                              /* Function: ZBase.Z.create */
    mov r10, #0
    push { lr }
    push { r0 }
    bl ObjectBase.Object.create              /* Call ObjectBase.Object.create */
    add sp, sp, #4
    ldr r0, .P264378911_ZBase.Z
    push { r0 }
    bl init_P_4                              /* Call init */
    pop { pc }
.P264378911_ZBase.Z: .word ZBase.Z

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r12, #12                             /* Offset to Collection.add */
    mov r4, r0
    mov r3, r0
    mov r1, #12
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r12, #12                             /* Offset to Collection.add */
    mov r1, #15
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r0, r3                               /* Load parameters */
    bl List.LinkedList.reverse_P_1           /* Call List.LinkedList.reverse */
    mov r12, #16                             /* Offset to Collection.remove */
    mov r1, #0
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r1, #0
    mov r0, #0                               /* Evaluate Expression */
    stmfd sp!, {r0, r1}
    bl List.LinkedList.create_P_2            /* Call List.LinkedList.create */
    mov r6, r0
    mov r1, #5
    mov r0, #8                               /* Load parameters */
    stmfd sp!, {r0, r1}
    mov r12, #12                             /* Offset to Collection.add */
    mov r0, r6
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_2
    add lr, pc, #8
    mov pc, r12
    mov r1, #12
    mov r0, #15                              /* Evaluate Expression */
    stmfd sp!, {r0, r1}
    ldr r0, .P264378910_Y
    push { r0 }
    mov r12, #0                              /* Offset to Collection.size */
    mov r0, r4                               /* Evaluate Expression */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r7, r0
    mov r0, #16                              /* Evaluate Expression */
    bl ZBase.Z.create                        /* Call ZBase.Z.create */
    mov r8, r0
    mov r0, #16                              /* Evaluate Expression */
    bl ZBase.Z.create                        /* Call ZBase.Z.create */
    mov r9, r0
    bl ObjectBase.Object.create              /* Evaluate Expression */
    bl init_P_3                              /* Call init */
/* 7 */
    mov r1, r9
    push { r0 }
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    mov r0, r8
    bl ZBase.Z.equals                        /* Call ZBase.Z.equals */
    cmp r0, #0
    beq main.L0
    mov r0, #7                               /* Evaluate Expression */
    str r0, [fp, #-20]
main.L0: 
    ldr r1, [fp, #-16]                       /* Load parameters */
    mov r0, r8
    bl ZBase.Z.equals                        /* Call ZBase.Z.equals */
    cmp r0, #0
    beq main.L2
    ldr r1, [fp, #-20]                       /* Evaluate Expression */
    add r0, r1, #5
    str r0, [fp, #-20]
main.L2: 
    lsl r1, r9, #2                           /* Convert to bytes */
    mov r0, #25                              /* Evaluate Expression */
    str r0, [r1, #12]                        /* Store value to struct field */
    mov r1, r9
    mov r0, r8
    bl ZBase.Z.equals                        /* Call ZBase.Z.equals */
    cmp r0, #0
    beq main.L4
    ldr r1, [fp, #-20]                       /* Evaluate Expression */
    add r0, r1, #10
    str r0, [fp, #-20]
main.L4: 
    ldr r1, .P264378910_X                    /* Evaluate Expression */
    sub r0, fp, #12
    lsr r0, r0, #2
    bl isar                                  /* Call isar */
    push { r0 }
    bl foo                                   /* Call foo */
    pop { r1 }
    mov r12, #4                              /* Offset to Collection.get */
    add r0, r1, r0
    mov r1, #0
    push { r0 }
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P264378910_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    pop { r1 }
    add r1, r1, r0
    add r1, r1, r7
    ldr r2, [fp, #-20]
    add r0, r1, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P264378910_X: .word X
.P264378910_Y: .word Y
.P264378910_Collection_P_2: .word Collection_P_2
.P264378910_Collection_P_1: .word Collection_P_1

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

