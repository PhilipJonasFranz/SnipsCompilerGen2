SOURCE
namespace Test {
	
	exclusive struct S {
		int x;
		int y;
	}
	
	shared S getter() {
		return S::(10, 5);
	}
	
}

int main() {
	S s = Test::getter();
	return s.x + s.y;
}
TESTCASES
15
OUTPUT
.version 6304365014

.data
Test.S: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global Test.getter
Test.getter:                                 /* Function: Test.getter */
    push { fp }
    mov fp, sp
    mov r0, #5                               /* Evaluate Expression */
    mov r1, #10
    stmfd sp!, {r0, r1}
    ldr r0, .P1892863495_Test.S
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #12
    add r1, r2, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1892863495_Test.S: .word Test.S

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    bl Test.getter                           /* Evaluate Expression */
    ldr r0, [fp, #-8]                        /* Load field from struct */
    ldr r2, [fp, #-4]                        /* Load field from struct */
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

