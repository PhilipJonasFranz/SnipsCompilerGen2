SOURCE
namespace Data {
	struct X {
	
		int val;
		
		/*
		 * Creates a new instance of X.
		 */
		static X create(int val) {
			return X::(val);
		}
	
	}
}

int main() {
	X x = X::create(15);
	return x.val;
}
TESTCASES
15
OUTPUT
.version 11376588957

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Data.X: .word 0
lambda_Data.X.create: .word Data.X.create
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global Data.X.create
Data.X.create:                               /* Function: Data.X.create */
    push { fp }
    mov fp, sp
    push { r0 }
    ldr r0, .P1835605193_Data.X
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1835605193_Data.X: .word Data.X

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #15                              /* Evaluate Expression */
    bl Data.X.create                         /* Call Data.X.create */
    ldr r0, [fp, #-4]                        /* Load field from struct */
    mov sp, fp
    ldmfd sp!, {fp, pc}
