SOURCE
#include<collection.sn>
#include<linked_list.sn>

int getSum(Collection<int> it) {
	int size = it.size();
	
	int s = 0;
	for (int i = 0; i < size; i++) 
		s += it.get<int>(i);
		
	return s;
}

int main(bool b) {
	LinkedList<int>* l = LinkedList::create<int>(0);
	
	l->add<int>(15);
	l->add<int>(6);
	l->add<int>(2);
	
	Collection<int> it = l;
	
	it.set<int>(1, 9);
	
	return getSum(it);
}
TESTCASES
26
OUTPUT
.data
List.LinkedList: .word 0
List.ListNode: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global List.LinkedList.add_P_1
    
    add r10, r12, #4
    
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P_1
    b List.LinkedList.get_P_1
    b List.LinkedList.set_P_1
    b List.LinkedList.add_P_1
    add r10, r10, r10                        /* Function was not called, use as placeholder */
    
List.LinkedList.add_P_1:                     /* Function: List.LinkedList.add, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    push { r4 }
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Load null address */
    push { r0 }
    ldr r0, .POOL@1321795593_0_List.ListNode
    push { r0 }
    bl init_P_3                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    ldmfd sp!, {r3-r5, pc}
    
.global List.LinkedList.get_P_1
List.LinkedList.get_P_1:                     /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
    
.global List.LinkedList.set_P_1
List.LinkedList.set_P_1:                     /* Function: List.LinkedList.set, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r4-r6}
    mov r4, r1
    mov r5, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
List.LinkedList.set.L1:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.set.L2
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.set.L3
    b List.LinkedList.set.L5
List.LinkedList.set.L3: 
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.set.L1
List.LinkedList.set.L2: 
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.set.L5: 
    ldmfd sp!, {r4-r6}
    bx lr
    
.global List.LinkedList.size_P_1
List.LinkedList.size_P_1:                    /* Function: List.LinkedList.size, Provisos: INT */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bx lr
    
.global List.LinkedList.create_P_1
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    mov r0, #0
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    ldr r2, .POOL@1321795593_0_L1_NULL       /* Load null address */
    stmfd sp!, {r0-r2}
    ldr r0, .POOL@1321795593_0_List.LinkedList
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL@1321795593_0_List.LinkedList: .word List.LinkedList
.POOL@1321795593_0_List.ListNode: .word List.ListNode
.POOL@1321795593_0_L1_NULL: .word NULL

    add r10, r12, #4
    
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P_1
    b List.LinkedList.get_P_1
    b List.LinkedList.set_P_1
    b List.LinkedList.add_P_1
    add r10, r10, r10                        /* Function was not called, use as placeholder */
    
.global getSum
getSum:                                      /* Function: getSum */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    bl Collection.L0_P_1                     /* Branch to relay table of Collection */
    mov r4, r0
    mov r5, #0
    mov r6, #0
getSum.L1: 
    cmp r6, r4
    bge getSum.L2
    mov r0, r3
    mov r1, r6
    mov r12, #4
    bl Collection.L0_P_1                     /* Branch to relay table of Collection */
    add r5, r5, r0
    add r6, r6, #1
    b getSum.L1
getSum.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #15
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #6
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #2
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r5, r4
    mov r0, #9                               /* Load parameters */
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    mov r12, #8
    bl Collection.L0_P_1                     /* Branch to relay table of Collection */
    mov r0, r5                               /* Evaluate Expression */
    bl getSum                                /* Call getSum */
    pop { pc }
