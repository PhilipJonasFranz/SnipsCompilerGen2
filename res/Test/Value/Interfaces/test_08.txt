SOURCE
#include<linked_list.sn>

int getSum(Iterable<int> it) {
	int size = it.size();
	
	int s = 0;
	for (int i = 0; i < size; i++) 
		s += it.get<int>(i);
		
	return s;
}

int main(bool b) {
	LinkedList<int>* l = LinkedList::create<int>(0);
	
	l->add<int>(15);
	l->add<int>(6);
	l->add<int>(2);
	
	Iterable<int> it = l;
	
	it.set<int>(1, 9);
	
	return getSum(it);
}
TESTCASES
26
OUTPUT
/* --test_08.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L13_HEAP_START            /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #1
    bne resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L13_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P7:                                     /* Function: init, Provisos: List.LinkedList<INT> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #24
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #12]
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #16
    bx lr
    
init_P9:                                     /* Provisos: List.ListNode<INT> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #12
    bx lr
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the interface definition for an iterable struct. */
/* The interface creates data access and exchange points, so data can be */
/* read and written. */
free.L0_P1:                                  /* Interface : Iterable, Provisos: INT,  */
    add r10, r12, #4
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P3
    b List.LinkedList.get_P4
    b List.LinkedList.set_P10
    
/* [BASE-PACKAGE] */
/*  */
/* Using the serializable interface, structs can be converted */
/* into string format. */
/* This package contains the utility to create a linked-list, */
/* insert and remove values from it, as well as some functions */
/* that give information about the state of the list. */
/* A single list entry, contains a pointer to the next node */
/* and a value. */
/* Wraps the list head and tail. */
List.LinkedList.add_P8:                      /* Function: List.LinkedList.add, Provisos: INT */
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
/* Initialize the new List Node, set the next pointer to null */
    push { r4 }
    ldr r0, .POOL1_L12_NULL                  /* Load null address */
    push { r0 }
    mov r0, #1
    push { r0 }
    bl init_P9                               /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL1_L12_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL1_L12_NULL: .word NULL
    
List.LinkedList.get_P4:                      /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_L12_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
/* Jump to next */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
.POOL2_L12_NULL: .word NULL
    
List.LinkedList.set_P10:                     /* Function: List.LinkedList.set, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r4-r6}
    mov r4, r1
    mov r5, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
List.LinkedList.set.L1:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.set.L2
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L12_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.set.L3
    b List.LinkedList.set.L5
List.LinkedList.set.L3: 
/* Jump to next */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.set.L1
List.LinkedList.set.L2: 
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.set.L5: 
    ldmfd sp!, {r4-r6}
    bx lr
.POOL3_L12_NULL: .word NULL
    
List.LinkedList.size_P3:                     /* Function: List.LinkedList.size, Provisos: INT */
    mov r10, #0
    push { r3, r4 }
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    mov r0, #0                               /* Evaluate Expression */
    mov r3, #0
List.LinkedList.size.L1:                     /* Evaluate condition */
    ldr r1, .POOL4_L12_NULL                  /* Load null address */
    cmp r4, r1
    beq List.LinkedList.size.L2
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    mov r0, r3
    add r3, r3, #1
    b List.LinkedList.size.L1
List.LinkedList.size.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3, r4}
    bx lr
.POOL4_L12_NULL: .word NULL
    
List.LinkedList.deserialize:                 /* Function: List.LinkedList.deserialize */
    mov r10, #0
    ldr r0, .POOL5_L12_NULL                  /* Evaluate Expression */
    bx lr
.POOL5_L12_NULL: .word NULL
    
List.LinkedList.create_P6:                   /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
/* Initialize list, set pointers to null */
    push { r3 }
    ldr r0, .POOL6_L12_NULL                  /* Load null address */
    ldr r1, .POOL6_L12_NULL                  /* Load null address */
    stmfd sp!, {r0, r1}
    mov r0, #2
    push { r0 }
    bl init_P7                               /* Call init */
    ldmfd sp!, {r3, pc}
.POOL6_L12_NULL: .word NULL
    
getSum:                                      /* Function: getSum */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    bl free.L0_P1                            /* Branch to relay table of Iterable */
    mov r4, r0
    mov r5, #0
    mov r6, #0
getSum.L1: 
    cmp r6, r4
    bge getSum.L2
    mov r0, r3
    mov r1, r6
    mov r12, #4
    bl free.L0_P1                            /* Branch to relay table of Iterable */
    add r5, r5, r0
    add r6, r6, #1
    b getSum.L1
getSum.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
    
main:                                        /* Function: main */
    push { lr }
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P6             /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #15
    mov r0, r4
    bl List.LinkedList.add_P8                /* Call List.LinkedList.add */
    mov r1, #6
    mov r0, r4
    bl List.LinkedList.add_P8                /* Call List.LinkedList.add */
    mov r1, #2
    mov r0, r4
    bl List.LinkedList.add_P8                /* Call List.LinkedList.add */
    mov r5, r4
    mov r0, #9                               /* Load parameters */
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    mov r12, #8
    bl free.L0_P1                            /* Branch to relay table of Iterable */
    mov r0, r5                               /* Evaluate Expression */
    bl getSum                                /* Call getSum */
    pop { pc }
    
