SOURCE
namespace List {

	interface Iterable<Z> {

		int size<Z>();
		
		Z get<Z>(int index);

	}

	restricted struct ListNode<T> {
		ListNode<T>* next;
		T value;
	}
	
	shared struct LinkedList<T> : Iterable<T> {
		ListNode<T>* head;
		ListNode<T>* tail;
		T defValue;
		
		shared void add<T>(T x) {
			ListNode<T>* n = init<>(ListNode<T>::(null, x));
		
			if (self->head == null) {
				self->head = n;
				self->tail = n;
			}
			else {
				self->tail->next = n;
				self->tail = n;
			}	
		}
		
		shared T get<T>(int i) {
			if (i < 0) return self->defValue;
		
			ListNode<T>* n = self->head;
			while (i != 0) {
				if (n->next == null) return self->defValue;
				
				n = n->next;
				i--;
			}
			
			return n->value;	
		}
		
		shared int size<T:void>() {
			ListNode<void>* n = self->head;
			int size = 0;
			while (n != null) {
				n = n->next;
				size++;
			}
			return size;
		}
		
	}
} 

int main() {
	LinkedList<int> l = LinkedList<int>::(null, null, 0);
	
	l.add<int>(12);
	l.add<int>(4);
	l.add<int>(9);
	
	Iterable<int> it = &l;
	
	int size = it.size();
	
	int s = 0;
	for (int i = 0; i < size; i++) 
		s += it.get(i);
	
	return s;
}
TESTCASES
25
OUTPUT
/* --test_05.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_@2.L8_HEAP_START          /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #0
    beq resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L10: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_@2.L8_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P2:                                     /* Function: init, Provisos: List.ListNode<INT> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #12
    bx lr
    
List.Iterable@7.L2_P0:                       /* Interface : List.Iterable, Provisos: INT,  */
    add r10, r12, #4
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size@4_P4
    b List.LinkedList.get@3_P6
    
List.LinkedList.add@2_P1:                    /* Function: List.LinkedList.add, Provisos: INT */
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    push { r4 }
    ldr r0, .POOL1_@2.L7_NULL                /* Load null address */
    push { r0 }
    mov r0, #1
    push { r0 }
    bl init_P2                               /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL1_@2.L7_NULL                /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add@2.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.add@2.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL1_@2.L7_NULL: .word NULL
    
List.LinkedList.get@3_P6:                    /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get@3.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get@3.L7
List.LinkedList.get@3.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get@3.L3:                    /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get@3.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_@2.L7_NULL                /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get@3.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    b List.LinkedList.get@3.L7
List.LinkedList.get@3.L5: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get@3.L3
List.LinkedList.get@3.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get@3.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
.POOL2_@2.L7_NULL: .word NULL
    
List.LinkedList.size@4_P4:                   /* Function: List.LinkedList.size, Provisos: INT */
    mov r10, #0
    push { r3, r4 }
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    mov r0, #0                               /* Evaluate Expression */
    mov r3, #0
List.LinkedList.size@4.L1:                   /* Evaluate condition */
    ldr r1, .POOL3_@2.L7_NULL                /* Load null address */
    cmp r4, r1
    beq List.LinkedList.size@4.L2
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    mov r0, r3
    add r3, r3, #1
    b List.LinkedList.size@4.L1
List.LinkedList.size@4.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3, r4}
    bx lr
.POOL3_@2.L7_NULL: .word NULL
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #0                               /* Evaluate Expression */
    ldr r1, .POOL4_@2.L7_NULL                /* Load null address */
    ldr r2, .POOL4_@2.L7_NULL                /* Load null address */
    stmfd sp!, {r0-r2}
    mov r0, #2
    push { r0 }
    mov r1, #12
    sub r0, fp, #16
    lsr r0, r0, #2
    bl List.LinkedList.add@2_P1              /* Call List.LinkedList.add */
    mov r1, #4
    sub r0, fp, #16
    lsr r0, r0, #2
    bl List.LinkedList.add@2_P1              /* Call List.LinkedList.add */
    mov r1, #9
    sub r0, fp, #16
    lsr r0, r0, #2
    bl List.LinkedList.add@2_P1              /* Call List.LinkedList.add */
    sub r0, fp, #16                          /* Evaluate Expression */
    lsr r3, r0, #2
    mov r0, r3                               /* Evaluate Expression */
    bl List.Iterable@7.L2_P0                 /* Branch to relay table of List.Iterable */
    mov r4, r0
    mov r5, #0
    mov r6, #0
main.L1: 
    cmp r6, r4
    bge main.L2
    mov r0, r3
    mov r1, r6
    mov r12, #4
    bl List.Iterable@7.L2_P0                 /* Branch to relay table of List.Iterable */
    add r5, r5, r0
    add r6, r6, #1
    b main.L1
main.L2: 
    mov r0, r5                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.POOL4_@2.L7_NULL: .word NULL
    
