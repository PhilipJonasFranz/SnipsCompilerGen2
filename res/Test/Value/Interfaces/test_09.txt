SOURCE
#include<linked_list.sn>
#include<collection.sn>
#include<stream.sn>

int add5(int x) {
	return x + 5;
}

int mul2(int x) {
	return x * 2;
}

bool not20(int x) {
	return x != 20;
}

int main(int a) {
	LinkedList<int>* l = LinkedList::create<int>(0);
	
	l->add(10);
	l->add(5);
	l->add(2);
	
	Collection<int> it = l;
	
	Stream<int>* s = init<>(Stream::create<int>(it));
	
	s->forEach(add5)->forEach(mul2)->filter(not20);
	
	return (s->collection).get(a);
}
TESTCASES
0 30
1 14
OUTPUT
/* --test_09.txt */
.data
NULL: .word 0
HEAP_START: .word 0
    
.text
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L19_HEAP_START            /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L10: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L19_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P3:                                     /* Function: init, Provisos: List.LinkedList<INT> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #5                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #20
    bx lr
    
init_P5:                                     /* Provisos: List.ListNode<INT> |  */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #12
    bx lr
    
init_P7:                                     /* Provisos: Streamable.Stream<INT> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #2                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    ldr r0, [fp, #16]                        /* Evaluate Expression */
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #8
    bx lr
    
/* Frees the memory block the given pointer points to. The pointer object will keep */
/* the memory address, but the memory block will not be registered to be used anymore and */
/* thus can be overwritten. */
free:                                        /* Function: free */
    sub sp, sp, #12
    stmea sp, {r3, r4, r6}
    mov r3, r0
/* Jump to block head */
    sub r3, r0, #1
/* Load Block Size */
    ldr r4, [r10, r3, lsl #2]                /* Load from address */
/* Store negated block size */
    rsb r0, r4, #0
    str r0, [r10, r3, lsl #2]
    add r6, r3, r4
free.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r6, lsl #2]                /* Load from address */
    cmp r0, #0
    bge free.L2
    ldr r4, [r10, r6, lsl #2]                /* Load from address */
/* Add size to freed block */
    ldr r1, [r10, r3, lsl #2]                /* Load from address */
    add r0, r1, r4
    str r0, [r10, r3, lsl #2]
/* Shift pointer to next block */
    sub r6, r6, r4
    b free.L1
free.L2: 
    ldmfd sp!, {r3, r4, r6}
    bx lr
    
/* [BASE-PACKAGE] */
/*  */
/* This package contains the interface definition for an iterable struct. */
/* The interface creates data access and exchange points, so data can be */
/* read and written. */
/* Interface for a collection. A collection has to include the methods: */
/* - size */
/* - get(int) */
/* - set(int, T) */
/* - add(T) */
/* - remove(int) */
/* A collection provides an abstract interface for a database or data storage */
/* and the endpoints to access the data. */
Collection.L5_P1:                            /* Interface : Collection, Provisos: INT,  */
    add r10, r12, #4
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P10
    b List.LinkedList.get_P12
    b List.LinkedList.set_P14
    b List.LinkedList.add_P4
    b List.LinkedList.remove_P17
    
/* [BASE-PACKAGE] */
/*  */
/* Using the serializable interface, structs can be converted */
/* into string format. */
/* This package contains the utility to create a linked-list, */
/* insert and remove values from it, as well as some functions */
/* that give information about the state of the list. */
/* A single list entry, contains a pointer to the next node */
/* and a value. */
/* Wraps the list head and tail. */
List.LinkedList.add_P4:                      /* Function: List.LinkedList.add, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
/* Initialize the new List Node, set the next pointer to null */
    push { r4 }
    ldr r0, .POOL1_L18_NULL                  /* Load null address */
    push { r0 }
    mov r0, #1
    push { r0 }
    bl init_P5                               /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL1_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    ldmfd sp!, {r3-r5, pc}
.POOL1_L18_NULL: .word NULL
    
List.LinkedList.get_P12:                     /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
/* Jump to next */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
.POOL2_L18_NULL: .word NULL
    
List.LinkedList.set_P14:                     /* Function: List.LinkedList.set, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r4-r6}
    mov r4, r1
    mov r5, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
List.LinkedList.set.L1:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.set.L2
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.set.L3
    b List.LinkedList.set.L5
List.LinkedList.set.L3: 
/* Jump to next */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.set.L1
List.LinkedList.set.L2: 
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.set.L5: 
    ldmfd sp!, {r4-r6}
    bx lr
.POOL3_L18_NULL: .word NULL
    
List.LinkedList.size_P10:                    /* Function: List.LinkedList.size, Provisos: INT */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bx lr
    
List.LinkedList.remove_P17:                  /* Function: List.LinkedList.remove, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
/* Out of bounds */
    cmp r1, #0
    bge List.LinkedList.remove.L0
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L0: 
    cmp r4, #0
    bne List.LinkedList.remove.L3
/* Remove first element */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL4_L18_NULL                  /* Load null address */
    cmp r0, r1
    ldmfdeq sp!, {r3-r5, pc}
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
/* Only one element in list */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    cmp r0, r5
    bne List.LinkedList.remove.L6
    ldr r0, .POOL4_L18_NULL                  /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
List.LinkedList.remove.L6: 
    mov r0, r5                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L3: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
/* Jump to element before element to remove */
List.LinkedList.remove.L10:                  /* Evaluate condition */
    cmp r4, #0
    ble List.LinkedList.remove.L11
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL4_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L13
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L13: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.remove.L10
List.LinkedList.remove.L11: 
/* Out of bounds */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL4_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L16
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L16: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL4_L18_NULL                  /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L19
/* Element to remove is last element in list */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    ldr r0, .POOL4_L18_NULL                  /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L19: 
/* Cut out element and set next pointers */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r3, [r1, #4]                         /* Load field from struct */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    mov r0, r3                               /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r3, [r1, #4]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL4_L18_NULL: .word NULL
    
List.LinkedList.create_P2:                   /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
/* Initialize list, set pointers to null */
    push { r3 }
    mov r0, #0
    ldr r1, .POOL5_L18_NULL                  /* Load null address */
    ldr r2, .POOL5_L18_NULL                  /* Load null address */
    stmfd sp!, {r0-r2}
    mov r0, #2
    push { r0 }
    bl init_P3                               /* Call init */
    ldmfd sp!, {r3, pc}
.POOL5_L18_NULL: .word NULL
    
/* Contains the utility to create a stream from an collection */
/* interface and to modify the data behind the interface with */
/* predicates. */
/* A stream capsules an Iterable interface, that contains the */
/* data. Within the typedef, a range of functions are defined */
/* to modify the data using predicates. */
Streamable.Stream.forEach_P8:                /* Function: Streamable.Stream.forEach, Provisos: INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    mov r5, r0
    mov r6, #0
Streamable.Stream.forEach.L1: 
    cmp r6, r5
    bge Streamable.Stream.forEach.L2
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r6
    mov r12, #4
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    add lr, pc, #8
    mov pc, r4
    push { r0 }
    push { r6 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    mov r12, #8
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    add r6, r6, #1
    b Streamable.Stream.forEach.L1
Streamable.Stream.forEach.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
    
Streamable.Stream.filter_P15:                /* Function: Streamable.Stream.filter, Provisos: INT */
    sub sp, sp, #24
    stmea sp, {r3-r7, lr}
    mov r3, r0
    mov r4, r1
    mov r5, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    mov r6, r0
    mov r7, #0
Streamable.Stream.filter.L1: 
    cmp r7, r6
    bge Streamable.Stream.filter.L2
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r7
    mov r12, #4
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    add lr, pc, #8
    mov pc, r4
    cmp r0, #0
    moveq r0, #1
    movne r0, #0
    cmp r0, #0
    beq Streamable.Stream.filter.L3
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r5
    mov r12, #16
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    sub r5, r5, #1
Streamable.Stream.filter.L3: 
    mov r0, r5
    add r5, r5, #1
    add r7, r7, #1
    b Streamable.Stream.filter.L1
Streamable.Stream.filter.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r7, pc}
    
Streamable.Stream.create_P6:                 /* Function: Streamable.Stream.create, Provisos: INT */
    push { fp }
    mov fp, sp
    push { r0 }
    mov r0, #3
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
lambda_add5:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr
    
lambda_mul2:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
mul2:                                        /* Function: mul2 */
    lsl r0, r0, #1
    bx lr
    
lambda_not20:                                /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
not20:                                       /* Function: not20 */
    cmp r0, #20
    movne r0, #1
    moveq r0, #0
    bx lr
    
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P2             /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #10
    mov r0, r4
    bl List.LinkedList.add_P4                /* Call List.LinkedList.add */
    mov r1, #5
    mov r0, r4
    bl List.LinkedList.add_P4                /* Call List.LinkedList.add */
    mov r1, #2
    mov r0, r4
    bl List.LinkedList.add_P4                /* Call List.LinkedList.add */
    mov r0, r4                               /* Evaluate Expression */
    bl Streamable.Stream.create_P6           /* Call Streamable.Stream.create */
    bl init_P7                               /* Call init */
    mov r4, r0
    add r10, pc, #8                          /* Load parameters */
    b lambda_not20
    push { r0 }
    add r10, pc, #8                          /* Load parameters */
    b lambda_mul2
    push { r0 }
    add r10, pc, #8                          /* Load parameters */
    b lambda_add5
    mov r10, #0
    mov r1, r0
    mov r0, r4
    bl Streamable.Stream.forEach_P8          /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.forEach_P8          /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.filter_P15          /* Call Streamable.Stream.filter */
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r3
    mov r12, #4
    bl Collection.L5_P1                      /* Branch to relay table of Collection */
    pop { pc }
    
