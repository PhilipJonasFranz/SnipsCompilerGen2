SOURCE
#include<linked_list.sn>
#include<collection.sn>
#include<stream.sn>

int add5(int x) {
	return x + 5;
}

int mul2(int x) {
	return x * 2;
}

bool not20(int x) {
	return x != 20;
}

int main(int a) {
	LinkedList<int>* l = LinkedList::create<int>(0);
	
	l->add(10);
	l->add(5);
	l->add(2);
	
	Collection<int> it = l;
	
	Stream<int>* s = init<>(Stream::create<int>(it));
	
	s->forEach(add5)->forEach(mul2)->filter(not20);
	
	return (s->collection).get(a);
}
TESTCASES
0 30
1 14
OUTPUT
.version 18931548654

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s
.include stream.s
.include collection.s
.include linked_list.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global add5
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr

.global mul2
mul2:                                        /* Function: mul2 */
    lsl r0, r0, #1
    bx lr

.global not20
not20:                                       /* Function: not20 */
    cmp r0, #20
    movne r0, #1
    moveq r0, #0
    bx lr

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #10
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #5
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #2
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r0, r4                               /* Evaluate Expression */
    bl Streamable.Stream.create_P_1          /* Call Streamable.Stream.create */
    bl init_P_2                              /* Call init */
    mov r6, r0
    ldr r0, .P595710337_not20                /* Load parameters */
    push { r0 }
    ldr r0, .P595710337_mul2                 /* Load parameters */
    push { r0 }
    ldr r1, .P595710337_add5                 /* Load parameters */
    mov r0, r6
    bl Streamable.Stream.forEach_P_1         /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.forEach_P_1         /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.filter_P_1          /* Call Streamable.Stream.filter */
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r3
    mov r12, #4                              /* Offset to Collection.get */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #4]
    ldr r10, .P595710337_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    pop { pc }
.P595710337_Collection_P_1: .word Collection_P_1
.P595710337_add5: .word add5
.P595710337_mul2: .word mul2
.P595710337_not20: .word not20
