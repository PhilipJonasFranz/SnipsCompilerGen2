SOURCE
#include<linked_list.sn>
#include<collection.sn>
#include<stream.sn>

int add5(int x) {
	return x + 5;
}

int mul2(int x) {
	return x * 2;
}

bool not20(int x) {
	return x != 20;
}

int main(int a) {
	LinkedList<int>* l = LinkedList::create<int>(0);
	
	l->add(10);
	l->add(5);
	l->add(2);
	
	Collection<int> it = l;
	
	Stream<int>* s = init<>(Stream::create<int>(it));
	
	s->forEach(add5)->forEach(mul2)->filter(not20);
	
	return (s->collection).get(a);
}
TESTCASES
0 30
1 14
OUTPUT
.data
Streamable.Stream: .word 0
List.LinkedList: .word 0
List.ListNode: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global Streamable.Stream.forEach_P_1
    
    add r10, r12, #4
    
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P_1
    b List.LinkedList.get_P_1
    b List.LinkedList.set_P_1
    b List.LinkedList.add_P_1
    b List.LinkedList.remove_P_1
    
Streamable.Stream.forEach_P_1:               /* Function: Streamable.Stream.forEach, Provisos: INT */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    mov r5, r0
    mov r6, #0
Streamable.Stream.forEach.L1: 
    cmp r6, r5
    bge Streamable.Stream.forEach.L2
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r6
    mov r12, #4
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    add lr, pc, #8
    mov pc, r4
    push { r0 }
    push { r6 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldmfd sp!, {r1, r2}
    mov r12, #8
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    add r6, r6, #1
    b Streamable.Stream.forEach.L1
Streamable.Stream.forEach.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6, pc}
    
.global Streamable.Stream.filter_P_1
Streamable.Stream.filter_P_1:                /* Function: Streamable.Stream.filter, Provisos: INT */
    sub sp, sp, #24
    stmea sp, {r3-r7, lr}
    mov r3, r0
    mov r4, r1
    mov r5, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    mov r6, r0
    mov r7, #0
Streamable.Stream.filter.L1: 
    cmp r7, r6
    bge Streamable.Stream.filter.L2
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r7
    mov r12, #4
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    add lr, pc, #8
    mov pc, r4
    cmp r0, #0
    moveq r0, #1
    movne r0, #0
    cmp r0, #0
    beq Streamable.Stream.filter.L3
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r5
    mov r12, #16
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    sub r5, r5, #1
Streamable.Stream.filter.L3: 
    mov r0, r5
    add r5, r5, #1
    add r7, r7, #1
    b Streamable.Stream.filter.L1
Streamable.Stream.filter.L2: 
    mov r0, r3                               /* Evaluate Expression */
    ldmfd sp!, {r3-r7, pc}
    
.global Streamable.Stream.create_P_1
Streamable.Stream.create_P_1:                /* Function: Streamable.Stream.create, Provisos: INT */
    push { fp }
    mov fp, sp
    push { r0 }
    ldr r0, .POOL6_Streamable.Stream
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.POOL6_Streamable.Stream: .word Streamable.Stream

.global List.LinkedList.add_P_1
    
    add r10, r12, #4
    
    mov r12, #0
    add pc, pc, r10
    b List.LinkedList.size_P_1
    b List.LinkedList.get_P_1
    b List.LinkedList.set_P_1
    b List.LinkedList.add_P_1
    b List.LinkedList.remove_P_1
    
List.LinkedList.add_P_1:                     /* Function: List.LinkedList.add, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    push { r4 }
    ldr r0, .POOL0_L1_NULL                   /* Load null address */
    push { r0 }
    ldr r0, .POOL0_List.ListNode
    push { r0 }
    bl init_P_3                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL0_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    ldmfd sp!, {r3-r5, pc}
.POOL0_List.ListNode: .word List.ListNode
.POOL0_L1_NULL: .word NULL
    
.global List.LinkedList.get_P_1
List.LinkedList.get_P_1:                     /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL1_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
.POOL1_L1_NULL: .word NULL
    
.global List.LinkedList.set_P_1
List.LinkedList.set_P_1:                     /* Function: List.LinkedList.set, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r4-r6}
    mov r4, r1
    mov r5, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
List.LinkedList.set.L1:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.set.L2
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL2_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.set.L3
    b List.LinkedList.set.L5
List.LinkedList.set.L3: 
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r6, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.set.L1
List.LinkedList.set.L2: 
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r6, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.set.L5: 
    ldmfd sp!, {r4-r6}
    bx lr
.POOL2_L1_NULL: .word NULL
    
.global List.LinkedList.size_P_1
List.LinkedList.size_P_1:                    /* Function: List.LinkedList.size, Provisos: INT */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bx lr
    
.global List.LinkedList.remove_P_1
List.LinkedList.remove_P_1:                  /* Function: List.LinkedList.remove, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.remove.L0
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L0: 
    cmp r4, #0
    bne List.LinkedList.remove.L3
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L1_NULL                   /* Load null address */
    cmp r0, r1
    ldmfdeq sp!, {r3-r5, pc}
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    cmp r0, r5
    bne List.LinkedList.remove.L6
    ldr r0, .POOL3_L1_NULL                   /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
List.LinkedList.remove.L6: 
    mov r0, r5                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L3: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
List.LinkedList.remove.L10:                  /* Evaluate condition */
    cmp r4, #0
    ble List.LinkedList.remove.L11
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L13
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L13: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.remove.L10
List.LinkedList.remove.L11: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L16
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L16: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL3_L1_NULL                   /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L19
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    ldr r0, .POOL3_L1_NULL                   /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L19: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r3, [r1, #4]                         /* Load field from struct */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    mov r0, r3                               /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r3, [r1, #4]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
.POOL3_L1_NULL: .word NULL
    
.global List.LinkedList.create_P_1
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    mov r0, #0
    ldr r1, .POOL4_L1_NULL                   /* Load null address */
    ldr r2, .POOL4_L1_NULL                   /* Load null address */
    stmfd sp!, {r0-r2}
    ldr r0, .POOL4_List.LinkedList
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL4_List.LinkedList: .word List.LinkedList
.POOL4_L1_NULL: .word NULL

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
lambda_add5:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global add5
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr
    
lambda_mul2:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global mul2
mul2:                                        /* Function: mul2 */
    lsl r0, r0, #1
    bx lr
    
lambda_not20:                                /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
.global not20
not20:                                       /* Function: not20 */
    cmp r0, #20
    movne r0, #1
    moveq r0, #0
    bx lr
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #10
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #5
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #2
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r0, r4                               /* Evaluate Expression */
    bl Streamable.Stream.create_P_1          /* Call Streamable.Stream.create */
    bl init_P_2                              /* Call init */
    mov r4, r0
    add r10, pc, #8                          /* Load parameters */
    b lambda_not20
    push { r0 }
    add r10, pc, #8                          /* Load parameters */
    b lambda_mul2
    push { r0 }
    add r10, pc, #8                          /* Load parameters */
    b lambda_add5
    mov r10, #0
    mov r1, r0
    mov r0, r4
    bl Streamable.Stream.forEach_P_1         /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.forEach_P_1         /* Call Streamable.Stream.forEach */
    pop { r1 }
    bl Streamable.Stream.filter_P_1          /* Call Streamable.Stream.filter */
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    mov r1, r3
    mov r12, #4
    bl Collection.L5_P_1                     /* Branch to relay table of Collection */
    pop { pc }
