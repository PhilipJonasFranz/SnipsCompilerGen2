DESCRIPTION
Test the correct functionality and behaviour when an interface is passed as parameter.
SOURCE
interface Inter {

	int get();

}

struct X : Inter {

	int val;
	
	int get() {
		return self->val;
	}

}

struct Y : Inter {
	int val;
	
	int get() {
		return self->val * 2;
	}

}

int process(Inter i) {
	return i.get();
}

int main(bool b) {
	X x = X::(25);
	Inter i = &x;
	
	Y y = Y::(5);
	Inter i0 = &y;
	
	return process((b)? i0 : i);
}
TESTCASES
0 25
1 10
OUTPUT
.version 0

.data
Y: .word 0
Y_resolver_relay: .word Y_resolver
X: .word 0
X_resolver_relay: .word X_resolver
Inter: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global X.get
X.get:                                       /* Function: X.get */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bx lr

X_Inter:                                     /* Relay: Inter -> X */
    mov r10, #0
    pop { r12 }
    add r12, r12, #16
    add r12, r12, pc
    push { r12 }
    mov r12, #0
    pop { pc }
    b X.get

X_resolver:                                  /* Relay: X -> INTF */
    b X_Inter

.global Y.get
Y.get:                                       /* Function: Y.get */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    lsl r0, r1, #1
    bx lr

Y_Inter:                                     /* Relay: Inter -> Y */
    mov r10, #0
    pop { r12 }
    add r12, r12, #16
    add r12, r12, pc
    push { r12 }
    mov r12, #0
    pop { pc }
    b Y.get

Y_resolver:                                  /* Relay: Y -> INTF */
    b Y_Inter

.global process
process:                                     /* Function: process */
    push { lr }
    mov r12, #0                              /* Offset to Inter.get */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #4]
    ldr r10, .P538452035_Inter
    add lr, pc, #8
    mov pc, r12
    pop { pc }
.P538452035_Inter: .word Inter

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #25                              /* Evaluate Expression */
    push { r0 }
    ldr r0, .P538452036_X
    push { r0 }
    sub r0, fp, #8                           /* Evaluate Expression */
    lsr r4, r0, #2
    mov r0, #5                               /* Evaluate Expression */
    push { r0 }
    ldr r0, .P538452036_Y
    push { r0 }
    sub r0, fp, #16                          /* Evaluate Expression */
    lsr r5, r0, #2
    cmp r3, #0
    beq main.L0
    mov r0, r5
    b main.L1
main.L0: 
    mov r0, r4
main.L1: 
    bl process                               /* Call process */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P538452036_Y: .word Y
.P538452036_X: .word X
