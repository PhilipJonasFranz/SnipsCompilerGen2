SOURCE
#include <linked_list.hn>
#include <stream.hn>

int main(int a) {
	Collection<int> col0 = LinkedList::create<int>(0);
	
	col0.add(12);
	col0.add(9);
	col0.add(4);
	col0.add(3);
	col0.add(8);
	
	/* 12, 9, 4, 3, 8 */
	Stream<int>* stream0 = init<>(Stream::create<int>(col0));
	
	/* 17, 14, 9, 8, 13 */
	stream0->forEach((int x -> int) : { return x + 5; });
	
	
	/* true, true, false, false, true */
	Collection<bool> col1 = LinkedList::create<bool>(false);
	Stream<bool>* stream1 = stream0->map(col1, (int x -> bool) : { return (x >= 10)? true : false; });
	
	
	/* 10, 10, 5, 5, 10 */
	Collection<int> col2 = LinkedList::create<int>(0);
	Stream<int>* stream2 = stream1->map(col2, (bool x -> int) : { return (x)? 10 : 5; });
	
	
	return col2.get(a);
}
TESTCASES
0 10
1 10
2 5
3 5
4 10
OUTPUT
.version 0

.include maybe resv.s
.include maybe init.s
.include maybe free.s
.include stream.s
.include linked_list.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global ANON0
ANON0:                                       /* Function: ANON0 */
    add r0, r0, #5
    bx lr

.global ANON1
ANON1:                                       /* Function: ANON1 */
    cmp r0, #10
    blt ANON1.L0
    mov r0, #1
    bx lr
ANON1.L0: 
    mov r0, #0
    bx lr

.global ANON2
ANON2:                                       /* Function: ANON2 */
    cmp r0, #0
    beq ANON2.L0
    mov r0, #10
    bx lr
ANON2.L0: 
    mov r0, #5
    bx lr

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r12, #12                             /* Offset to Collection.add */
    mov r4, r0
    mov r1, #12
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r12, #12                             /* Offset to Collection.add */
    mov r1, #9
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r12, #12                             /* Offset to Collection.add */
    mov r1, #4
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r12, #12                             /* Offset to Collection.add */
    mov r1, #3
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    mov r12, #12                             /* Offset to Collection.add */
    mov r1, #8
    mov r0, r4
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
/* 12, 9, 4, 3, 8 */
    mov r0, r4                               /* Evaluate Expression */
    bl Streamable.Stream.create_P_1          /* Call Streamable.Stream.create */
    bl init_P_2                              /* Call init */
/* 17, 14, 9, 8, 13 */
    mov r5, r0
    ldr r1, .P1340068263_ANON0               /* Load parameters */
    mov r0, r5
    bl Streamable.Stream.forEach_P_1         /* Call Streamable.Stream.forEach */
/* true, true, false, false, true */
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r6, r0
    ldr r2, .P1340068263_ANON1               /* Evaluate Expression */
    mov r1, r6
    mov r0, r5
    bl Streamable.Stream.map_P_1_1           /* Call Streamable.Stream.map */
/* 10, 10, 5, 5, 10 */
    mov r7, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r8, r0
    ldr r2, .P1340068263_ANON2               /* Load parameters */
    mov r1, r8
    mov r0, r7
    bl Streamable.Stream.map_P_1_1           /* Call Streamable.Stream.map */
    mov r12, #4                              /* Offset to Collection.get */
    mov r1, r3
    mov r0, r8
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #8]
    ldr r10, .P1340068263_Collection_P_1
    add lr, pc, #8
    mov pc, r12
    pop { pc }
.P1340068263_ANON2: .word ANON2
.P1340068263_ANON1: .word ANON1
.P1340068263_ANON0: .word ANON0
.P1340068263_Collection_P_1: .word Collection_P_1

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

