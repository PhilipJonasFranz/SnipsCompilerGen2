SOURCE
interface Getter<K> {

	K get<K>();

}

interface GetSet<V> : Getter<V> {

	void set<V>(V val);

}

struct A<K> : GetSet<K> {
	K val;
	
	K get<K>() {
		return self->val;
	}
	
	void set<K>(K val) {
		self->val = val;
	}
}

int main() {
	GetSet<int> gs = init<>(A<int>::(10));
	
	int s = gs.get();
	gs.set(20);
	
	return s + gs.get();
}
TESTCASES
30
OUTPUT
.version -5995861233

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
A_P_1: .word 0
A_P_1_resolver_relay: .word A_P_1_resolver
GetSet_P_1: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global A.get_P_1
A.get_P_1:                                   /* Function: A.get, Provisos: INT */
    mov r10, #0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bx lr

.global A.set_P_1
A.set_P_1:                                   /* Function: A.set, Provisos: INT */
    mov r10, #0
    push { r3 }
    mov r3, r0
    mov r0, r1                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    pop { r3 }
    bx lr

A_P_1_GetSet:                                /* Relay: GetSet -> A */
    pop { r12 }
    mov r10, #0
    add r12, r12, #4
    add pc, pc, r12
    b A.get_P_1
    b A.set_P_1

A_P_1_resolver:                              /* Relay: A -> INTF */
    ldr r12, .P1311439112_GetSet_P_1
    cmp r10, r12
    beq A_P_1_GetSet
.P1311439112_GetSet_P_1: .word GetSet_P_1

.global main
main:                                        /* Function: main */
    push { lr }
    mov r0, #10                              /* Evaluate Expression */
    push { r0 }
    ldr r0, .P1311439113_A_P_1
    push { r0 }
    bl init_P_2                              /* Call init */
    mov r3, r0
    mov r12, #0                              /* Offset to GetSet.get */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #4]
    ldr r10, .P1311439113_GetSet_P_1
    add lr, pc, #8
    mov pc, r12
    mov r4, r0
    mov r1, #20
    mov r0, r3
    mov r12, #4                              /* Offset to GetSet.set */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #4]
    ldr r10, .P1311439113_GetSet_P_1
    add lr, pc, #8
    mov pc, r12
    mov r0, r3                               /* Evaluate Expression */
    mov r12, #0                              /* Offset to GetSet.get */
    push { r12 }
    ldr r12, [r10, r0, lsl #2]
    ldr r12, [r12, #4]
    ldr r10, .P1311439113_GetSet_P_1
    add lr, pc, #8
    mov pc, r12
    add r0, r4, r0
    pop { pc }
.P1311439113_GetSet_P_1: .word GetSet_P_1
.P1311439113_A_P_1: .word A_P_1
