SOURCE
int smallest(int* arr, int count) {
	int smallest = *arr;
	for (int i : arr, count) 
		if (i < smallest) smallest = i;

	return smallest;
}

int main() {
	int [5] arr = {5, 3, 7, 2, 4};
	return smallest(&arr, 5);
}
TESTCASES
2
OUTPUT
.version 19121568710

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
lambda_smallest: .word smallest
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global smallest
smallest:                                    /* Function: smallest */
    sub sp, sp, #20
    stmea sp, {r3-r7}
    mov r3, r0
    mov r4, r1
    ldr r5, [r10, r3, lsl #2]                /* Load from address */
    mov r6, #0
    mov r7, #0
smallest.L1: 
    cmp r4, r6
    beq smallest.L2
    add r0, r3, r6
    ldr r7, [r10, r0, lsl #2]                /* Load from address */
    cmp r7, r5
    bge smallest.L3
    mov r0, r7                               /* Evaluate Expression */
    mov r5, r7
smallest.L3: 
    add r6, r6, #1
    b smallest.L1
smallest.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r7}
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #7
    stmfd sp!, {r0-r2}
    mov r0, #3
    mov r1, #5
    stmfd sp!, {r0, r1}
    mov r1, #5
    sub r0, fp, #20
    lsr r0, r0, #2
    bl smallest                              /* Call smallest */
    mov sp, fp
    ldmfd sp!, {fp, pc}
