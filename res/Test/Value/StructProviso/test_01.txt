SOURCE
struct TreeNode<T> {
	TreeNode<T>* left;
	TreeNode<T>* right;
	T value;
}

int main() {
	TreeNode<int>* root = (TreeNode<int>*) resv(sizeof(TreeNode<int>));
	*root = TreeNode<int>::((TreeNode<int>*) 0, (TreeNode<int>*) 0, 10);
	
	TreeNode<bool> root2 = TreeNode<bool>::((TreeNode<bool>*) 0, (TreeNode<bool>*) 0, true);
	
	return root->value;
}
TESTCASES
10
OUTPUT
.version 21717357060

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
TreeNode: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    mov r0, #10                              /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, .P1612757230_TreeNode
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r0, #1                               /* Evaluate Expression */
    push { r0 }
    mov r0, #0
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, .P1612757230_TreeNode
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P1612757230_TreeNode: .word TreeNode
