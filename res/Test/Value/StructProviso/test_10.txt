SOURCE
struct Nib<T> {
	T data;
}

struct Data<T> {
	Nib<T>[2] nibs;
}

int main(int x) {
	int[3] arr = {1, 2, 3};
	int[3] arr2 = {4, 5, 6};
	
	Data<int*> data = Data<int*>::({Nib<int*>::(&arr), Nib<int*>::(&arr2)});
	
	*(data.nibs [0].data + 1) = 5;
	
	return *(data.nibs [0].data + x) + *(data.nibs [1].data + x);
}
TESTCASES
0 5
1 10
2 9
OUTPUT
.version 30637322035

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Data_P_1: .word 0
Nib_P_1: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global main
main:                                        /* Function: main */
    mov fp, sp
    mov r3, r0
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #1
    stmfd sp!, {r0-r2}
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    stmfd sp!, {r0-r2}
    sub r0, fp, #24                          /* Evaluate Expression */
    lsr r0, r0, #2
    push { r0 }
    ldr r0, .P1823335536_Nib_P_1
    push { r0 }
    sub r0, fp, #12
    lsr r0, r0, #2
    push { r0 }
    ldr r0, .P1823335536_Nib_P_1
    push { r0 }
    ldr r0, .P1823335536_Data_P_1
    push { r0 }
    mov r0, #5                               /* Evaluate Expression */
    push { r0 }
    ldr r1, [fp, #-36]                       /* Load field from struct */
    add r0, r1, #1
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    ldr r1, [fp, #-36]                       /* Load field from struct */
    add r0, r1, r3
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    push { r0 }
    ldr r1, [fp, #-28]                       /* Load field from struct */
    add r0, r1, r3
    pop { r1 }
    ldr r2, [r10, r0, lsl #2]                /* Load from address */
    add r0, r1, r2
    mov sp, fp
    bx lr
.P1823335536_Data_P_1: .word Data_P_1
.P1823335536_Nib_P_1: .word Nib_P_1
