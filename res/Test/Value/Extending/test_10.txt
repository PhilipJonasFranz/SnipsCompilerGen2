SOURCE
namespace C {

	struct B<K:void> {
	
		K k;
		
		void incr<K>() {
			self->k += 1;
		}
		
		static B<K> create<K>(K k) {
			return B<K>::(k);
		}
		
	}
	
	struct A<T> : B<T> {

		T* r;

		static void initPointer(A<int>* a, int x) {
			int* p = resv(1);
			a->r = p;
			*a->r = x;
		}
		
		static A<T> create<T>(T k, T* r) {
			return A<T>::(super(k), r);
		}
		
	}
	
}

int main() {
	A<int>* a = init<>(A::create<int>(12, 0));
	
	C::A::initPointer(a, 4);

	A::initPointer(a, 6);

	a->incr();
	
	return a->k + *a->r;
}
TESTCASES
19
OUTPUT
/* --test_10.txt */
.data
HEAP_START: .word 0
    
.text
    b main
/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10
    
/* Reseve a memory block with given size + 1. The block size has to be increased */
/* by one to accomodate the block metadata. The function returns a void pointer to */
/* the start of the reserved memory section + 1. This means the pointer points to */
/* the start of the memory thats actually supposed to be used. */
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
/* Add block header to size */
    add r3, r0, #1
/* Get reference to heap start */
    ldr r0, .POOL0_L4_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
/* Memory Section is allocated or free */
/* Load block size from memory */
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
/* Defragment Heap */
resv.L6:                                     /* Evaluate condition */
    mov r0, #1
    cmp r0, #0
    beq resv.L7
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L11
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
/* All structures to end are free */
    b resv.L7
resv.L11: 
    add r5, r5, r6
/* Add to current size */
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
/* Write defragmented size to heap */
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
/* Memory location is free, check size */
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
/* Fits */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L18
resv.L15: 
    cmp r5, r3
    ble resv.L17
/* Rest, subtract size, store at offset */
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L18
resv.L17: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
/* Memory section is allocated, skip */
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
/* End reached, create new block */
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L18: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL0_L4_HEAP_START: .word HEAP_START
    
/* Reserves a memory section using resv, assigns the given value */
/* to this memory section, and returns a pointer to the new memory */
/* section. */
init_P2:                                     /* Function: init, Provisos: C.A<INT> */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #3                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    add r0, fp, #20
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #12
    bx lr
    
C.B.create_P1:                               /* Function: C.B.create, Provisos: INT */
    push { fp }
    mov fp, sp
    push { r0 }
    mov r0, #1
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
C.A.incr_P3:                                 /* Function: C.A.incr, Provisos: INT */
    lsl r1, r0, #2                           /* Convert to bytes */
    add r1, r1, #4
    ldr r2, [r1]
    add r0, r2, #1
    str r0, [r1]                             /* Store value to struct field */
    bx lr
    
C.A.initPointer:                             /* Function: C.A.initPointer */
    sub sp, sp, #12
    stmea sp, {r3, r4, lr}
    mov r3, r0
    mov r4, r1
    mov r0, #1                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    str r4, [r10, r0, lsl #2]
    ldmfd sp!, {r3, r4, pc}
    
C.A.create_P0:                               /* Function: C.A.create, Provisos: INT */
    sub sp, sp, #12
    stmea sp, {r4, fp, lr}
    mov fp, sp
    mov r4, r1
    push { r4 }
    bl C.B.create_P1                         /* Call C.B.create */
    add sp, sp, #4
    mov r0, #2
    push { r0 }
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r4, fp, lr}
    mov r0, #12
    add r1, r2, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
    
main:                                        /* Function: main */
    push { lr }
    mov r1, #0
    mov r0, #12
    bl C.A.create_P0                         /* Call C.A.create */
    bl init_P2                               /* Call init */
    mov r3, r0
    mov r1, #4
    mov r0, r3
    bl C.A.initPointer                       /* Call C.A.initPointer */
    mov r1, #6
    mov r0, r3
    bl C.A.initPointer                       /* Call C.A.initPointer */
    mov r0, r3                               /* Load parameters */
    bl C.A.incr_P3                           /* Call C.A.incr */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    ldr r2, [r10, r0, lsl #2]                /* Load from address */
    add r0, r1, r2
    pop { pc }
    
