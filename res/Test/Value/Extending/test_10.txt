SOURCE
namespace C {

	struct B<K:void> {
	
		K k;
		
		void incr<K>() {
			self->k += 1;
		}
		
		static B<K> create<K>(K k) {
			return B<K>::(k);
		}
		
	}
	
	struct A<T> : B<T> {

		T* r;

		static void initPointer(A<int>* a, int x) {
			int* p = resv(1);
			a->r = p;
			*a->r = x;
		}
		
		static A<T> create<T>(T k, T* r) {
			return A<T>::(super(k), r);
		}
		
	}
	
}

int main() {
	A<int>* a = init<>(A::create<int>(12, 0));
	
	C::A::initPointer(a, 4);

	A::initPointer(a, 6);

	a->incr();
	
	return a->k + *a->r;
}
TESTCASES
19
OUTPUT
.version 0

.include maybe resv.s
.include maybe init.s

.data
C.A_P_1: .word C.B_P_1
C.A_vrelay_P_1: .word C.A_vtable_P_1
C.B_P_1: .word 0
C.B_vrelay_P_1: .word C.B_vtable_P_1
NULL: .word 0
HEAP_START: .word 0

.text
    b main

C.B_vtable_P_1:                              /* VTable for C.B proviso _P_1 */
    mov r12, #0
    add pc, pc, r10
    b C.B.incr_P_1

.global C.B.incr_P_1
C.B.incr_P_1:                                /* Function: C.B.incr, Provisos: INT */
    push { r3 }
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, #1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    pop { r3 }
    bx lr

.global C.B.create_P_1
C.B.create_P_1:                              /* Function: C.B.create, Provisos: INT */
    push { fp }
    mov fp, sp
    push { r0 }
    ldr r0, .P1555518991_C.B_P_1
    push { r0 }
    mov r2, sp
    mov sp, fp
    pop { fp }
    add r1, r2, #8
    mov r0, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1555518991_C.B_P_1: .word C.B_P_1

C.A_vtable_P_1:                              /* VTable for C.A proviso _P_1 */
    mov r12, #0
    add pc, pc, r10
    b C.B.incr_P_1

.global C.A.incr_P_1
C.A.incr_P_1: 
    b C.B.incr_P_1                           /* Relay to inherited C.B.incr_P_1 */

.global C.A.initPointer
C.A.initPointer:                             /* Function: C.A.initPointer */
    sub sp, sp, #12
    stmea sp, {r3, r4, lr}
    mov r4, r1
    mov r3, r0
    mov r0, #1                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    ldr r0, [r1, #8]                         /* Load field from struct */
    str r4, [r10, r0, lsl #2]
    ldmfd sp!, {r3, r4, pc}

.global C.A.create_P_1
C.A.create_P_1:                              /* Function: C.A.create, Provisos: INT */
    sub sp, sp, #12
    stmea sp, {r4, fp, lr}
    mov fp, sp
    mov r4, r1
    push { r4 }
    bl C.B.create_P_1                        /* Call C.B.create */
    add sp, sp, #4
    ldr r0, .P1555518992_C.A_P_1
    push { r0 }
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r4, fp, lr}
    add r1, r2, #12
    mov r0, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1555518992_C.A_P_1: .word C.A_P_1

.global main
main:                                        /* Function: main */
    push { lr }
    mov r1, #0
    mov r0, #12
    bl C.A.create_P_1                        /* Call C.A.create */
    bl init_P_3                              /* Call init */
    mov r3, r0
    mov r1, #4
    mov r0, r3
    bl C.A.initPointer                       /* Call C.A.initPointer */
    mov r1, #6
    mov r0, r3
    bl C.A.initPointer                       /* Call C.A.initPointer */
    mov r0, r3                               /* Load parameters */
    bl C.A.incr_P_1                          /* Call C.A.incr */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    push { r0 }
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    ldr r2, [r10, r0, lsl #2]                /* Load from address */
    add r0, r1, r2
    pop { pc }

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

