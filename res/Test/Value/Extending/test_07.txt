SOURCE
struct X<T> {
	int x;
	T y;
	
	static X<T> create<T>(int x, T y) {
		return X<T>::(x, y);
	}
}

struct Y<T> : X<T> {
	bool k;
	
	static Y<T> create<T>(int x, T y, bool k) {
		return Y<T>::(super<T>(x, y), k);
	}
}

int main() {
	Y<bool> y = Y::create<bool>(15, true, true);
	return y.x + (int) y.y + (int) y.k;
}
TESTCASES
17
OUTPUT
.version 0

.data
Y_P_1: .word X_P_1
X_P_1: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global X.create_P_1
X.create_P_1:                                /* Function: X.create, Provisos: BOOL */
    sub sp, sp, #12
    stmea sp, {r3, r4, fp}
    mov fp, sp
    mov r4, r1
    mov r3, r0
    push { r3, r4 }
    ldr r0, .P868419367_X_P_1
    push { r0 }
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r3, r4, fp}
    add r1, r2, #12
    mov r0, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P868419367_X_P_1: .word X_P_1

.global Y.create_P_1
Y.create_P_1:                                /* Function: Y.create, Provisos: BOOL */
    sub sp, sp, #12
    stmea sp, {r5, fp, lr}
    mov fp, sp
    mov r5, r2
    push { r5 }
    bl X.create_P_1                          /* Call X.create */
    add sp, sp, #4
    ldr r0, .P868419368_Y_P_1
    push { r0 }
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r5, fp, lr}
    add r1, r2, #16
    mov r0, #16
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P868419368_Y_P_1: .word Y_P_1

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r2, #1
    mov r1, #1
    mov r0, #15
    bl Y.create_P_1                          /* Call Y.create */
    ldr r0, [fp, #-12]                       /* Load field from struct */
    ldr r2, [fp, #-8]                        /* Load field from struct */
    add r0, r0, r2
    ldr r2, [fp, #-4]                        /* Load field from struct */
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

