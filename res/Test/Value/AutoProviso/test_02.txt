SOURCE
#include <hash_map.sn>

int main(bool add) {
	HashMap<int, int>* map = HashMap::create<int, int>(10, -1);
	
	HashMap<char, bool>* map2 = HashMap::create<char, bool>(10, false);
	
	map2->put('c', true);
	map->put<>(11, 20);
	map2->put<>('b', false);
	map->put(2, 30);
	
	map->replace(11, 25);
	map2->replace<>('c', false);
	map->replace<>(11, 25);
	
	/* Remove key 1 from map, results in -1 value */
	map->remove(1);
	map2->remove<>('c');
	
	if (add) 
		return map->get(1) + map->get(11) + map->get(2);
	else
		return map->get(1) + map->get(11);
}
TESTCASES
1 54
0 24
OUTPUT
.version 29726381821

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s
.include hash_map.s

.data
NULL: .word 0

HEAP_START: .word 0

.text
    b main

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mvn r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r4, r0
    mov r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r5, r0
    mov r0, #1                               /* Load parameters */
    push { r0 }
    mov r0, #99
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #20                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #0                               /* Load parameters */
    push { r0 }
    mov r0, #98
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #30                              /* Load parameters */
    push { r0 }
    mov r0, #2
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
    mov r0, #0                               /* Load parameters */
    push { r0 }
    mov r0, #99
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
/* Remove key 1 from map, results in -1 value */
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    mov r1, #99
    mov r0, r5
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    cmp r3, #0
    beq main.L1
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r6, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r6, r6, r0
    mov r1, #2
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r6, r0
    pop { pc }
main.L1: 
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r6, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r6, r0
    pop { pc }
