SOURCE
#include <hash_map.sn>

int main(bool add) {
	HashMap<int, int>* map = HashMap::create<int, int>(10, -1);
	
	HashMap<char, bool>* map2 = HashMap::create<char, bool>(10, false);
	
	map2->put('c', true);
	map->put<>(11, 20);
	map2->put<>('b', false);
	map->put(2, 30);
	
	map->replace(11, 25);
	map2->replace<>('c', false);
	map->replace<>(11, 25);
	
	/* Remove key 1 from map, results in -1 value */
	map->remove(1);
	map2->remove<>('c');
	
	if (add) 
		return map->get(1) + map->get(11) + map->get(2);
	else
		return map->get(1) + map->get(11);
}
TESTCASES
1 54
0 24
OUTPUT
.data
List.LinkedList: .word 0
List.ListNode: .word 0
Map.HashMap: .word 0
Map.MapEntry: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global Map.tupleKeyMatcher_P_1_1
    
.global List.LinkedList.add_P_4
    
List.LinkedList.add_P_4:                     /* Function: List.LinkedList.add, Provisos: Map.MapEntry<INT,INT> */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3, r4, fp, lr}
    mov fp, sp
    mov r3, r0
    add r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    ldr r0, [fp, #16]
    push { r0 }
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Load null address */
    push { r0 }
    ldr r0, .POOL@1321795593_0_List.ListNode
    push { r0 }
    bl init_P_6                              /* Call init */
    mov r4, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #4]                         /* Store value to struct field */
    mov r0, r4                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r4, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r4, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    mov sp, fp
    ldmfd sp!, {r3, r4, fp, lr}
    add sp, sp, #16
    bx lr
    
.global List.LinkedList.remove_P_1
List.LinkedList.remove_P_1:                  /* Function: List.LinkedList.remove, Provisos: Map.MapEntry<INT,INT>* | Map.MapEntry<CHAR,BOOL>* */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.remove.L0
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L0: 
    cmp r4, #0
    bne List.LinkedList.remove.L3
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    ldmfdeq sp!, {r3-r5, pc}
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    cmp r0, r5
    bne List.LinkedList.remove.L6
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
List.LinkedList.remove.L6: 
    mov r0, r5                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L3: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
List.LinkedList.remove.L10:                  /* Evaluate condition */
    cmp r4, #0
    ble List.LinkedList.remove.L11
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L13
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L13: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.remove.L10
List.LinkedList.remove.L11: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L16
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L16: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.remove.L19
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
List.LinkedList.remove.L19: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r3, [r1, #4]                         /* Load field from struct */
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bl free                                  /* Call free */
    mov r0, r3                               /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r3, [r1, #4]                         /* Store value to struct field */
    ldmfd sp!, {r3-r5, pc}
    
.global List.LinkedList.create_P_1
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: Map.MapEntry<INT,INT>* */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    mov r0, #0
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    ldr r2, .POOL@1321795593_0_L1_NULL       /* Load null address */
    stmfd sp!, {r0-r2}
    ldr r0, .POOL@1321795593_0_List.LinkedList
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL@1321795593_0_List.LinkedList: .word List.LinkedList
.POOL@1321795593_0_List.ListNode: .word List.ListNode
.POOL@1321795593_0_L1_NULL: .word NULL

.global Hash.hash
Hash.hash:                                   /* Function: Hash.hash */
    sub sp, sp, #20
    stmea sp, {r3-r7}
    mov r3, r0
    mov r4, r1
    ldr r5, .POOL@-1224426605_0_LIT_5381     /* Evaluate Expression */
    mov r6, #0
Hash.hash.L1: 
    cmp r6, r4
    bge Hash.hash.L2
    add r0, r3, r6
    ldr r7, [r10, r0, lsl #2]                /* Load from address */
    lsl r2, r5, #6
    add r0, r7, r2
    lsl r2, r5, #16
    add r1, r0, r2
    sub r5, r1, r5
    add r6, r6, #1
    b Hash.hash.L1
Hash.hash.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r7}
    bx lr
.POOL@-1224426605_0_LIT_5381: .word 5381

Map.tupleKeyMatcher_P_1_1:                   /* Function: Map.tupleKeyMatcher, Provisos: INT, INT | CHAR, BOOL */
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    mov r5, #0
Map.tupleKeyMatcher.L1: 
    mov r0, #1
    mov r1, #2
    cmp r5, #2
    bge Map.tupleKeyMatcher.L2
    add r0, r3, r5
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    push { r0 }
    add r0, r4, r5
    ldr r1, [r10, r0, lsl #2]                /* Load from address */
    pop { r0 }
    cmp r0, r1
    beq Map.tupleKeyMatcher.L3
    mov r0, #0                               /* Evaluate Expression */
    b Map.tupleKeyMatcher.L5
Map.tupleKeyMatcher.L3: 
    add r5, r5, #1
    b Map.tupleKeyMatcher.L1
Map.tupleKeyMatcher.L2: 
    mov r0, #1                               /* Evaluate Expression */
Map.tupleKeyMatcher.L5: 
    ldmfd sp!, {r3-r5}
    bx lr
    
.global Map.HashMap.put_P_1_1
Map.HashMap.put_P_1_1:                       /* Function: Map.HashMap.put, Provisos: CHAR, BOOL | INT, INT */
    sub sp, sp, #24
    stmea sp, {r3-r6, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    mov r4, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r6, r1
    bne Map.HashMap.put.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r6, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
Map.HashMap.put.L0: 
    push { r4 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    ldr r0, .POOL@1002268144_0_Map.MapEntry
    push { r0 }
    bl init_P_4                              /* Call init */
    mov r3, r0
    mov r0, r6
    push { r3 }
    bl List.LinkedList.add_P_4               /* Call List.LinkedList.add */
    mov sp, fp
    ldmfd sp!, {r3-r6, fp, pc}
    
.global Map.HashMap.replace_P_1_1
Map.HashMap.replace_P_1_1:                   /* Function: Map.HashMap.replace, Provisos: INT, INT | CHAR, BOOL */
    sub sp, sp, #24
    stmea sp, {r3-r6, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    mov r4, r2
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r6, r1
    beq Map.HashMap.replace.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    ldr r0, .POOL@1002268144_0_Map.MapEntry
    push { r0 }
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
Map.HashMap.replace.L3:                      /* Evaluate condition */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r3, r1
    beq Map.HashMap.replace.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.replace.L6
    push { r4 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    ldr r0, .POOL@1002268144_0_Map.MapEntry
    push { r0 }
    bl init_P_4                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    b Map.HashMap.replace.L4
Map.HashMap.replace.L6: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.replace.L3
Map.HashMap.replace.L4: 
    add sp, sp, #16
Map.HashMap.replace.L0: 
    mov sp, fp
    ldmfd sp!, {r3-r6, fp, pc}
    
.global Map.HashMap.get_P_1_1
Map.HashMap.get_P_1_1:                       /* Function: Map.HashMap.get, Provisos: INT, INT */
    sub sp, sp, #20
    stmea sp, {r3-r5, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r4, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r4
    ldr r5, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r5, r1
    beq Map.HashMap.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    ldr r0, .POOL@1002268144_0_Map.MapEntry
    push { r0 }
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
Map.HashMap.get.L3:                          /* Evaluate condition */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r4, r1
    beq Map.HashMap.get.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.get.L6
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    b Map.HashMap.get.L8
Map.HashMap.get.L6: 
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.get.L3
Map.HashMap.get.L4: 
    add sp, sp, #16
Map.HashMap.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
Map.HashMap.get.L8: 
    mov sp, fp
    ldmfd sp!, {r3-r5, fp, pc}
    
.global Map.HashMap.remove_P_1_1
Map.HashMap.remove_P_1_1:                    /* Function: Map.HashMap.remove, Provisos: INT, INT | CHAR, BOOL */
    sub sp, sp, #20
    stmea sp, {r3-r5, fp, lr}
    mov fp, sp
    mov r3, r0
    push { r1 }                              /* Push declaration on stack, referenced by addressof. */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    push { r0 }
    mov r1, #1
    sub r0, fp, #4
    lsr r0, r0, #2
    bl Hash.hash                             /* Call Hash.hash */
    pop { r1 }
    bl __op_mod                              /* Call __op_mod */
    mov r4, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]                         /* Load field from struct */
    add r0, r1, r4
    ldr r5, [r10, r0, lsl #2]                /* Load from address */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r5, r1
    beq Map.HashMap.remove.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #12]
    lsl r1, r1, #2
    ldr r0, [r1, #12]                        /* Load field from struct */
    push { r0 }
    mov r0, #0
    push { r0 }
    ldr r0, [fp, #-4]
    push { r0 }
    ldr r0, .POOL@1002268144_0_Map.MapEntry
    push { r0 }
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    mov r0, #0                               /* Evaluate Expression */
    mov r4, #0
Map.HashMap.remove.L3:                       /* Evaluate condition */
    ldr r1, .POOL@1002268144_0_L1_NULL       /* Load null address */
    cmp r3, r1
    beq Map.HashMap.remove.L4
    sub r0, fp, #20                          /* Load parameters */
    lsr r0, r0, #2
    push { r0 }
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    pop { r1 }
    bl Map.tupleKeyMatcher_P_1_1             /* Call Map.tupleKeyMatcher */
    cmp r0, #0
    beq Map.HashMap.remove.L6
    mov r0, r5
    mov r1, r4
    bl List.LinkedList.remove_P_1            /* Call List.LinkedList.remove */
    b Map.HashMap.remove.L4
Map.HashMap.remove.L6: 
    mov r0, r4
    add r4, r4, #1
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r3, [r1, #4]                         /* Load field from struct */
    b Map.HashMap.remove.L3
Map.HashMap.remove.L4: 
    add sp, sp, #16
Map.HashMap.remove.L0: 
    mov sp, fp
    ldmfd sp!, {r3-r5, fp, pc}
    
.global Map.HashMap.create_P_1_1
Map.HashMap.create_P_1_1:                    /* Function: Map.HashMap.create, Provisos: INT, INT | CHAR, BOOL */
    sub sp, sp, #20
    stmea sp, {r3-r6, lr}
    mov r3, r0
    mov r4, r1
    bl resv                                  /* Call resv */
    mov r5, r0
    mov r6, #0
Map.HashMap.create.L1: 
    cmp r6, r3
    bge Map.HashMap.create.L2
    ldr r0, .POOL@1002268144_0_L1_NULL       /* Evaluate Expression */
    push { r0 }
    add r0, r5, r6
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r6, r6, #1
    b Map.HashMap.create.L1
Map.HashMap.create.L2: 
    mov r0, #4                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r6, r0
    add r0, r6, #3
    str r4, [r10, r0, lsl #2]
    push { r6 }
    push { r3 }
    push { r5 }
    ldr r0, .POOL@1002268144_0_Map.HashMap
    push { r0 }
    bl init_P_4                              /* Call init */
    ldmfd sp!, {r3-r6, pc}
.POOL@1002268144_0_Map.HashMap: .word Map.HashMap
.POOL@1002268144_0_Map.MapEntry: .word Map.MapEntry
.POOL@1002268144_0_L1_NULL: .word NULL
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mvn r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r4, r0
    mov r1, #0
    mov r0, #10
    bl Map.HashMap.create_P_1_1              /* Call Map.HashMap.create */
    mov r5, r0
    mov r0, #1                               /* Load parameters */
    push { r0 }
    mov r0, #99
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #20                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #0                               /* Load parameters */
    push { r0 }
    mov r0, #98
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #30                              /* Load parameters */
    push { r0 }
    mov r0, #2
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.put_P_1_1                 /* Call Map.HashMap.put */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
    mov r0, #0                               /* Load parameters */
    push { r0 }
    mov r0, #99
    push { r0 }
    mov r0, r5
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
    mov r0, #25                              /* Load parameters */
    push { r0 }
    mov r0, #11
    push { r0 }
    mov r0, r4
    ldmfd sp!, {r1, r2}
    bl Map.HashMap.replace_P_1_1             /* Call Map.HashMap.replace */
/* Remove key 1 from map, results in -1 value */
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    mov r1, #99
    mov r0, r5
    bl Map.HashMap.remove_P_1_1              /* Call Map.HashMap.remove */
    cmp r3, #0
    beq main.L1
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r6, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r6, r6, r0
    mov r1, #2
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r6, r0
    pop { pc }
main.L1: 
    mov r1, #1
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    mov r6, r0
    mov r1, #11
    mov r0, r4
    bl Map.HashMap.get_P_1_1                 /* Call Map.HashMap.get */
    add r0, r6, r0
    pop { pc }
