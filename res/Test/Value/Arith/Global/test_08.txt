SOURCE
#include<linked_list.sn>

enum Type {
	REQ, RES, DAT;
}

struct X<T> {
	Type type;
	T payload;
}

/* Message queue that temporarily hold incoming messages */
LinkedList<X<int>>* buffer = LinkedList::create<X<int>>(0...);

int main() {
	buffer->add<>(X<int>::(Type.REQ, 20));
	X<int> x = buffer->get<>(0);
	return x.payload;
}
TESTCASES
20
OUTPUT
.version 0

.include maybe resv.s
.include maybe init.s
.include maybe free.s
.include linked_list.s

.data
X_P_1: .word 0
buffer: .skip 4
NULL: .word 0
HEAP_START: .word 0

.text
    b main_init

/* Message queue that temporarily hold incoming messages */

.global main

/* Initialize the global variables */
main_init: 
    sub sp, sp, #20
    stmea sp, {r0-r2, fp, lr}
    ldr r2, .P222341303_X_P_1
    mov r1, #0
    mov r0, #0                               /* Load parameters */
    stmfd sp!, {r0-r2}
    bl List.LinkedList.create_P_3            /* Call List.LinkedList.create */
    ldr r1, .P222341303_buffer               /* Load from .data section */
    str r0, [r1]
    ldmfd sp!, {r0-r2, fp, lr}
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r1, #0
    mov r0, #20                              /* Load parameters */
    stmfd sp!, {r0, r1}
    ldr r0, .P222341303_X_P_1
    push { r0 }
    ldr r0, .P222341303_buffer               /* Load from .data section */
    ldr r0, [r0]
    bl List.LinkedList.add_P_3               /* Call List.LinkedList.add */
    mov r1, #0
    ldr r0, .P222341303_buffer               /* Load from .data section */
    ldr r0, [r0]
    bl List.LinkedList.get_P_3               /* Call List.LinkedList.get */
    ldr r0, [fp, #-4]                        /* Load field from struct */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P222341303_buffer: .word buffer
.P222341303_X_P_1: .word X_P_1

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

