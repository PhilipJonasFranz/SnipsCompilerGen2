SOURCE
struct Bar {
	int x;
	int y;
}

Bar baz() {
	Bar b = Bar::(3, 10);
	return b;
}

int[2] foo(int b) {
	int [2] x = {b, 5};
	return x;
}

int main(int a) {
	int[2] x0 = foo(a);
	int[2] x1 = foo(a * 2);
	Bar b0 = baz();
	return x0 [0] + x1 [0] + x1 [1] + b0.y;
}
TESTCASES
0 15
2 21
OUTPUT
.version 16347086921

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Bar: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global baz
baz:                                         /* Function: baz */
    push { fp }
    mov fp, sp
    mov r0, #10                              /* Evaluate Expression */
    mov r1, #3
    stmfd sp!, {r0, r1}
    ldr r0, .P1594258110_Bar
    push { r0 }
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    mov r2, sp
    mov sp, fp
    pop { fp }
    mov r0, #12
    add r1, r2, #12
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1594258110_Bar: .word Bar

.global foo
foo:                                         /* Function: foo */
    push { r3, fp }
    mov fp, sp
    mov r3, r0
    mov r0, #5                               /* Evaluate Expression */
    push { r0 }
    push { r3 }
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    ldr r1, [fp, #-8]
    stmfd sp!, {r0, r1}
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r3, fp}
    mov r0, #8
    add r1, r2, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    bl foo                                   /* Call foo */
    lsl r0, r3, #1
    bl foo                                   /* Call foo */
    bl baz                                   /* Evaluate Expression */
    ldr r0, [fp, #-8]
    ldr r2, [fp, #-16]
    add r0, r0, r2
    ldr r2, [fp, #-12]
    add r0, r0, r2
    ldr r2, [fp, #-20]                       /* Load field from struct */
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {fp, pc}
