SOURCE
struct Data {
	int [3] arr;
}

int main(int x, int y) {
	Data[2]* data = (Data[2]*) resv(sizeof(Data[2]));
	*data = {Data::({1, 2, 3}), Data::({4, 5, 6})};
	
	data [0]->arr [1] = 5;
	return data [y]->arr [x];
}
TESTCASES
0 0 1
1 0 5
2 0 3
0 1 4
1 1 5
2 1 6
OUTPUT
.version 0

.include maybe resv.s

.data
Data: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r4, r1
    mov r0, #8                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r5, r0
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    stmfd sp!, {r0-r2}
    ldr r0, .P1851904504_Data
    push { r0 }
    mov r0, #3
    mov r1, #2
    mov r2, #1
    stmfd sp!, {r0-r2}
    ldr r0, .P1851904504_Data
    lsl r1, r5, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    pop { r0 }
    str r0, [r1, #24]
    pop { r0 }
    str r0, [r1, #28]
    mov r0, #5                               /* Evaluate Expression */
    lsl r1, r5, #2                           /* Convert to bytes */
    str r0, [r1, #8]                         /* Store value to struct field */
    lsl r1, r5, #2                           /* Convert to bytes */
    lsl r2, r4, #2
    lsl r2, r2, #2
    add r1, r1, r2
    add r1, r1, #4
    lsl r2, r3, #2
    ldr r0, [r1, r2]                         /* Load field from struct */
    pop { pc }
.P1851904504_Data: .word Data
