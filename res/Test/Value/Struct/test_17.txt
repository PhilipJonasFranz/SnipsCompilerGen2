SOURCE
struct Data {
	int [3] arr;
}

int main(int x, int y) {
	Data [2] data = {Data::({1, 2, 3}), Data::({4, 5, 6})};
	data [0].arr [1] = 5;
	return data [y].arr [x];
}
TESTCASES
0 0 1
1 0 5
2 0 3
0 1 4
1 1 5
2 1 6
OUTPUT
.version 26610250215

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Data: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global main
main:                                        /* Function: main */
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    stmfd sp!, {r0-r2}
    ldr r0, .P1880533655_Data
    push { r0 }
    mov r0, #3
    mov r1, #2
    mov r2, #1
    stmfd sp!, {r0-r2}
    ldr r0, .P1880533655_Data
    push { r0 }
    mov r0, #5                               /* Evaluate Expression */
    str r0, [fp, #-24]                       /* Store value to struct field */
    sub r1, fp, #32                          /* Evaluate Expression */
    mov r2, #0                               /* Calculate offset of sub structure */
    lsl r0, r4, #4
    add r2, r2, r0
    add r1, r1, r2
    add r1, r1, #4
    lsl r2, r3, #2
    ldr r0, [r1, r2]                         /* Load field from struct */
    mov sp, fp
    bx lr
.P1880533655_Data: .word Data
