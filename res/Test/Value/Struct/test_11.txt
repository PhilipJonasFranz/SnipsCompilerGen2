SOURCE
struct Capsule<T> {
	T cap;
}

struct Data<T> {
	T value;
	Capsule<T> c;
}

Data<T>* create<T>() {
	Data<T>* pointer = (Data<T>*) resv(sizeof(Data<T>));
	return pointer;
}

int main(int x) {
	Data<int[2]>* data = create<int[2]>();
	*data = Data<int[2]>::({x, x * 2}, Capsule<int[2]>::({3, 4}));
	return data->value [1] + data->c.cap [1];
}
TESTCASES
0 4
1 6
2 8
OUTPUT
.data
HEAP_START: .word 0
Capsule: .word 0
Data: .word 0

.text
    b main
    
.global resv
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
    add r3, r0, #1
    ldr r0, .POOL1_L0_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
resv.L6:                                     /* Evaluate condition */
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
    b resv.L7
resv.L10: 
    add r5, r5, r6
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL1_L0_HEAP_START: .word HEAP_START

.global create_P_2
create_P_2:                                  /* Function: create, Provisos: INT[2] */
    mov r0, #6                               /* Evaluate Expression */
    b resv                                   /* Call resv */
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    bl create_P_2                            /* Evaluate Expression */
    mov r4, r0
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #3
    stmfd sp!, {r0, r1}
    ldr r0, .POOL0_Capsule
    push { r0 }
    lsl r0, r3, #1
    push { r0 }
    ldr r0, .POOL0_Data
    lsl r1, r4, #2
    str r0, [r1]
    str r3, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    pop { r0 }
    str r0, [r1, #20]
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r2, [r1, #20]                        /* Load field from struct */
    add r0, r0, r2
    pop { pc }
.POOL0_Data: .word Data
.POOL0_Capsule: .word Capsule
