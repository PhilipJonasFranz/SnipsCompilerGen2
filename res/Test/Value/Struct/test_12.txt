SOURCE
#include<linked_list.sn>

int main(int x) {
	LinkedList<int>* l = create<int>(0);
	
	l->add<int>(10);
	l->add<int>(5);
	l->add<int>(12);
	
	int r = l->get<int>(x);
	
	l->destroy();
	
	return r;
}
TESTCASES
0 10
1 5
2 12
OUTPUT
.data
List.LinkedList: .word 0
List.ListNode: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main
    
.global List.LinkedList.add_P_1
    
List.LinkedList.add_P_1:                     /* Function: List.LinkedList.add, Provisos: INT */
    mov r10, #0
    sub sp, sp, #16
    stmea sp, {r3-r5, lr}
    mov r3, r0
    mov r4, r1
    push { r4 }
    ldr r0, .POOL@1321795593_0_L1_NULL       /* Load null address */
    push { r0 }
    ldr r0, .POOL@1321795593_0_List.ListNode
    push { r0 }
    bl init_P_3                              /* Call init */
    mov r5, r0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.add.L1
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #4]                         /* Store value to struct field */
    mov r0, r5                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
    b List.LinkedList.add.L0
List.LinkedList.add.L1: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #8]
    lsl r1, r1, #2
    str r5, [r1, #4]                         /* Store value to struct field */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r5, [r1, #8]                         /* Store value to struct field */
List.LinkedList.add.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    add r1, r1, #12
    ldr r0, [r1]
    add r2, r0, #1
    str r2, [r1]
    ldmfd sp!, {r3-r5, pc}
    
.global List.LinkedList.get_P_1
List.LinkedList.get_P_1:                     /* Function: List.LinkedList.get, Provisos: INT */
    mov r10, #0
    sub sp, sp, #12
    stmea sp, {r3-r5}
    mov r3, r0
    mov r4, r1
    cmp r1, #0
    bge List.LinkedList.get.L0
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L0: 
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
List.LinkedList.get.L3:                      /* Evaluate condition */
    cmp r4, #0
    beq List.LinkedList.get.L4
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r0, r1
    bne List.LinkedList.get.L5
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r0, [r1, #16]                        /* Load field from struct */
    b List.LinkedList.get.L7
List.LinkedList.get.L5: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r5, [r1, #4]                         /* Load field from struct */
    mov r0, r4
    sub r4, r4, #1
    b List.LinkedList.get.L3
List.LinkedList.get.L4: 
    lsl r1, r5, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
List.LinkedList.get.L7: 
    ldmfd sp!, {r3-r5}
    bx lr
    
.global List.LinkedList.destroy_P_1
List.LinkedList.destroy_P_1:                 /* Function: List.LinkedList.destroy, Provisos: INT */
    sub sp, sp, #12
    stmea sp, {r3, r4, lr}
    mov r3, r0
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
List.LinkedList.destroy.L1:                  /* Evaluate condition */
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    cmp r4, r1
    beq List.LinkedList.destroy.L2
    mov r0, r4                               /* Load parameters */
    bl free                                  /* Call free */
    lsl r1, r4, #2                           /* Convert to bytes */
    ldr r4, [r1, #4]                         /* Load field from struct */
    b List.LinkedList.destroy.L1
List.LinkedList.destroy.L2: 
    mov r0, r3                               /* Load parameters */
    bl free                                  /* Call free */
    ldmfd sp!, {r3, r4, pc}
    
.global List.LinkedList.create_P_1
List.LinkedList.create_P_1:                  /* Function: List.LinkedList.create, Provisos: INT */
    push { r3, lr }
    mov r3, r0
    push { r3 }
    mov r0, #0
    ldr r1, .POOL@1321795593_0_L1_NULL       /* Load null address */
    ldr r2, .POOL@1321795593_0_L1_NULL       /* Load null address */
    stmfd sp!, {r0-r2}
    ldr r0, .POOL@1321795593_0_List.LinkedList
    push { r0 }
    bl init_P_5                              /* Call init */
    ldmfd sp!, {r3, pc}
.POOL@1321795593_0_List.LinkedList: .word List.LinkedList
.POOL@1321795593_0_List.ListNode: .word List.ListNode
.POOL@1321795593_0_L1_NULL: .word NULL

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r0, #0                               /* Evaluate Expression */
    bl List.LinkedList.create_P_1            /* Call List.LinkedList.create */
    mov r4, r0
    mov r1, #10
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #5
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r1, #12
    mov r0, r4
    bl List.LinkedList.add_P_1               /* Call List.LinkedList.add */
    mov r0, r4
    mov r1, r3
    bl List.LinkedList.get_P_1               /* Call List.LinkedList.get */
    mov r5, r0
    mov r0, r4                               /* Load parameters */
    bl List.LinkedList.destroy_P_1           /* Call List.LinkedList.destroy */
    mov r0, r5                               /* Evaluate Expression */
    pop { pc }
