SOURCE
#include<binary_tree.sn>

int relation(int x, int y) {
	return (x == y)? 0 : ((x < y)? -1 : 1);
}

int main(int r, int d0, int d1) {
	TreeNode<int>* root = create<int>(10);
	
	root->insert<int>(relation, 5);
	root->insert<int>(relation, 12);
	root->insert<int>(relation, 11);
	root->insert<int>(relation, 15);
	root->insert<int>(relation, 7);
	root->insert<int>(relation, 2);

	if (r == 1) return root->value;
	else {
		TreeNode<int>* n = root;
		if (d0 == 1) n = n->right;
		else n = n->left;
		
		if (d1 == 2) return n->value;
		
		if (d1 == 1) n = n->right;
		else n = n->left;
		
		return n->value;
	}
}
TESTCASES
1 0 0 10
0 0 2 5
0 0 0 2
0 0 1 7
0 1 2 12
0 1 0 11
0 1 1 15
OUTPUT
.version 58768319103

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s
.include binary_tree.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global relation
lambda_relation:                             /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
relation:                                    /* Function: relation */
    push { r3, r4 }
    mov r3, r0
    mov r4, r1
    cmp r0, r1
    bne relation.L0
    mov r0, #0
    b relation.L3
relation.L0: 
    cmp r3, r4
    bge relation.L2
    mvn r0, #0
    b relation.L3
relation.L2: 
    mov r0, #1
relation.L3: 
    ldmfd sp!, {r3, r4}
    bx lr

.global main
main:                                        /* Function: main */
    push { lr }
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r0, #10                              /* Evaluate Expression */
    bl Tree.TreeNode.create_P_1              /* Call Tree.TreeNode.create */
    mov r6, r0
    mov r0, #5                               /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #12                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #11                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #15                              /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #7                               /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    mov r0, #2                               /* Load parameters */
    push { r0 }
    add r10, pc, #8
    b lambda_relation
    mov r10, #0
    push { r0 }
    mov r0, r6
    ldmfd sp!, {r1, r2}
    bl Tree.TreeNode.insert_P_1              /* Call Tree.TreeNode.insert */
    cmp r3, #1
    bne main.L1
    lsl r1, r6, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
main.L1: 
    mov r0, r6                               /* Evaluate Expression */
    mov r7, r6
    cmp r4, #1
    bne main.L4
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
    b main.L3
main.L4: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
main.L3: 
    cmp r5, #2
    bne main.L6
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
main.L6: 
    cmp r5, #1
    bne main.L9
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #8]                         /* Load field from struct */
    b main.L8
main.L9: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r7, [r1, #4]                         /* Load field from struct */
main.L8: 
    lsl r1, r7, #2                           /* Convert to bytes */
    ldr r0, [r1, #12]                        /* Load field from struct */
    pop { pc }
