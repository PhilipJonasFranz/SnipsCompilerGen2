SOURCE
int foo(int [2] [3] [2] m, int x, int y, int z) {
	m [0] [1] [1] = 8;
	
	return m [x] [y] [z];
}

int main(int x, int y, int z) {
	int [2] [3] [2] m = {{{1, 2}, {3, 4}, {5, 6}}, 
						 {{7, 8}, {9, 10}, {11, 12}}};
						 
	return foo(m, x, y, z);
}
TESTCASES
0 0 0 1
0 0 1 2
0 1 0 3
0 1 1 8
0 2 0 5
0 2 1 6
1 0 0 7
1 0 1 8
1 1 0 9
1 1 1 10
1 2 0 11
1 2 1 12
OUTPUT
.version 0

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global foo
foo:                                         /* Function: foo */
    sub sp, sp, #16
    stmea sp, {r3-r5, fp}
    mov fp, sp
    mov r5, r2
    mov r4, r1
    mov r3, r0
    mov r1, #8
    str r1, [fp, #28]
    mov r2, #0                               /* Evaluate Expression */
    mov r1, #24
    mul r0, r3, r1
    add r2, r2, r0
    lsl r0, r4, #3
    add r2, r2, r0
    lsl r0, r5, #2
    add r2, r2, r0
    add r0, fp, #16
    ldr r0, [r0, r2]
    mov sp, fp
    ldmfd sp!, {r3-r5, fp}
    add sp, sp, #48
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r5, r2
    mov r4, r1
    mov r3, r0
    mov r1, #11
    mov r0, #12                              /* Evaluate Expression */
    stmfd sp!, {r0, r1}
    mov r1, #9
    mov r0, #10
    stmfd sp!, {r0, r1}
    mov r1, #7
    mov r0, #8
    stmfd sp!, {r0, r1}
    mov r1, #5
    mov r0, #6
    stmfd sp!, {r0, r1}
    mov r1, #3
    mov r0, #4
    stmfd sp!, {r0, r1}
    mov r1, #1
    mov r0, #2
    stmfd sp!, {r0, r1}
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #28
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #40
    ldmfa r0, {r0-r2}
    push { r4, r5, r2, r1, r0 }
    mov r0, r3
    ldmfd sp!, {r1, r2}
    bl foo                                   /* Call foo */
    mov sp, fp
    ldmfd sp!, {fp, pc}
