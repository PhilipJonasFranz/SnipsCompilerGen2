SOURCE
int foo(int [3] [2] y) {
	return y [2] [1];
}

int main(int b) {
	int [3] [2] m = {{1, 2}, {4, 5}, {7, 8}};
	return foo(m) + b;
}
TESTCASES
0 8
4 12
OUTPUT
.version 1517394323

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
lambda_foo: .word foo
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global foo
foo:                                         /* Function: foo */
    ldr r0, [sp, #20]
    add sp, sp, #24
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #8                               /* Evaluate Expression */
    mov r1, #7
    stmfd sp!, {r0, r1}
    mov r0, #5
    mov r1, #4
    stmfd sp!, {r0, r1}
    mov r0, #2
    mov r1, #1
    stmfd sp!, {r0, r1}
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    bl foo                                   /* Call foo */
    add r0, r0, r3
    mov sp, fp
    ldmfd sp!, {fp, pc}
