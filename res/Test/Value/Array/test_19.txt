SOURCE
int __vec_cross(int [3] v, int [3] w) {
	int sum = 0;
	
	#unroll depth = 3
	for (int i = 0; i < 3; i = i + 1) {
		sum = sum + (v [i] * w [i]);
	}
	
	return sum;
}

int main() {
	int [3] [3] m = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
	int [3] [3] n = {{1, 4, 7}, {2, 5, 8}, {3, 6, 9}};

	return __vec_cross(m [0], n [0]);
}
TESTCASES
30
OUTPUT
.version 0

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

.global __vec_cross
__vec_cross:                                 /* Function: __vec_cross */
    ldr r0, [sp, #12]
    ldr r2, [sp]
    mul r1, r0, r2
    ldr r0, [sp, #16]
    ldr r2, [sp, #4]
    mul r2, r0, r2
    add r1, r1, r2
    ldr r0, [sp, #20]
    ldr r2, [sp, #8]
    mul r2, r0, r2
    add r0, r1, r2
    add sp, sp, #24
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r2, #7
    mov r1, #8
    mov r0, #9                               /* Evaluate Expression */
    stmfd sp!, {r0-r2}
    mov r2, #4
    mov r1, #5
    mov r0, #6
    stmfd sp!, {r0-r2}
    mov r2, #1
    mov r1, #2
    mov r0, #3
    stmfd sp!, {r0-r2}
    mov r2, #3
    mov r1, #6
    mov r0, #9                               /* Evaluate Expression */
    stmfd sp!, {r0-r2}
    mov r2, #2
    mov r1, #5
    mov r0, #8
    stmfd sp!, {r0-r2}
    mov r2, #1
    mov r1, #4
    mov r0, #7
    stmfd sp!, {r0-r2}
    sub r1, fp, #36                          /* Start of structure in stack */
    ldr r0, [r1, #8]
    ldr r2, [r1, #4]
    stmfd sp!, {r0, r2}
    ldr r0, [r1]
    sub r1, fp, #72                          /* Start of structure in stack */
    push { r0 }
    ldr r0, [r1, #8]
    ldr r2, [r1, #4]
    stmfd sp!, {r0, r2}
    ldr r0, [r1]
    push { r0 }
    bl __vec_cross                           /* Call __vec_cross */
    mov sp, fp
    ldmfd sp!, {fp, pc}
