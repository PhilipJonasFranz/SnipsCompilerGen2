SOURCE
int [2] [2] vec = {{3, 7}, {2, 0}};
	
int foo(int [2] [2] v, int x, int y) {
	v = {{1, 5}, {9, 2}};
	return v [x] [y];
}

int main(int x, int y) { 
	return foo(vec, x, y);
}
TESTCASES
0 0 1
0 1 5
1 0 9
1 1 2
OUTPUT
.version 0

.data
vec: .skip 16
NULL: .word 0
HEAP_START: .word 0

.text
    b main_init

.global foo
foo:                                         /* Function: foo */
    sub sp, sp, #12
    stmea sp, {r3, r4, fp}
    mov fp, sp
    mov r4, r1
    mov r3, r0
    mov r1, #9
    mov r0, #2                               /* Evaluate Expression */
    stmfd sp!, {r0, r1}
    mov r1, #1
    mov r0, #5
    stmfd sp!, {r0, r1}
    pop { r0 }
    add r1, fp, #12                          /* Start of structure in stack */
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r2, #0                               /* Evaluate Expression */
    lsl r0, r3, #3
    add r2, r2, r0
    lsl r0, r4, #2
    add r2, r2, r0
    add r0, fp, #12
    ldr r0, [r0, r2]
    mov sp, fp
    ldmfd sp!, {r3, r4, fp}
    add sp, sp, #16
    bx lr

.global main

/* Initialize the global variables */
main_init: 
    sub sp, sp, #12
    stmea sp, {r0-r2}
    mov r1, #2
    mov r0, #0
    stmfd sp!, {r0, r1}
    mov r1, #3
    mov r0, #7
    stmfd sp!, {r0, r1}
    pop { r0 }
    ldr r1, .P626856297_vec                  /* Load from .data section */
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    ldmfd sp!, {r0-r2}
main:                                        /* Function: main */
    mov r4, r1
    mov r3, r0
    ldr r2, .P626856297_vec                  /* Evaluate Expression */
    add r2, r2, #12
    ldr r0, [r2] #-4
    ldr r1, [r2] #-4
    stmfd sp!, {r0, r1}
    ldr r0, [r2] #-4
    ldr r1, [r2] #-4
    stmfd sp!, {r0, r1}
    mov r1, r4
    mov r0, r3
    b foo                                    /* Call foo */
.P626856297_vec: .word vec
