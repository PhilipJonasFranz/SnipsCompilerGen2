SOURCE
int bar(int [3] z) {
	return z [0] + z [1] + z [2];
}

int foo(int [3] x, int [3] y, int i) {
	return x [i] + bar(y) * 2;
}

int main(int b) {
	int [3] x = {1, 2, 3};
	int [3] y = {4, 5, 6};
	return foo(x, y, b);
}
TESTCASES
0 31
1 32
2 33
OUTPUT
.version 4232150491

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0

HEAP_START: .word 0

.text
    b main

.global bar
bar:                                         /* Function: bar */
    ldr r0, [sp]
    ldr r2, [sp, #4]
    add r0, r0, r2
    ldr r2, [sp, #8]
    add r0, r0, r2
    add sp, sp, #12
    bx lr

.global foo
foo:                                         /* Function: foo */
    push { fp, lr }
    mov fp, sp
    lsl r2, r0, #2
    add r0, fp, #20
    ldr r0, [r0, r2]
    push { r0 }
    add r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    bl bar                                   /* Call bar */
    pop { r1 }
    lsl r2, r0, #1
    add r0, r1, r2
    mov sp, fp
    ldmfd sp!, {fp, lr}
    add sp, sp, #24
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #3                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #1
    stmfd sp!, {r0-r2}
    mov r0, #6                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #4
    stmfd sp!, {r0-r2}
    sub r0, fp, #4
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    sub r0, fp, #16
    ldmfa r0, {r0-r2}
    stmfd sp!, {r0-r2}
    mov r0, r3
    bl foo                                   /* Call foo */
    mov sp, fp
    ldmfd sp!, {fp, pc}
