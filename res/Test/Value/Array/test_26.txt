SOURCE
int main(int x, int y) { 
	int [2] [2] vec = {{3, 7}, {2, 0}};
	
	vec = {{1, 5}, {9, 2}};
	return vec [x] [y];
}
TESTCASES
0 0 1
0 1 5
1 0 9
1 1 2
OUTPUT
.version 17922432850

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global main
main:                                        /* Function: main */
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r0, #0                               /* Evaluate Expression */
    mov r1, #2
    stmfd sp!, {r0, r1}
    mov r0, #7
    mov r1, #3
    stmfd sp!, {r0, r1}
    mov r0, #2                               /* Evaluate Expression */
    mov r1, #9
    stmfd sp!, {r0, r1}
    mov r0, #5
    mov r1, #1
    stmfd sp!, {r0, r1}
    pop { r0 }
    sub r1, fp, #16                          /* Start of structure in stack */
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    mov r2, #0                               /* Evaluate Expression */
    lsl r0, r3, #3
    add r2, r2, r0
    lsl r0, r4, #2
    add r2, r2, r0
    sub r0, fp, #16
    ldr r0, [r0, r2]
    mov sp, fp
    bx lr
