SOURCE
struct Y {
	int v;
	
	void incr() {
		self->v += 5;
	}
}

struct X {
	Y* r;
	
	void relay() {
		(self->r)->incr();
	}
}

int main() {
	X* x = init<>(X::(init<>(Y::(10))));
	x->relay();
	return x->r->v;
}
TESTCASES
15
OUTPUT
.data
HEAP_START: .word 0
Y: .word 0
X: .word 0

.text
    b main
    
.global init_P_2
init_P_2:                                    /* Function: init, Provisos: Y | X */
    sub sp, sp, #12
    stmea sp, {r3, fp, lr}
    mov fp, sp
    mov r0, #2                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r3, r0
    ldr r0, [fp, #16]                        /* Evaluate Expression */
    ldr r1, [fp, #12]
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r3, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    mov r0, r3                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r3, fp, lr}
    add sp, sp, #8
    bx lr
    
.global resv
resv:                                        /* Function: resv */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
    add r3, r0, #1
    ldr r0, .POOL1_L0_HEAP_START             /* Evaluate Expression */
    lsr r4, r0, #2
resv.L1:                                     /* Evaluate condition */
    ldr r0, [r10, r4, lsl #2]                /* Load from address */
    cmp r0, #0
    beq resv.L2
    ldr r5, [r10, r4, lsl #2]                /* Load from address */
    cmp r5, #0
    bge resv.L4
resv.L6:                                     /* Evaluate condition */
    sub r0, r4, r5
    ldr r6, [r10, r0, lsl #2]                /* Load from address */
    cmp r6, #0
    ble resv.L9
    b resv.L7
resv.L9: 
    cmp r6, #0
    bne resv.L10
    mov r0, #0                               /* Evaluate Expression */
    mov r5, #0
    b resv.L7
resv.L10: 
    add r5, r5, r6
    b resv.L6
resv.L7: 
    str r5, [r10, r4, lsl #2]
    cmp r5, #0
    bne resv.L12
    mov r0, #0                               /* Evaluate Expression */
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
resv.L12: 
    rsb r5, r5, #0
    cmp r5, r3
    bne resv.L15
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
    b resv.L19
resv.L15: 
    cmp r5, r3
    ble resv.L16
    sub r5, r5, r3
    str r3, [r10, r4, lsl #2]
    rsb r0, r5, #0
    push { r0 }
    add r0, r4, r3
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    add r0, r4, #1
    b resv.L19
resv.L16: 
    add r4, r4, r5
    b resv.L3
resv.L4: 
    add r4, r4, r5
resv.L3: 
    b resv.L1
resv.L2: 
    str r3, [r10, r4, lsl #2]
    add r0, r4, #1
resv.L19: 
    ldmfd sp!, {r3-r6}
    bx lr
.POOL1_L0_HEAP_START: .word HEAP_START

.global Y.incr
Y.incr:                                      /* Function: Y.incr */
    lsl r1, r0, #2                           /* Convert to bytes */
    add r1, r1, #4
    ldr r2, [r1]
    add r0, r2, #5
    str r0, [r1]                             /* Store value to struct field */
    bx lr
    
.global X.relay
X.relay:                                     /* Function: X.relay */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    b Y.incr                                 /* Call Y.incr */
    
.global main
main:                                        /* Function: main */
    push { lr }
    mov r0, #10                              /* Evaluate Expression */
    push { r0 }
    ldr r0, .POOL0_Y
    push { r0 }
    bl init_P_2                              /* Call init */
    push { r0 }
    ldr r0, .POOL0_X
    push { r0 }
    bl init_P_2                              /* Call init */
    mov r3, r0
    bl X.relay                               /* Call X.relay */
    lsl r1, r3, #2                           /* Convert to bytes */
    ldr r1, [r1, #4]
    lsl r1, r1, #2
    ldr r0, [r1, #4]                         /* Load field from struct */
    pop { pc }
.POOL0_X: .word X
.POOL0_Y: .word Y
