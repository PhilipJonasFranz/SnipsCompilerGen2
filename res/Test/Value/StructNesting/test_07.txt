SOURCE
namespace Storage {

	enum Type {
		DATA, LABEL;
	}

	struct X<T> {
		
		T value;
		
		Type type;
		
		T getValue<T>() {
			return self->value;
		}
		
		Type getType<T>() {
			return self->type;
		}
		
		void setValue<T>(T v) {
			self->value = v;
		}
		
		void setType<T>(Type t) {
			self->type = t;
		}
		
	}

}

int main() {
	X<int> x0 = Storage::X<>::(12, Type.DATA);
	X<int>* x = &x0;
	
	if (x->getType() == Type.DATA) {
		x->setValue<int>(4);
		return x->getValue<int>();
	}
	else return 2;
}
TESTCASES
4
OUTPUT
.version 22547661567

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Storage.X_P_1: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global Storage.X.getValue_P_1
Storage.X.getValue_P_1:                      /* Function: Storage.X.getValue, Provisos: INT */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bx lr

.global Storage.X.getType_P_1
Storage.X.getType_P_1:                       /* Function: Storage.X.getType, Provisos: INT */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #8]                         /* Load field from struct */
    bx lr

.global Storage.X.setValue_P_1
Storage.X.setValue_P_1:                      /* Function: Storage.X.setValue, Provisos: INT */
    push { r3 }
    mov r3, r0
    mov r0, r1                               /* Evaluate Expression */
    lsl r1, r3, #2                           /* Convert to bytes */
    str r0, [r1, #4]                         /* Store value to struct field */
    pop { r3 }
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #0                               /* Evaluate Expression */
    mov r1, #12
    stmfd sp!, {r0, r1}
    ldr r0, .P902851238_Storage.X_P_1
    push { r0 }
    sub r0, fp, #12                          /* Evaluate Expression */
    lsr r3, r0, #2
    mov r0, r3                               /* Load parameters */
    bl Storage.X.getType_P_1                 /* Call Storage.X.getType */
    cmp r0, #0
    bne main.L1
    mov r1, #4
    mov r0, r3
    bl Storage.X.setValue_P_1                /* Call Storage.X.setValue */
    mov r0, r3                               /* Evaluate Expression */
    bl Storage.X.getValue_P_1                /* Call Storage.X.getValue */
    b main.L3
main.L1: 
    mov r0, #2                               /* Evaluate Expression */
main.L3: 
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P902851238_Storage.X_P_1: .word Storage.X_P_1
