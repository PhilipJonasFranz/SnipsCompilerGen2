SOURCE
namespace Storage {

	struct X<T> {
		
		T value;
		
		T get<T>() {
			return self->value;
		}
		
	}

}

int main() {
	X<int> [2] x0 = {Storage::X<>::(12), Storage::X<>::(25)};
	
	return (&(x0 [0]))->get<int>() + x0 [1].get<int>();
}
TESTCASES
37
OUTPUT
.version 25176945450

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
Storage.X: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global Storage.X.get_P_1
Storage.X.get_P_1:                           /* Function: Storage.X.get, Provisos: INT */
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #25                              /* Evaluate Expression */
    push { r0 }
    ldr r0, .P931480389_Storage.X
    push { r0 }
    mov r0, #12
    push { r0 }
    ldr r0, .P931480389_Storage.X
    push { r0 }
    sub r0, fp, #16
    lsr r0, r0, #2
    bl Storage.X.get_P_1                     /* Call Storage.X.get */
    mov r3, r0
    sub r0, fp, #8
    lsr r0, r0, #2
    bl Storage.X.get_P_1                     /* Call Storage.X.get */
    add r0, r3, r0
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P931480389_Storage.X: .word Storage.X
