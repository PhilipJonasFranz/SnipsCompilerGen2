SOURCE
struct X<T> {
	T* r;
	
	void pipe<T>(func T -> T pred) {
		*self->r = pred(*self->r);
	}
}

int add5(int x) {
	return x + 5;
}

int main() {
	int v = 10;
	X<int>* x = init<>(X<int>::(&v));
	x->pipe<>(add5);
	return v;
}
TESTCASES
15
OUTPUT
.version 27140327159

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
X_P_1: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global X.pipe_P_1
X.pipe_P_1:                                  /* Function: X.pipe, Provisos: INT */
    sub sp, sp, #12
    stmea sp, {r3, r4, lr}
    mov r3, r0
    mov r4, r1
    lsl r1, r0, #2                           /* Convert to bytes */
    ldr r0, [r1, #4]                         /* Load field from struct */
    ldr r0, [r10, r0, lsl #2]                /* Load from address */
    add lr, pc, #8
    mov pc, r4
    lsl r1, r3, #2                           /* Convert to bytes */
    push { r0 }
    ldr r0, [r1, #4]                         /* Load field from struct */
    lsl r1, r0, #2
    pop { r0 }
    str r0, [r1]
    ldmfd sp!, {r3, r4, pc}

.global add5
lambda_add5:                                 /* Function address getter for predication */
    add r0, pc, #8
    mov pc, r10
add5:                                        /* Function: add5 */
    add r0, r0, #5
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, #10
    sub r0, fp, #4                           /* Evaluate Expression */
    lsr r0, r0, #2
    push { r3 }                              /* Push declaration on stack, referenced by addressof. */
    push { r0 }
    ldr r0, .P845592936_X_P_1
    push { r0 }
    bl init_P_2                              /* Call init */
    mov r3, r0
    add r10, pc, #8                          /* Load parameters */
    b lambda_add5
    mov r10, #0
    mov r1, r0
    mov r0, r3
    bl X.pipe_P_1                            /* Call X.pipe */
    ldr r0, [fp, #-4]                        /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P845592936_X_P_1: .word X_P_1
