SOURCE
struct Exception {
	int code;
}

int checkThreshold(int* arr, int t) signals Exception {
	int max = 0;
	int s = hsize(arr);
	for (int i = 0; i < s; i++) {
		int v = *(arr + i);
		if (v >= t) {
			signal Exception::(v);
		}
		else {
			if (v > max) max = v;
		}
	}
	
	return max;
}

int main(int t) {
	int* arr = (int*) resv(5);
	*arr = {6, 1, 7, 5, 9};
	
	int exit = 0;
	try {
		exit = checkThreshold(arr, t);
	} watch (Exception e) {
		exit = e.code;
	}
	
	return exit;
}
TESTCASES
0 6
1 6
2 6
3 6
4 6
5 6
6 6
7 7
8 9
9 9
10 9
11 9
OUTPUT
.version 23214893647

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
lambda_checkThreshold: .word checkThreshold
Exception: .word 0
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global checkThreshold
checkThreshold:                              /* Function: checkThreshold */
    sub sp, sp, #32
    stmea sp, {r3-r8, fp, lr}
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, #0
    bl hsize                                 /* Call hsize */
    mov r6, r0
    mov r7, #0
checkThreshold.L2: 
    cmp r7, r6
    bge checkThreshold.L3
    add r0, r3, r7
    ldr r8, [r10, r0, lsl #2]                /* Load from address */
    cmp r8, r4
    blt checkThreshold.L5
    push { r8 }
    ldr r0, .P1055849891_Exception
    push { r0 }
    ldr r12, .P1055849891_Exception
    mov r0, #8
    b checkThreshold.L0                      /* Exception thrown, branch to escape target */
checkThreshold.L5: 
    cmp r8, r5
    ble checkThreshold.L7
    mov r0, r8                               /* Evaluate Expression */
    mov r5, r8
checkThreshold.L7: 
    add r7, r7, #1
    b checkThreshold.L2
checkThreshold.L3: 
    mov r0, r5                               /* Evaluate Expression */
checkThreshold.L0: 
    cmp r12, #0
    mov r2, sp
    mov sp, fp
    ldmfd sp!, {r3-r8, fp, lr}
    bxeq lr
    add r1, r2, r0
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    bx lr
.P1055849891_Exception: .word Exception

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r0, #5                               /* Evaluate Expression */
    bl resv                                  /* Call resv */
    mov r4, r0
    mov r0, #9                               /* Evaluate Expression */
    mov r1, #5
    mov r2, #7
    stmfd sp!, {r0-r2}
    mov r0, #1
    mov r1, #6
    stmfd sp!, {r0, r1}
    pop { r0 }
    lsl r1, r4, #2
    str r0, [r1]
    pop { r0 }
    str r0, [r1, #4]
    pop { r0 }
    str r0, [r1, #8]
    pop { r0 }
    str r0, [r1, #12]
    pop { r0 }
    str r0, [r1, #16]
    mov r5, #0
    mov r0, r4
    mov r1, r3
    push { sp }
    bl checkThreshold                        /* Call checkThreshold */
    cmp r12, #0
    bne main.L0                              /* Exception thrown, branch to escape target */
    mov r5, r0
    ldr sp, [fp, #-4]                        /* Load backed up sp from stack */
    add sp, sp, #4
    b main.L2
main.L0: 
    mov r1, sp
    ldr sp, [fp, #-4]                        /* Load backed up sp from stack */
    add sp, sp, #4
    ldr r12, .P1055849890_Exception
    bne main.L2
    add r1, r1, #8
    mov r0, #8
    add r10, pc, #8                          /* Setup return address for routine */
    b _routine_stack_copy_
    mov r10, #0
    ldr r5, [fp, #-4]                        /* Load field from struct */
    add sp, sp, #8
    mov r12, #0
main.L2: 
    mov r0, r5                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {fp, pc}
.P1055849890_Exception: .word Exception
