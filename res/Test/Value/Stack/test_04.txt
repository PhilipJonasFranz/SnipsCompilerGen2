SOURCE
int sq(int n) {
	return n * n;
}

int sqsum(int a, int b, int c, int d, int e) {
	int r = sq(a) + sq(b) + sq(c) + sq(d) + sq(e);
	return r;
}

int main(int a, int b, int c, int d, int e) {
	return sqsum(a, b, c, d, e);
}
TESTCASES
1 2 3 4 5 55
2 2 2 2 2 20
OUTPUT
.version 33285411424

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0
HEAP_START: .word 0

.text
    b main

/* System Routine, used to copy memory on the stack */
_routine_stack_copy_: 
    cmp r0, #0
    beq _routine_stack_copy_end_
    ldr r2, [r1, #-4]!
    sub r0, r0, #4
    push { r2 }
    b _routine_stack_copy_
_routine_stack_copy_end_: 
    mov pc, r10

.global sq
sq:                                          /* Function: sq */
    mul r0, r0, r0
    bx lr

.global sqsum
sqsum:                                       /* Function: sqsum */
    sub sp, sp, #20
    stmea sp, {r4-r6, fp, lr}
    mov fp, sp
    mov r4, r1
    mov r5, r2
    bl sq                                    /* Call sq */
    mov r6, r0
    mov r0, r4                               /* Load parameters */
    bl sq                                    /* Call sq */
    add r6, r6, r0
    mov r0, r5                               /* Load parameters */
    bl sq                                    /* Call sq */
    add r6, r6, r0
    ldr r0, [fp, #24]                        /* Load parameters */
    bl sq                                    /* Call sq */
    add r6, r6, r0
    ldr r0, [fp, #20]                        /* Load parameters */
    bl sq                                    /* Call sq */
    add r6, r6, r0
    mov r0, r6                               /* Evaluate Expression */
    mov sp, fp
    ldmfd sp!, {r4-r6, fp, lr}
    add sp, sp, #8
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    ldr r0, [fp, #12]                        /* Evaluate Expression */
    push { r0 }
    ldr r0, [fp, #8]
    push { r0 }
    push { r5 }
    push { r4 }
    mov r0, r3
    ldmfd sp!, {r1, r2}
    bl sqsum                                 /* Call sqsum */
    mov sp, fp
    ldmfd sp!, {fp, pc}
