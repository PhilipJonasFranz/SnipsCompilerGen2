DESCRIPTION
Same as test_9, but change statement order.
SOURCE
int bar(int x, int y, int z, int u) {
	return (z * u) + (x * y);
}

int foo(int x0, int x1) {
	return x1 + x0;
}

int main(int a, int b, int c, int d) {
	int b6 = foo(d, 6);
	int b4 = foo(c, 4);
	int b1 = foo(a, 1);
	int b3 = foo(b, 3);
	int t = bar(a, b, c, d);
	int b0 = foo(a, 0);
	int b2 = foo(b, 2);
	int b5 = foo(c, 5);
	int b7 = foo(d, 7);
	return b2 + b0 + b1 + b3 + t + b4 + b5 + b6 + b7;
}
TESTCASES
0 0 0 0 28
1 2 3 4 62
OUTPUT
.version 35708181112

.include maybe __op_div.s
.include maybe __op_mod.s
.include maybe resv.s
.include maybe isa.s
.include maybe init.s
.include maybe hsize.s
.include maybe free.s

.data
NULL: .word 0

HEAP_START: .word 0

.text
    b main

.global bar
bar:                                         /* Function: bar */
    sub sp, sp, #12
    stmea sp, {r3, r4, fp}
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r1, r2                               /* Evaluate Expression */
    ldr r2, [fp, #12]
    mul r0, r1, r2
    mul r2, r3, r4
    add r0, r0, r2
    mov sp, fp
    ldmfd sp!, {r3, r4, fp}
    add sp, sp, #4
    bx lr

.global foo
foo:                                         /* Function: foo */
    add r0, r1, r0
    bx lr

.global main
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r3, r0
    mov r4, r1
    mov r5, r2
    mov r0, #6                               /* Evaluate Expression */
    push { r0 }
    ldr r0, [fp, #8]
    pop { r1 }
    bl foo                                   /* Call foo */
    mov r6, r0
    mov r1, #4
    mov r0, r5
    bl foo                                   /* Call foo */
    mov r7, r0
    mov r1, #1
    mov r0, r3
    bl foo                                   /* Call foo */
    mov r8, r0
    mov r1, #3
    mov r0, r4
    bl foo                                   /* Call foo */
    mov r9, r0
    ldr r0, [fp, #8]                         /* Evaluate Expression */
    push { r0 }
    push { r5 }
    push { r4 }
    mov r0, r3
    ldmfd sp!, {r1, r2}
    bl bar                                   /* Call bar */
    mov r1, #0
    push { r0 }
    mov r0, r3
    bl foo                                   /* Call foo */
    mov r1, #2
    push { r0 }
    mov r0, r4
    bl foo                                   /* Call foo */
    mov r3, r0
    mov r1, #5
    mov r0, r5
    bl foo                                   /* Call foo */
    mov r4, r0
    mov r0, #7                               /* Evaluate Expression */
    push { r0 }
    ldr r0, [fp, #8]
    pop { r1 }
    bl foo                                   /* Call foo */
    mov r5, r0
    ldr r2, [fp, #-8]
    add r1, r3, r2
    add r1, r1, r8
    add r1, r1, r9
    ldr r2, [fp, #-4]
    add r1, r1, r2
    add r1, r1, r7
    add r1, r1, r4
    add r1, r1, r6
    add r0, r1, r5
    mov sp, fp
    ldmfd sp!, {fp, pc}
