SOURCE
int smallest(int* arr, int count) {
	int smallest = arr [0];
	for (int i = 0; i < count; i++) 
		if (arr [i] < smallest) smallest = arr [i];

	return smallest;
}

int main() {
	int [5] arr = {5, 3, 7, 2, 4};
	return smallest(&arr, 5);
}
TESTCASES
2
OUTPUT
/* --test_07.txt */
    b main
smallest@0:                                  /* Function: smallest */
    sub sp, sp, #16
    stmea sp, {r3-r6}
    mov r3, r0
    mov r4, r1
    mov r2, #0
    ldr r5, [r2, r3, lsl #2]
    mov r6, #0
smallest@0.L1: 
    cmp r6, r4
    bge smallest@0.L2
    lsl r2, r6, #2
    ldr r0, [r2, r3, lsl #2]
    cmp r0, r5
    bge smallest@0.L3
    lsl r2, r6, #2
    ldr r5, [r2, r3, lsl #2]
smallest@0.L3: 
    add r6, r6, #1
    b smallest@0.L1
smallest@0.L2: 
    mov r0, r5                               /* Evaluate Expression */
    ldmfd sp!, {r3-r6}
    bx lr
    
main:                                        /* Function: main */
    push { fp, lr }
    mov fp, sp
    mov r0, #4                               /* Evaluate Expression */
    mov r1, #2
    mov r2, #7
    stmfd sp!, {r0-r2}
    mov r0, #3
    mov r1, #5
    stmfd sp!, {r0, r1}
    mov r1, #5
    sub r0, fp, #20
    lsr r0, r0, #2
    bl smallest@0                            /* Call smallest */
    mov sp, fp
    ldmfd sp!, {fp, pc}
    
