#include<linked_list.sn>
#include<integer.sn>

/*
 * To use this library, you need to include the following line
 * in the SWARM32PC config: <Device>DISPLAY, dynamic, Devices.Display</Device>.
 * This will add the display adapter to the configuration.
 * Also, you need to set the displayBase variable to the word offset the
 * device memory appends to. Also make sure the processor has enough ram,
 * string operations can quickly fill it, but only temporarily. This package
 * uses the linked_list package.
 */
namespace Display {

	/* This variable should be set to the first word in the memory section of the display */
	shared int displayBase = 4096;
	
	restricted int cursor = 0;

	/* The amount of characters that fit in a single line. */
	restricted int lineLength = 70;
	
	/* The amount of lines that fit on the display. */
	restricted int lineCount = 32;

	/* Reads the char from the display input at base + 1 */
	#unsafe
	restricted char getChar() {
		int* base = (int*) (Display::displayBase + 1);
		int c = *base;
		*base = 0;
		return (char) c;
	}
	
	#unsafe
	restricted void wrapLine() {
		/* Clear the next two lines */
		for (int i = cursor; i < (cursor + (lineLength * 2)); i++) {
			/* Calculate the address of the character that should be cleared. */
			int* addr = (int*) (Display::displayBase + 2 + (i % (lineLength * lineCount)));
			*addr = 0;
		}
	}
	
	/* Puts the char at the current cursor location and increments the cursor */
	#unsafe
	restricted void putChar(char c) {
		/* Clean the next two lines if cursor is at start of line */
		if (cursor % lineLength == 0)
			wrapLine();
		
		/* Calculate the address where to put the character */
		int* base = (int*) (Display::displayBase + 2);
		base += cursor;
		
		/* Store character */
		*base = (int) c;
		
		/* Increment cursor, and wrap around if cursor reached end of page */
		Display::cursor = (Display::cursor + 1) % (lineCount * lineLength);
	}
	
	namespace Print {
		
		/* Skips the cursor to a new line */
		#unsafe
		shared void println() {
			int rest = 70 - (cursor % 70);
			for (int i = 0; i < rest; i++)
				putChar((char) 0);
		}
		
		/* Prints the string the given char pointer points to. */
		#unsafe
		shared void printString(char* str) {
			int c = 0;
			while ((int) (*(str + c)) != 0) {
				char c0 = *(str + c);
				putChar(c0);
				c++;
			}
		}
		
		/* Prints out given string and a new line */
		#unsafe
		shared void printlnString(char* str) {
			printString(str);
			println();
		}
		
		/* Prints out given string and formats in given arguments. */
		#unsafe
		shared void printf(char* c, void* f) {
			int i = 0;
			int fi = 0;
			while ((int) (*(c + i)) != 0) {
				char c0 = *(c + i);
				
				if (c0 == '%') {
					/* Signals Formatting */
					i++;
					
					/* Load formatting char */
					c0 = *(c + i);
					
					if (c0 == 'd') {
						/* Format int */
						int toFormat = *(f + fi);
						char* str = Integer::toString(toFormat);
						printString(str);
						free(str);
					}
					else if (c0 == 's') {
						/* Print templated string */
						char* toFormat = *(f + fi);
						printString(toFormat);
					}
					
					fi++;
				}
				else if (c0 == '\') {
					/* Signals Escape Character */
					i++;
					
					/* Load escaped char */
					c0 = *(c + i);
					
					if (c0 == 'n') {
						/* Newline */
						println();
					}
					else if (c0 == '"') {
						/* Newline */
						putChar('"');
					}
					else if (c0 == 't') {
						/* Tab */
						putChar(' ');
						putChar(' ');
						putChar(' ');
						putChar(' ');
					}
				}
				else {
					/* Simply put the char to the display */
					putChar(c0);
				}
				
				i++;
			}
		}
		
	}

	namespace Scanf {
		
		#unsafe
		shared char* scanf() {
			/* Create a list where the input is temporarily stored */
			LinkedList<char>* input = LinkedList::create<>((char) 0);
			
			while (true) {
				char c = Display::getChar();
				/* Input is a ., break */
				if ((int) c == 46) {
					break;
				}
				
				/* Input is a new character, add to input */
				if ((int) c != 0) {
					input->add<>(c);
					putChar(c);
				}
			}
			
			println();
			
			/* Read all the characters from the list and place them in the output string */
			int size = input->size();
			char* arr = resv(size + 1);
			
			for (int i = 0; i < size; i++) 
				*(arr + i) = input->get<>(i);

			/* Insert 0 char termination */
			*(arr + size) = (char) 0;
			
			/* Free the list and return the string pointer */
			input->destroy();
			return arr;
		}
		
	}

} 
