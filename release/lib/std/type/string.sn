#include<linked_list.hn>

namespace String {

	shared bool equals(char* str0, char* str1) {
		bool equal = true;
		int c = 0;
		while (true) {
			char c0 = *(str0 + c);
			char c1 = *(str1 + c);
    		
			equal &&= c0 == c1;
			if ((int) c0 == 0 || (int) c1 == 0) break;
			c++;
		}
    	
		return equal;
	}

	shared char* substring(char* str, int begin, int end) {
		auto subs = LinkedList::create<>((char) 0);
		
		/* Iterate over String and collect characters in range */
		int c = 0;
		while (((int) *(str + c)) != 0) {
			if (c >= begin && c < end) 
				subs->add<>(*(str + c));
			c++;
		}

		int size = subs->size();

		/* Substring only consists out of null char */
		if (size == 1 && (int) subs->get<>(0) == 0) {
			char* str0 = resv(1);
			*str = (char) 0;
			
			/* Cleanup and return result */
			free(subs);
			return str0;
		}
		else {
			/* Collect chars in list in string and insert 0 char */
			char* str0 = resv(size + 1);
			
			for (int i = 0; i < size; i++) 
				*(str0 + i) = subs->get<>(i);
			
			*(str0 + size) = (char) 0;
		
			/* Cleanup and return result */
			free(subs);
			return str0;
		}
	}
	
	shared int length(char* str) {
		int size = 0;
		
		while (((int) *(str + size)) != 0) size++;
		
		/* Add 0 char */
		return size + 1;
	}

	shared char charAt(char* str, int i) {
		if (i >= String::length(str) || i < 0) return (char) 0;
		else return *(str + i);
	}
	
	shared char* concat(char* str0, char* str1) {
		int s0 = length(str0) - 1;
		int s1 = length(str1);
		
		/* Result length is equal to both strings length minus one 0 char. */
		char* r = resv(s0 + s1);
		
		/* Copy first part of string */
		for (int i = 0; i < s0; i++) 
			*(r + i) = *(str0 + i);
		
		/* Copy second part with 0 char */
		for (int i = 0; i < s1; i++) 
			*(r + i + s0) = *(str1 + i);
		
		return r;
	}

} 
