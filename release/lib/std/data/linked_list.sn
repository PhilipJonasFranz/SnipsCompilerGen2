#include<collection.hn>
#include<serializable.hn>

namespace List {

	restricted struct LinkedList<T> : Collection<T>, Serializable {
		
		shared void add(T x) {
			/* Initialize the new List Node, set the next pointer to null */
			auto node = init<>(ListNode<T>::(null, x));
		
			if (self->head == null) self->head = node;
			if (self->tail != null) self->tail->next = node;
			
			self->tail = node;
			self->size++;
		}
		
		shared T get(int i) {
			/* Index out of bounds */
			if (i < 0 || i >= self->size) 
				return self->defValue;
		
			/* List walk is safe since index is within bounds */
			auto node = self->head;
			while (i != 0) {
				node = node->next;
				i--;
			}
			
			return node->value;	
		}
		
		shared void set(int i, T value) {
			auto node = self->head;
			while (i != 0) {
				if (node->next == null) return;
				
				/* Jump to next */
				node = node->next;
				i--;
			}
			
			node->value = value;
		}
		
		shared void destroy<T:void>() {
			ListNode<void>* node = self->head;
			while (node != null) {
				free(node);
				node = node->next;
			}
			free(self);
		}
		
		shared bool contains(func (T, T) -> bool pred, T x) {
			auto node = self->head;
			while (true) {
				if (node == null) return false;
				
				/* Value found */
				if (pred(x, node->value)) return true;
				
				/* Jump to next */
				node = node->next;
			}
		}
		
		shared ListNode<T>* find(func (T, T) -> bool pred, T x) {
			auto node = self->head;
			while (node != null) {
				/* 
				 * If the predicate matches given value, 
				 * the searched value was found.
				 */
				if (pred(x, node->value)) return node;
				
				/* Jump to next */
				node = node->next;
			}

			/* Not found */
			return null;
		}
		
		shared int size<T:void>() {
			return self->size;
		}
		
		shared int count<T:void>() {
			ListNode<void>* node = self->head;
			int size = 0;
			while (node != null) {
				node = node->next;
				size++;
			}
			
			self->size = size;
			return size;
		}
		
		shared int indexOf<T:void>(ListNode<void>* node) {
			/* Start iterating at head of list */
			ListNode<void>* n0 = self->head;
			
			/* Current index */
			int i = 0;
			
			while (n0 != null) {
				/* Addresses match, node found, return current index */
				if (n0 == node) return i;
				else {
					/* Jump to next node */
					n0 = n0->next;
					i++;
				}
			}
			
			/* Node is not part of the list. */
			return -1;
		}
		
		shared void remove<T:void>(int i) {
			/* Out of bounds */
			if (i < 0) return;
			
			if (i == 0) {
				/* Remove first element */
				if (self->head != null) {
					ListNode<void>* node = self->head;
					self->head = self->head->next;
					
					/* Only one element in list */
					if (self->tail == node) self->tail = null;
					
					self->size--;
					free(node);
				}
				
				return;
			}
			else {
				auto node = self->head;
				i--;
				
				/* Jump to element before element to remove */
				while (i > 0) {
					if (node->next == null) return;
					else {
						node = node->next;
						i--;
					}
				}
				
				/* Out of bounds */
				if (node->next == null) return;
				else {
					if (node->next->next == null) {
						/* Element to remove is last element in list */
						free(node->next);
						node->next = null;
						self->tail = node;
					}
					else {
						/* Cut out element and set next pointers */
						ListNode<void>* next = node->next->next;
						free(node->next);
						node->next = next;
					}
					
					self->size--;
					return;
				}
			}
		}
		
		shared void reverse() {
			int s = self->size;
			
			/* Current node */
			auto node = self->head;
				
			/* 
			 * List must contain at least two elements 
			 * to be 'reversable'.
			 */
			if (node != null && s > 1) {
				ListNode<T>* tail0 = node;
				
				/* Keep reference to original tail */
				auto head0 = node;
				
				/*
				 * For entire list, walk the list, and build
				 * reversed list in parallel.
				 */
				while (s > 0) {
					auto n0 = node->next;
					
					node->next = head0;
					head0 = node;
					
					node = n0;
					s--;
				}
				
				/* 
				 * Currently loop, cut at original 
				 * start of list, that is now the tail.
				 */
				tail0->next = null;
				
				/* Set new head and tail references */
				self->head = head0;
				self->tail = tail0;
			}
		}
		
		shared void clear<T:void>() {
			ListNode<void>* node = self->head;
			
			while (node != null) {
				free(node);
				node = node->next;
			}
			
			self->head = null;
			self->tail = null;
			
			return;
		}
		
		shared bool isEmpty<T:void>() {
			return self->head == null;
		}
		
		shared char* serialize() {
			// TODO
			return null;
		}
		
		static void* deserialize<T:void>(char* str) {
			return null;
		}
	
		static LinkedList<T>* create<T>(T defValue) {
			/* Initialize list, set pointers to null */
			return init<>(LinkedList<T>::(null, null, 0, defValue));
		}
		
	}
	
	#operator <<
	static LinkedList<T>* op_add<T>(LinkedList<T>* list, T value) {
		list->add(value);
		return list;
	}
	
} 
