#include<iterable.sn>
#include<serializable.sn>

/*
 * This package contains the utility to create a linked-list,
 * insert and remove values from it, as well as some functions
 * that give information about the state of the list.
 */
namespace List {

	/*
	 * A single list entry, contains a pointer to the next node
	 * and a value.
	 */
	restricted struct ListNode<T> {
		ListNode<T>* next;
		T value;
	}
	
	/*
	 * Wraps the list head and tail.
	 */
	restricted struct LinkedList<T> : Iterable<T>, Serializable {
		
		/* Points to the head of the list or is null. */
		ListNode<T>* head;
		
		/* Points to the last element of the list or is null. */
		ListNode<T>* tail;
		
		/* The default value that can be returned */
		T defValue;
		
		/*
		 * Creates a new list node for given value x and adds the node at the
		 * end of the list.
		 */
		shared void add<T>(T x) {
			/* Initialize the new List Node, set the next pointer to null */
			ListNode<T>* n = init<>(ListNode<T>::(null, x));
		
			if (self->head == null) {
				self->head = n;
				self->tail = n;
			}
			else {
				self->tail->next = n;
				self->tail = n;
			}	
		}
		
		/*
		 * Returns the value of the node at the given index. Returns
		 * the default value if the index is invalid.
		 */
		shared T get<T>(int i) {
			if (i < 0) return self->defValue;
		
			ListNode<T>* n = self->head;
			while (i != 0) {
				if (n->next == null) return self->defValue;
				
				/* Jump to next */
				n = n->next;
				i--;
			}
			
			return n->value;	
		}
		
		/*
		 * Returns the value of the node at the given index. Returns
		 * the default value if the index is invalid.
		 */
		shared void set<T>(int i, T value) {
			ListNode<T>* n = self->head;
			while (i != 0) {
				if (n->next == null) return;
				
				/* Jump to next */
				n = n->next;
				i--;
			}
			
			n->value = value;
		}
		
		/*
		 * Free the list by freeing all contained list nodes, and the list itself.
		 */
		shared void destroy<T:void>() {
			ListNode<void>* n = self->head;
			while (n != null) {
				free(n);
				n = n->next;
			}
			free(self);
		}
		
		/*
		 * Check if given list contains given value. If the current value matches
		 * the searched value determines the predicate.
		 */
		shared bool contains<T>(func (T, T) -> bool pred, T x) {
			ListNode<T>* n = self->head;
			while (true) {
				if (n == null) return false;
				
				/* Value found */
				if (pred(x, n->value)) return true;
				
				/* Jump to next */
				n = n->next;
			}
		}
		
		/*
		 * Finds the first node in the list that has given value.
		 * Returns a pointer to this list node, or 0 in case the
		 * value wasnt found.
		 */
		shared ListNode<T>* find<T>(func (T, T) -> bool pred, T x) {
			ListNode<T>* n = self->head;
			while (n != null) {
				/* 
				 * If the predicate matches given value, 
				 * the searched value was found.
				 */
				if (pred(x, n->value)) return n;
				
				/* Jump to next */
				n = n->next;
			}

			/* Not found */
			return null;
		}
		
		/*
		 * Returns the amount of elements stored in the list.
		 */
		shared int size<T:void>() {
			ListNode<void>* n = self->head;
			int size = 0;
			while (n != null) {
				n = n->next;
				size++;
			}
			return size;
		}
		
		/*
		 * Returns the index of given node in the list.
		 */
		shared int indexOf<T:void>(ListNode<void>* n) {
			/* Start iterating at head of list */
			ListNode<void>* n0 = self->head;
			
			/* Current index */
			int i = 0;
			
			while (n0 != null) {
				/* Addresses match, node found, return current index */
				if (n0 == n) return i;
				else {
					/* Jump to next node */
					n0 = n0->next;
					i++;
				}
			}
			
			/* Node is not part of the list. */
			return -1;
		}
		
		/*
		 * Removes the index at given index.
		 * If the index is out of bounds nothing is removed.
		 */
		shared void remove<T:void>(int i) {
			/* Out of bounds */
			if (i < 0) return;
			
			if (i == 0) {
				/* Remove first element */
				if (self->head != null) {
					ListNode<void>* n = self->head;
					self->head = self->head->next;
					
					/* Only one element in list */
					if (self->tail == n) self->tail = null;
					
					free(n);
				}
				
				return;
			}
			else {
				ListNode<T>* n = self->head;
				i--;
				
				/* Jump to element before element to remove */
				while (i > 0) {
					if (n->next == null) return;
					else {
						n = n->next;
						i--;
					}
				}
				
				/* Out of bounds */
				if (n->next == null) return;
				else {
					if (n->next->next == null) {
						/* Element to remove is last element in list */
						free(n->next);
						n->next = null;
						self->tail = n;
					}
					else {
						/* Cut out element and set next pointers */
						ListNode<void>* next = n->next->next;
						free(n->next);
						n->next = next;
					}
					return;
				}
			}
		}
		
		/*
		 * Removes all elements from the list
		 */
		shared void clear<T:void>() {
			ListNode<void>* n = self->head;
			while (n != null) {
				free(n);
				n = n->next;
			}
			
			self->head = null;
			self->tail = null;
			
			return;
		}

		/*
		 * Returns if the list is empty.
		 */
		shared bool isEmpty<T:void>() {
			return self->head == null;
		}
		
		shared char* serialize<T>() {
			// TODO
			return null;
		}
		
		static void* deserialize(char* str) {
			return null;
		}
	
	}
	
	/*
	 * Creates a new List Object and initializes the head an tail to null.
	 */
	shared LinkedList<T>* create<T>(T defValue) {
		/* Initialize list, set pointers to null */
		return init<>(LinkedList<T>::(null, null, defValue));
	}
	
} 
