/*
 * [BASE-PACKAGE]
 * 
 * This package contains the utility to create a linked-list,
 * insert and remove values from it, as well as some functions
 * that give information about the state of the list.
 */
namespace List {
	/*
	 * A single list entry, contains a pointer to the next node
	 * and a value.
	 */
	struct ListNode<T> {
		ListNode<T>* next;
		T value;
	}
	
	/*
	 * Wraps the list head and tail.
	 */
	struct LinkedList<T> {
		ListNode<T>* head;
		ListNode<T>* tail;
		T defValue;
	}
	
	/*
	 * Creates a new List Object and initializes the head an tail to null.
	 */
	shared LinkedList<T>* create<T>(T defValue) {
		LinkedList<T>* lp = resv(sizeof(LinkedList<T>));
	
		/* Initialize list, set pointers to null */
		*lp = LinkedList<T>::(null, null, defValue);
	
		return lp;
	}
	
	/*
	 * Free the list by freeing all contained list nodes, and the list itself.
	 */
	shared void destroy(LinkedList<void>* l) {
		ListNode<void>* n = l->head;
		while (n != null) {
			free(n);
			n = n->next;
		}
		free(l);
	}
	
	/*
	 * Creates a new list node for given value x and adds the node at the
	 * end of the list.
	 */
	shared void add<T>(LinkedList<T>* lp, T x) {
		ListNode<T>* n = resv(sizeof(ListNode<T>));
	
		/* Initialize the new List Node, set the next pointer to null */
		*n = ListNode<T>::(null, x);
	
		if (lp->head == null) {
			lp->head = n; // Dereference through pointer
			lp->tail = n;
		}
		else {
			lp->tail->next = n;
			lp->tail = n;
		}	
	}
	
	/*
	 * Returns the value of the node at the given index. Returns
	 * the default value if the index is invalid.
	 */
	shared T get<T>(LinkedList<T>* lp, int i) {
		if (i < 0) return lp->defValue;
	
		ListNode<T>* n = lp->head;
		while (i != 0) {
			if (n->next == null) return lp->defValue;
			
			/* Jump to next */
			n = n->next;
			i--;
		}
		
		return n->value;	
	}

	/*
	 * Returns the the node at the given index. Returns
	 * null if the index is invalid.
	 */
	shared ListNode<T>* getNode<T>(LinkedList<T>* lp, int i) {
		if (i < 0) return null;
	
		ListNode<T>* n = lp->head;
		while (i != 0) {
			if (n->next == null) return null;
			
			/* Jump to next */
			n = n->next;
			i--;
		}
		
		return n;	
	}
	
	/*
	 * Check if given list contains given value.
	 */
	shared bool contains<T>(LinkedList<T>* lp, T x) {
		ListNode<T>* n = lp->head;
		while (true) {
			if (n == null) return false;
			if (n->value == x) {
				/* Value found */
				return true;
			}
			/* Jump to next */
			n = n->next;
		}
	}
	
	/*
	 * Finds the first node in the list that has given value.
	 * Returns a pointer to this list node, or 0 in case the
	 * value wasnt found.
	 */
	shared ListNode<T>* find<T>(LinkedList<T>* lp, T x) {
		ListNode<T>* n = lp->head;
		while (n->next != null) {
			if (n->value == x) {
				return n;
			}
			/* Jump to next */
			n = n->next;
		}
		/* Not found */
		return null;
	}
	
	/*
	 * Returns the amount of elements stored in the list.
	 */
	shared int size(LinkedList<void>* lp) {
		ListNode<void>* n = lp->head;
		int size = 0;
		while (n != null) {
			n = n->next;
			size++;
		}
		return size;
	}
	
	/*
	 * Removes the index at given index.
	 * If the index is out of bounds nothing is removed.
	 */
	shared void remove(LinkedList<void>* lp, int i) {
		/* Out of bounds */
		if (i < 0) return;
		
		if (i == 0) {
			/* Remove first element */
			if (lp->head != null) {
				ListNode<void>* n = lp->head;
				lp->head = lp->head->next;
				
				/* Only one element in list */
				if (lp->tail == n) {
					lp->tail = null;
				}
				
				free(n);
			}
			
			return;
		}
		else {
			ListNode<void>* n = lp->head;
			i--;
			
			/* Jump to element before element to remove */
			while (i > 0) {
				if (n->next == null) return;
				else {
					n = n->next;
					i--;
				}
			}
			
			/* Out of bounds */
			if (n->next == null) return;
			else {
				if (n->next->next == null) {
					/* Element to remove is last element in list */
					free(n->next);
					n->next = null;
					lp->tail = n;
				}
				else {
					/* Cut out element and set next pointers */
					ListNode<void>* next = n->next->next;
					free(n->next);
					n->next = next;
				}
				return;
			}
		}
		
	}
}