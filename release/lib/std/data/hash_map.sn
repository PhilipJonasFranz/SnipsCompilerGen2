#include<hash.sn>
#include<linked_list.sn>

namespace Map {
	
	restricted bool tupleKeyMatcher<K, V>(MapEntry<K, V>* t0, MapEntry<K, V>* t1) {
		for (int i = 0; i < sizeof(K) + 1; i++) {
			if (*((void*) t0 + i) != *((void*) t1 + i)) return false;
		}
		
		return true;
	}
	
	restricted struct HashMap<K, V> {
	
		shared void destroy<K:void, V:void>() {
			/* Destroy all the linked lists */
			for (int i = 0; i < self->size; i++) {
				auto l = *(self->storage + i);
				if (l != null) l->destroy();
			}
			
			/* Free the default value */
			free(self->defValue);
			
			/* Free the map itself */
			free(self);
		}
		
		shared void put(K key, V value) {
			/* Compute the hash of the key and limit it to the map size */
			int hash = Hash::hash(&key, sizeof(K)) % self->size;
			
			/* Load the corresponding linked list */
			auto l = *(self->storage + hash);
	
			/* Initialize new list at index */
			if (l == null) {
				l = LinkedList::create<MapEntry<K, V>*>(self->defValue);
				*(self->storage + hash) = l;
			}
			
			/* Initialize the new key/value tuple */
			auto new = init<>(MapEntry<K, V>::(key, 0, value));
			
			/* Store in the list */
			l->add<MapEntry<K, V>>(new);
		}
		
		shared void replace(K key, V value) {
			/* Compute the hash of the key and limit it to the map size */
			int hash = Hash::hash(&key, sizeof(K)) % self->size;
			
			/* Load the corresponding linked list */
			auto list = *(self->storage + hash);
	
			if (list != null) {
				/* Init tuple for searching */
				auto search = MapEntry<K, V>::(key, 0, self->defValue->value);
			
				/* Get iterator to go through list */
				auto node = list->head;
				
				/* Iterate through list, check for match */
				while (node != null) {
					if (tupleKeyMatcher<K, V>(node->value, &search)) {
						/* Reassign value with new tuple */
						auto new = init<>(MapEntry<K, V>::(key, 0, value));
						node->value = new;
						break;
					}
					else {
						node = node->next;
					}
				}
			}
		}
		
		shared V get(K key) {
			/* Compute the hash of the key and limit it to the map size */
			int hash = Hash::hash(&key, sizeof(K)) % self->size;
			
			/* Load the corresponding linked list */
			auto l = *(self->storage + hash);
			
			if (l != null) {
				/* Init tuple for searching */
				auto search = MapEntry<K, V>::(key, 0, self->defValue->value);
			
				/* Get iterator to go through list */
				auto n = l->head;
				
				/* Iterate through list, check for match, and remove */
				while (n != null) {
					if (tupleKeyMatcher<K, V>(n->value, &search)) 
						return n->value->value;
					else {
						n = n->next;
					}
				}
			}
	
			/* No value for key, return default value */
			return self->defValue->value;
		}
		
		shared void remove(K key) {
			/* Compute the hash of the key and limit it to the map size */
			int hash = Hash::hash(&key, sizeof(K)) % self->size;
			
			/* Load the corresponding linked list */
			auto l = *(self->storage + hash);
			
			if (l != null) {
				/* Init tuple for searching */
				auto search = MapEntry<K, V>::(key, 0, self->defValue->value);
			
				/* Get iterator to go through list */
				auto n = l->head;
				int i = 0;
				
				/* Iterate through list, check for match, and remove */
				while (n != null) {
					if (tupleKeyMatcher<K, V>(n->value, &search)) {
						l->remove(i);
						break;
					}
					else {
						i++;
						n = n->next;
					}
				}
			}
		}
		
		shared bool contains(K key) {
			/* Compute the hash of the key and limit it to the map size */
			int hash = Hash::hash(&key, sizeof(K)) % self->size;
			
			/* Load the corresponding linked list */
			auto l = *(self->storage + hash);
			
			if (l != null) {
				/* Init tuple for searching */
				auto search = MapEntry<K, V>::(key, 0, self->defValue->value);
			
				/* Get iterator to go through list */
				auto n = l->head;
				
				/* Iterate through list, check for match */
				while (n != null) {
					if (tupleKeyMatcher<K, V>(n->value, search)) return true;
					else {
						n = n->next;
					}
				}
			}
			
			return false;
		}
		
		shared LinkedList<MapEntry<K, V>*>* getEntries() {
			/* Create new list to collect */
			auto list = LinkedList::create<MapEntry<K, V>*>(self->defValue);
			
			/* Iterate over storage lists */
			int s = self->size;
			for (int i = 0; i < s; i++) {
				/* Get list from storage */
				auto l0 = *(self->storage + i);
				
				if (l0 != null) {
					/* Get iterator to go through list */
					auto n = l0->head;
					
					/* Iterate through list, add elements into list */
					while (n != null) {
						l->add<MapEntry<K, V>*>(n->value);
						n = n->next;
					}
				}
			}
			
			return list;
		}
		
		shared LinkedList<V>* getValues() {
			/* Create new list to collect */
			auto list = LinkedList::create<V>(self->defValue->value);
			
			/* Iterate over storage lists */
			int s = self->size;
			for (int i = 0; i < s; i++) {
				/* Get list from storage */
				auto l0 = *(self->storage + i);
				
				if (l0 != null) {
					/* Get iterator to go through list */
					auto n = l0->head;
					
					/* Iterate through list, add elements into list */
					while (n != null) {
						l->add<V>(n->value->value);
						n = n->next;
					}
				}
			}
			
			return list;
		}
	
		static HashMap<K, V>* create<K, V>(int size, V defValue) {
			/* Allocate space for linked list array */
			LinkedList<MapEntry<K, V>*>** storage = resv(size);
			
			/* Initialize storage to null */
			for (int i = 0; i < size; i++)
				*(storage + i) = null;
				
			/* Initialize default tuple */
			MapEntry<K, V>* def = resv(sizeof(MapEntry<K, V>));
			
			/* Place default value, skip key and padding */
			*((void) def + sizeof(K) + (int) __EN_SID + 1) = defValue;
			
			/* Create the hash map and initialize it */
			return init<>(HashMap<K, V>::(storage, size, def));
		}
	
	}
	
} 
