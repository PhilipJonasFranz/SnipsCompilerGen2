#include<collection.sn>
#include<serializable.sn>

/*
 * This package contains the utility to create a linked-list,
 * insert and remove values from it, as well as some functions
 * that give information about the state of the list.
 */
namespace List {

	restricted struct ListNode<T> {
		ListNode<T>* next;
		T value;
	}

	/*
	 * Wraps the list head and tail.
	 */
	restricted struct LinkedList<T> : Collection<T>, Serializable {
		
		ListNode<T>* head;
		ListNode<T>* tail;
		int size;
		T defValue;
		
		/*
		 * Creates a new list node for given value x and adds the node at the
		 * end of the list.
		 */
		shared void add(T x);
		
		/*
		 * Returns the value of the node at the given index. Returns
		 * the default value if the index is invalid.
		 */
		shared T get(int i);
		
		/*
		 * Returns the value of the node at the given index. Returns
		 * the default value if the index is invalid.
		 */
		shared void set(int i, T value);
		
		/*
		 * Free the list by freeing all contained list nodes, and the list itself.
		 */
		shared void destroy<T:void>();
		
		/*
		 * Check if given list contains given value. If the current value matches
		 * the searched value determines the predicate.
		 */
		shared bool contains(func (T, T) -> bool pred, T x);
		
		/*
		 * Finds the first node in the list that has given value.
		 * Returns a pointer to this list node, or 0 in case the
		 * value wasnt found.
		 */
		shared ListNode<T>* find(func (T, T) -> bool pred, T x);
		
		/*
		 * Returns the amount of elements stored in the list.
		 */
		shared int size<T:void>();
		
		/* 
		 * Re-counts the elements in the list. In general, the
		 * size count should not differ from the actual size, but
		 * when manual list manipulation is done, the size may very
		 * well be changed. Calling this method will refresh the size
		 * counter and returns the current size.
		 */
		shared int count<T:void>();
		
		/*
		 * Returns the index of given node in the list.
		 */
		shared int indexOf<T:void>(ListNode<void>* n);
		
		/*
		 * Removes the index at given index.
		 * If the index is out of bounds nothing is removed.
		 */
		shared void remove<T:void>(int i);
		
		/*
		 * Removes all elements from the list
		 */
		shared void clear<T:void>();

		/*
		 * Returns if the list is empty.
		 */
		shared bool isEmpty<T:void>();
		
		shared char* serialize();
		
		static void* deserialize<T:void>(char* str);
	
		/*
		 * Creates a new List Object and initializes the head an tail to null.
		 */
		static LinkedList<T>* create<T>(T defValue);
		
	}
	
} 
