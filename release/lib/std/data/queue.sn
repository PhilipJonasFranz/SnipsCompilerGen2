#include<iterable.sn>

namespace Queue {
	
	restricted struct CyclicQueue<T> : Iterable<T> {
		
		shared void destroy<T:void>() {
			free(self->storage);
			free(self);
		}
		
		shared bool isEmpty<T:void>() {
			return self->isEmpty;
		}
		
		shared bool isFull<T:void>() {
			return self->head == self->tail && !self->isEmpty;
		}
		
		shared void enqueue(T value) {
			if (self->head == self->tail && !self->isEmpty) {
				/* Queue is full */
				return;
			}
			else {
				/* 
				 * Calculate word offset to the storage location based on the 
				 * Size of the proviso type and the head index
				 */
				int off = self->head * sizeof(T);
				
				/* Write value */
				*(self->storage + off) = value;
				
				/* Increment head index */
				self->head = (self->head + 1) % self->size;
				
				/* Set is empty flag and return */
				self->isEmpty = false;
				return;
			}
		}
		
		shared T dequeue() {
			if (self->isEmpty) {
				/* Queue is empty, return a default value. */
				return self->defValue;
			}
			else {
				/* Read value from tail */
				T value = *(self->storage + (self->tail * sizeof(T)));
				
				/* Increment tail */
				self->tail = (self->tail + 1) % self->size;
				
				/* If tail now is equal to head the queue must be empty */
				if (self->tail == self->head) self->isEmpty = true;
				
				return value;
			}
		}

		shared void clear<T:void>() {
			self->head = 0;
			self->tail = 0;
			self->isEmpty = true;
			return;
		}
		
		shared T get(int index) {
			return *(self->storage + (((self->tail + index) % self->size) * sizeof(T)));
		}
		
		shared void set(int index, T value) {
			int off = (((self->tail + index) % self->size) * sizeof(T));
			*(self->storage + off) = value;
		}
		
		shared int size<T:void>() {
			/* Queue is full */
			if (self->head == self->tail && !(self->isEmpty)) 
				return self->size;
			
			int size = self->head - self->tail;
			
			/* Head is behind tail */
			if (size < 0) size = self->size + size;
			
			return size;
		}
	
		static CyclicQueue<T>* create<T>(int size, T defValue) {
			/* Allocate memory for storage of given size */
			T* storage = resv(sizeof(T) * size);
			
			/* Initialize, set start values */
			return init<>(CyclicQueue<T>::(storage, defValue, size, 0, 0, true));
		}
	
	}
	
} 
