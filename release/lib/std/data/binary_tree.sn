/*
 * [BASE-PACKAGE]
 *
 * This package contains the utility to create a binary
 * search tree.
 */
namespace Tree {
	
	/*
	 * A tree node that has a left and right child and holds a value.
	 */
	restricted struct TreeNode<T> {
	
		TreeNode<T>* left;
		
		TreeNode<T>* right;
		
		T value;
	
		/*
		 * Inserts given value into the tree. The given predicate is used to place
		 * the given value at the correct position. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 * Returns the resulting root node.
		 */
		shared TreeNode<T>* insert(func (T, T) -> int pred, T value) {
			/* Initialize new node with null pointers and given value */
			TreeNode<T>* new = init<>(TreeNode<T>::(null, null, value));
			
			if (self == null) {
				/* Tree is empty */
				return new;
			}
			else {
				TreeNode<T>* head = self;
				while (head != null) {
					int cmp = pred(head->value, value);
					
					if (cmp == 0) {
						/* Value already in tree. */
						return self;
					}
					else if (cmp == 1) {
						/* Left leaf is null, insert here */
						if (head->left == null) {
							head->left = new;
							return self;
						}
						else head = head->left;
					}
					else {
						/* Right leaf is null, insert here */
						if (head->right == null) {
							head->right = new;
							return self;
						}
						else head = head->right;
					}
				}
			}
		}
		
		/*
		 * Checks if given value is contained in the tree. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 */
		shared bool contains(func (T, T) -> int pred, T value) {
			if (self == null) return false;
			else {
				if (pred(self->value, value) == 0) return true;
				else {
					if (pred(self->value, value) == 1) 
						return contains(self->left, pred, value);
					else 
						return contains(self->right, pred, value);
				}
			}
		}
		
		/*
		 * Delete given value from the given tree. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 * Returns the new root. May be null when the resulting tree is empty.
		 */
		shared TreeNode<T>* delete(func (T, T) -> int pred, T value) {
			/* Found leaf */
			if (self == null) return null;
				
			int cmp = pred(value, self->value);
				
			if (cmp == -1)
				self->left = (self->left)->delete(pred, value);
			else if (cmp == 1)
				self->right = (self->right)->delete(pred, value);
			else {
				if (self->left == null) {
					return self->right;
				}
				else if (self->right == null) {
					return self->left;
				}
				else {
					TreeNode<T>* n = self->right;
					while (n->left != null)
						n = n->left;

					self->value = n->value;
					
					self->right = (self->right)->delete(pred, n->value);
				}
			}
			
			return self;
		}
	
		/*
		 * Create a new Tree, initialize both childs to 0, set root value
		 * to given value. Return a pointer to the root.
		 */
		static TreeNode<T>* create<T>(T value) {
			/* Initialize the root with null pointers and the given value */
			return init<>(TreeNode<T>::(null, null, value));
		}
	
	}
	
} 
