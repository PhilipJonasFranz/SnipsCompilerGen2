/*
 * [BASE-PACKAGE]
 *
 * This package contains the utility to create a binary
 * search tree.
 */
namespace Tree {
	
	/*
	 * A tree node that has a left and right child and holds a value.
	 */
	restricted struct TreeNode<T> {
	
		TreeNode<T>* left;
		
		TreeNode<T>* right;
		
		T value;
	
		/*
		 * Inserts given value into the tree. The given predicate is used to place
		 * the given value at the correct position. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 * Returns the resulting root node.
		 */
		shared TreeNode<T>* insert(func (T, T) -> int pred, T value);
		
		/*
		 * Checks if given value is contained in the tree. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 */
		shared bool contains(func (T, T) -> int pred, T value);
		
		/*
		 * Delete given value from the given tree. The predicate should sort the values
		 * in a total order. This means that the predicate (x, y) -> int returns:
		 *		1	if x > y,
		 *		-1	if x < y,
		 * 		0 	if x = y.
		 * Returns the new root. May be null when the resulting tree is empty.
		 */
		shared TreeNode<T>* delete(func (T, T) -> int pred, T value);
	
		/*
		 * Create a new Tree, initialize both childs to 0, set root value
		 * to given value. Return a pointer to the root.
		 */
		static TreeNode<T>* create<T>(T value);
	
	}
	
} 
