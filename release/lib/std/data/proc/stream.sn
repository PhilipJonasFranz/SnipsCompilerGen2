#include<iterable.sn>
#include<collection.sn>

/*
 * Contains the utility to create a stream from an collection
 * interface and to modify the data behind the interface with
 * predicates.
 */
namespace Streamable {
	
	/*
	 * A stream capsules an Iterable interface, that contains the
	 * data. Within the typedef, a range of functions are defined
	 * to modify the data using predicates.
	 */
	restricted struct Stream<T> : Iterable<T> {
		
		/* The interface which the data is behind */
		Collection<T> collection;
		
		/*
		 * Iterates over the data and applies the given predicate
		 * to it. Overwrites the previous data in the stream.
		 */
		shared Stream<T>* forEach(func T -> T pred) {
			int size = (self->collection).size();
			
			for (int i = 0; i < size; i++) {
				T val = pred((self->collection).get(i));
				(self->collection).set(i, val);
			}
			
			return self;
		}
		
		/*
		 * Filters out all values in the stream that do not match
		 * the filter predicate.
		 */
		shared Stream<T>* filter(func T -> bool pred) {
			int c = 0;
			int size = (self->collection).size();
			
			for (int i = 0; i < size; i++) {
				if (!pred((self->collection).get(i))) {
					(self->collection).remove(c);
					c--;
				}
				
				c++;
			}
			
			return self;
		}

		/*
		 * Returns the size of the capsuled interable interface.
		 */
		shared int size() {
			return (self->collection).size();
		}
		
		/*
		 * Returns the value at given index from 
		 * the capsuled collection interface.
		 */
		shared T get(int index) {
			return (self->collection).get(index);
		}
		
		/*
		 * Sets the value at the given index to the
		 * given value in the capsuled collection interface.
		 */
		shared void set(int index, T value) {
			(self->collection).set(index, value);
		}
		
		/*
		 * Creates and initializes a new stream.
		 * Returns a pointer to the newly created stream.
		 */
		static Stream<T> create<T>(Collection<T> collection) {
			return Stream<T>::(collection);
		}
		
	}
	
} 
