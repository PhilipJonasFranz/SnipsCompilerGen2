#include<linked_list.sn>

/*
 * This package provides the utility to create and 
 * use a stack. This package builds on the linked_list
 * package. 
 */
namespace Stack {
	
	struct StackedList<T> {
		LinkedList<T>* list;
	}
	
	/*
	 * Creates and initializes a new stack.
	 * Returns a pointer to the newly created stack.
	 */
	StackedList<T>* create<T>(T defValue) {
		/* Allocate a new linked list for the stack */
		LinkedList<T>* list = List::create<T>(defValue);
		
		/* Allocate the stack */
		StackedList<T>* stack = resv(sizeof(StackedList<T>));
		
		/* Initialize the stack with the list */
		*stack = StackedList<T>::(list);
		
		return stack;
	}
	
	/*
	 * Destroys the stack and the capsuled list.
	 */
	void destroy(StackedList<void>* stack) {
		/* Destroy the capsuled list */
		List::destroy(stack->list);
		
		/* Free the stack itself */
		free(stack);
	}
	
	/*
	 * Pushes given element on top of the stack.
	 */
	void push<T>(StackedList<T>* stack, T value) {
		List::add<T>(stack->list, value);
	}
	
	/*
	 * Returns true if no elements are currently in the stack.
	 */
	bool isEmpty(StackedList<void>* stack) {
		return List::size(stack->list) == 0;
	}
	
	/*
	 * Returns the amount of elements stored in the stack.
	 */
	int size(StackedList<void>* stack) {
		return List::size(stack->list);
	}
	
	/*
	 * Returns the element on the top of the stack, but doesnt
	 * remove it. Returns the default value if the stack is empty.
	 */
	T peek<T>(StackedList<T>* stack) {
		if (Stack::isEmpty(stack)) {
			return stack->list->defValue;
		}
		else {
			int size = List::size(stack->list);
			return List::get<T>(stack->list, size - 1);
		}
	}
	
	/*
	 * Returns the element on the top of the stack, and 
	 * removes it. Returns the default value if the stack is empty.
	 */
	T pop<T>(StackedList<T>* stack) {
		if (Stack::isEmpty(stack)) {
			return stack->list->defValue;
		}
		else {
			int size = List::size(stack->list);
			T value = List::get<T>(stack->list, size - 1);
			List::remove(stack->list, size - 1);
			return value;
		}
	}
	
}