#include<hash.sn>
#include<linked_list.sn>

/*
 * This package contains the utility and definitions
 * to create and maintain a hash-map of any type.
 * Data can be stored and loaded from the hash map.
 * The map has collision avoidance, so that if the hashed
 * key already exists, the two values still can be stored
 * and retrieved later with the correct key.
 */
namespace Map {
	
	/*
	 * A tuple capsuling two different data types. Padding is required
	 * since SIDs may be enabled or not. If SIDs are enabled, the 
	 * tupleKeyMatcher will match the SID and the key. If they are disabled, 
	 * matcher will match the key and the 0 padding. 
	 */
	restricted struct MapEntry<X, Y> {
		X key;
		int pad;
		Y value;
	}
	
	/*
	 * Matches the entire memory section of the key. Returns true
	 * if all values are equal.
	 */
	restricted bool tupleKeyMatcher<K, V>(MapEntry<K, V>* t0, MapEntry<K, V>* t1);
	
	/*
	 * The hashmap itself, capsuling a storage array
	 * out of linked lists with the size specified in the capsuled
	 * size field, and a default value that is returned when a 
	 * key is not found.
	 */
	restricted struct HashMap<K, V> {
	
		LinkedList<MapEntry<K, V>*>** storage;
	
		int size;
	
		MapEntry<K, V>* defValue;
	
		/*
		 * Frees all capsuled objects in the map as well as all 
		 * stored values, and the map itself.
		 */
		shared void destroy<K:void, V:void>();
		
		/*
		 * Stores given value at the hashed key location.
		 */
		shared void put(K key, V value);
		
		/*
		 * If the given key is contained in the map, replace the
		 * value stored under the key with the given value.
		 */
		shared void replace(K key, V value);
		
		/*
		 * Returns the value corresponding to given key, or
		 * the default value if the key does not exist.
		 */
		shared V get(K key);
		
		/*
		 * Remove the key from the map. Return if it doesnt exist.
		 */
		shared void remove(K key);
		
		/*
		 * Checks wether given key is contained in the map.
		 */
		shared bool contains(K key);
		
		/*
		 * Retrieves all entries from the HashMap sorted by hash value ascending,
		 * and adds them into a single linked list and returns that list.
		 */
		shared LinkedList<MapEntry<K, V>*>* getEntries();
		
		/*
		 * Retrieves all stored values from the HashMap sorted by hash value ascending,
		 * and adds them into a single linked list and returns that list.
		 */
		shared LinkedList<V>* getValues();
	
		/*
		 * Creates a new hash map with defined size and default value.
		 * Also sets up the storage and initializes it.
		 */
		static HashMap<K, V>* create<K, V>(int size, V defValue);
	
	}
	
} 
