/*
 * A single list entry, contains a pointer to the next node
 * and a value.
 */
struct ListNode {
	ListNode* next;
	int value;
}

/*
 * Wraps the list head and tail.
 */
struct List {
	ListNode* head;
	ListNode* tail;
}

/*
 * Creates a new List Object and initializes the head an tail to 0.
 */
List* create() {
	List* lp = (List*) malloc(sizeof(List));

	/* Initialize list, set pointers to 0 */
	*lp = List::{(ListNode*) 0, (ListNode*) 0};

	return lp;
}

/*
 * Creates a new list node for given value x and adds the node at the
 * end of the list.
 */
void add(List* lp, int x) {
	ListNode* n = (ListNode*) malloc(sizeof(ListNode));

	/* Initialize the new List Node, set the next pointer to null */
	*n = ListNode::{(ListNode*) 0, x};

	if (lp->head == 0) {
		lp->head = n; // Dereference through pointer
		lp->tail = n;
	}
	else {
		lp->tail->next = n;
		lp->tail = n;
	}	
}

/*
 * Check if given list contains given value.
 */
bool contains(List* lp, int x) {
	ListNode* n = lp->head;
	while (n->next != 0) {
		if (n->value == x) {
			/* Value found */
			return true;
		}
		/* Jump to next */
		n = n->next;
	}
	/* Not found */
	return false;
}

/*
 * Finds the first node in the list that has given value.
 * Returns a pointer to this list node.
 */
int* find(List* lp, int x) {
	ListNode* n = lp->head;
	while (n->next != 0) {
		if (n->value == x) {
			return n;
		}
		/* Jump to next */
		n = n->next;
	}
	/* Not found */
	return -1;
}