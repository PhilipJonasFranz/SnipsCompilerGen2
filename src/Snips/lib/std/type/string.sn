#include<linked_list.sn>

/*
 * This package contains various utility functions for Strings chars.
 */
namespace String {

	/*
	 * Compares the two given strings. Checks if all chars are equal and returns the
     * boolean result.
     */
    bool equals(char* str0, char* str1) {
    	bool equal = true;
    	int c = 0;
    	while (true) {
    		char c0 = *(str0 + c);
    		char c1 = *(str1 + c);
    		
    		equal &= c0 == c1;
    		if ((int) c0 == 0 || (int) c1 == 0) break;
    		c++;
    	}
    	
    	return equal;
    }

	/*
	 * Collects all chars in the string whiches index is greater or equal to begin and less than end.
	 * This means that the length of the resulting string will be (end - begin), starting at begin.
	 * Valid inputs for the ranges can be negative numbers and indexes out of bounds, 
	 * but result may not be as expected.
	 */
	char* substring(char* str, int begin, int end) {
		LinkedList<char>* sub = List::create<char>();
		
		/* Iterate over String and collect characters in range */
		int c = 0;
		while (((int) *(str + c)) != 0) {
			if (c >= begin && c < end) {
				List::add<char>(sub, *(str + c));
			}
			c++;
		}

		int size = List::size(sub);

		/* Substring only consists out of null char */
		if (size == 1 && (int) List::get<char>(sub, 0) == 0) {
			char* str0 = (char*) resv(1);
			*str = (char) 0;
			
			/* Cleanup and return result */
			free(sub);
			return str0;
		}
		else {
			/* Collect chars in list in string and insert 0 char */
			char* str0 = (char*) resv(size + 1);
			for (int i = 0; i < size; i++) {
				*(str0 + i) = List::get<char>(sub, i);
			}
			*(str0 + size) = (char) 0;
		
			/* Cleanup and return result */
			free(sub);
			return str0;
		}
	}
	
	/*
	 * Returns the length of the string. The length is determined by the first
	 * occurrence of the 0 termination char. The length does include the 0 char.
	 */
	int length(char* str) {
		int size = 0;
		while (((int) *(str + size)) != 0) {
			size++;
		}
		size++;
		return size;
	}

}