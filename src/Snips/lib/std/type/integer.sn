/*
 * This file contains utility functions for int values.
 */
namespace Integer {

	/*
	 * Parses the given String to an int. The String has to have the form 
	 * (-)*+([0-9])*NULL or ([0-9])*NULL. If the String does not match the regex, -1 is returned.
     * The String must be terminated with the NULL char, otherwise the function will
     * run infiniteley.
	 */
	int parseInt(char* c) {
		int c0 = 0;
		int sum = 0;
		bool neg = false;
		while ((int) (*(c + c0)) != 0) {
			int s = (int) *(c + c0);
			
			/* Check if character is a - */
			if (s == 45) {
				neg = !neg;
			}
			else {
				/* Subtract 48 to convert to number between [0-9]. */
				s -= 48;
				if (s < 0 || s > 9) {
					sum = -1;
					break;
				}
				sum = (sum * 10) + s;
			}
			c0++;
		}
		
		/* Negate if sign flag is set */
		if (neg) sum = -sum;
		
		return sum;
	}
	
	/*
	 * Converts given int to a String representation.
	 */
	char* toString(int num) {
		LinkedList<int>* list = List::create<int>();
	
		bool neg = false;
		if (num < 0) {
			neg = true;
			num = -num;
		}
		
		do {
			int c = num % 10;
			List::add<int>(list, c);
			num = num / 10;
		} while (num > 0);
		
		/* Add Sign */
		if (neg) {
			List::add<int>(list, -3);
		}
		
		/* Get size of list */
		int size = List::size(list);
		char* str = (char*) resv(size + 1);
		
		int c0 = 0;
		for (int i = size - 1; i >= 0; i--) {
			int c = List::get<int>(list, i) + 48;
			*(str + c0) = (char) c;
			c0++;
		}

		*(str + size) = (char) 0;
		
		List::destroy(list);
		
		return str;
	}

}