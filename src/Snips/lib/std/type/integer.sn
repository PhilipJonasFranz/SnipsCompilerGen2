/*
 * This file contains utility functions for int values.
 */
namespace Integer {

	/*
	 * Parses the given String to an int. The String has to have the form 
	 * (-)*+([0-9])* or ([0-9])*. If the String does not match the regex, -1 is returned.
	 */
	int parseInt(char* c) {
		int size = hsize(c);
		int sum = 0;
		
		bool neg = false;
		for (int i = 0; i < size; i++) {
			int s = ((int) *(c + i));
			
			/* Check if character is a - */
			if (s == 45) {
				neg = !neg;
			}
			else {
				/* Subtract 48 to convert to number between [0-9]. */
				s -= 48;
				if (s < 0 || s > 9) {
					sum = -1;
					break;
				}
				sum = (sum * 10) + s;
			}
		}
		
		/* Negate if sign flag is set */
		if (neg) sum = -sum;
		
		return sum;
	}
	
	/*
	 * Converts given int to a String representation.
	 */
	char* toString(int num) {
		LinkedList<int>* list = create<int>();
	
		if (num == 0) {
			add<int>(list, 0);
		}
		else {
			/* Append sign */
			if (num < 0) {
				add<int>(list, -3);
				num = -num;
			}
			
			while (num > 0) {
				int c = num % 10;
				add<int>(list, c);
				num = num / 10;
			}
		}
		
		/* Get size of list */
		int size = size(list);
		char* str = (char*) resv(size);
		
		for (int i = size - 1; i >= 0; i--) {
			int c = get<int>(list, i) + 48;
			*(str + i) = (char) c;
		}
		
		List::destroy(list);
		
		return str;
	}

}